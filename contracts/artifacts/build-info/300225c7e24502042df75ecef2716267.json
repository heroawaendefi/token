{
	"id": "300225c7e24502042df75ecef2716267",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/HatTokenV2.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    uint256 _liquidityFee;\r\n    address _liquidityKeeper;\r\n\r\n    mapping(address => bool) _blockSenders;\r\n    mapping(address => bool) _blockReceivers;\r\n    mapping(address => bool) _liquidityFrees;\r\n\r\n    /**\r\n     * @dev Set liquidity fee and keeper\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n\r\n        _liquidityFee = 50;\r\n        _liquidityKeeper = owner();\r\n\r\n        _mint(owner(), 10**9 * 10**18);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20Pausable) {\r\n        require(\r\n            !_blockSenders[from],\r\n            \"Hero Awaken Token: the sender has been blocked\"\r\n        );\r\n        require(\r\n            !_blockReceivers[to],\r\n            \"Hero Awaken Token: the receiver has been blocked\"\r\n        );\r\n\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function liquidityFee() external view returns (uint256) {\r\n        return _liquidityFee;\r\n    }\r\n\r\n    function liquidityKeeper() external view returns (address) {\r\n        return _liquidityKeeper;\r\n    }\r\n\r\n    function blocked(address user) external view returns (bool, bool) {\r\n        return (_blockSenders[user], _blockReceivers[user]);\r\n    }\r\n\r\n    function blockUser(\r\n        address user,\r\n        bool can_send,\r\n        bool can_receive\r\n    ) public onlyOwner {\r\n        _blockSenders[user] = can_send;\r\n        _blockReceivers[user] = can_receive;\r\n    }\r\n\r\n    function setLiquidityFee(uint256 fee) public onlyOwner {\r\n        require(\r\n            fee >= 0 && fee <= 1000,\r\n            \"Hero Awaken Token: liquidity fee must between 0 and 1000\"\r\n        );\r\n\r\n        _liquidityFee = fee;\r\n    }\r\n\r\n    function setLiquidityKeeper(address keeper) public onlyOwner {\r\n        _liquidityKeeper = keeper;\r\n    }\r\n\r\n    function addLiquidityFree(address user) public onlyOwner {\r\n        _liquidityFrees[user] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        if (_liquidityFrees[from] || _liquidityFrees[to]) {\r\n            super._transfer(from, to, amount);\r\n\r\n        } else {}\r\n    \r\n        uint256 fee = amount.mul(_liquidityFee).div(1000);\r\n        amount -= fee;\r\n\r\n        super._transfer(from, to, amount);\r\n        super._transfer(from, _liquidityKeeper, fee);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bda1319db846d6d6f92d8a57a9bdee8bde1dc39aa7546165791692c24dd6f30a\",\"dweb:/ipfs/Qma5oZ7DmbdAjd8mpiW7mx896PDtwsQtCQ2hj9Upf7b7JK\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
				"AccessControlEnumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "getRoleMember",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleMemberCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {AccessControl} that allows enumerating the members of each role.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"getRoleMember(bytes32,uint256)": {
								"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
							},
							"getRoleMemberCount(bytes32)": {
								"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getRoleMember(bytes32,uint256)": "9010d07c",
							"getRoleMemberCount(bytes32)": "ca15c873",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bda1319db846d6d6f92d8a57a9bdee8bde1dc39aa7546165791692c24dd6f30a\",\"dweb:/ipfs/Qma5oZ7DmbdAjd8mpiW7mx896PDtwsQtCQ2hj9Upf7b7JK\"]},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ee05f28f549a5d6515e152580716b87636ed4bfab9812499a6e3803df88288b\",\"dweb:/ipfs/QmeEnhdwY1t5Y3YU5a4ffzgXuToydH2PNdNxV9W7dEPRQJ\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
				"IAccessControlEnumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "getRoleMember",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleMemberCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControlEnumerable declared to support ERC165 detection.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"getRoleMember(bytes32,uint256)": {
								"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
							},
							"getRoleMemberCount(bytes32)": {
								"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getRoleMember(bytes32,uint256)": "9010d07c",
							"getRoleMemberCount(bytes32)": "ca15c873",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d491a2ca79dbf44bc02e876e21a5847a2cbcc011188532ad8662cdc1c134a4e\",\"dweb:/ipfs/QmUQXhSV8ZvHLzfdG89ZNSh1nLrAYyjnNBLznJGwGcwVk8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2049  _name */\n  0x03\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2074  _symbol */\n  0x04\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_23)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_37:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_38:\n    /* \"#utility.yul\":1354:1415   */\n  tag_39\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_41\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_11:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_43:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  sub\n    /* \"#utility.yul\":1816:1977   */\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_44:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3331:3343  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3175:3177  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6109  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3482:3489  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:7025  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4065:4072  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2210:2223  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2242:2247  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2235:2247  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4516:4520  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4586:4593  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4595:4601  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4578  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4619:4623  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5319:5323  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5391:5395  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5406:5412  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5390  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5433:5437  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5439:5441  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5443:5449  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5432  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5467:5471  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6109  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5961:5965  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6058  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6051  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6058  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6067  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5961:5965  bool */\n      swap1\n      swap2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6081  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      tag_73\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6067  _allowances[owner][spender] */\n      dup7\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6080  _allowances[owner][spender] + addedValue */\n      tag_86\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6070:6080  addedValue */\n      dup8\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6080  _allowances[owner][spender] + addedValue */\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6023  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6081  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2423:2436  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2455:2462  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2448:2462  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:7025  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6689:6693  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6788  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6781  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6788  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6797  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6689:6693  bool */\n      swap1\n      swap2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6815:6850  currentAllowance >= subtractedValue */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6986  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6935:6940  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6942:6949  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6970:6985  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6951:6967  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6951:6985  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6934  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6986  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3808:3812  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3879:3881  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3883:3889  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3871  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10123:10493  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10273  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_107\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10332:10353  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_110:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10421  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10414  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10421  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10430  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10439  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10123:10493  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10900:10924  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10966:11003  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10962:11205  if (currentAllowance != type(uint256).max) {... */\n      tag_120\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11047:11053  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11027:11043  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11027:11053  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_98\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      tag_120\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11138:11143  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11145:11152  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11173:11179  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11154:11170  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11154:11179  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11137  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_120:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10890:11211  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7488:8139  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7614:7632  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7692:7708  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7845  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7808:7827  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7845  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7863:7884  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_98\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7976  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7970  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7976  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7979:7999  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7999  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8032  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7993:7999  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7970  _balances */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      tag_133\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7993:7999  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_133:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8073:8075  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8067:8071  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8077:8083  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_134\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8095:8132  _afterTokenTransfer(from, to, amount) */\n      tag_120\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11795:11916  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_142:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_142)\n    tag_144:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_145:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_139:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_147:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_149:\n        /* \"#utility.yul\":962:991   */\n      tag_150\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_139\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_154:\n        /* \"#utility.yul\":1612:1641   */\n      tag_155\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_139\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_156\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_139\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_159:\n        /* \"#utility.yul\":2100:2129   */\n      tag_160\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_139\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_162:\n        /* \"#utility.yul\":2308:2337   */\n      tag_163\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_139\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_164\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_139\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_166:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_87:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_169:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220f619543fdce4f3db13c3660f4cb24b0f5614da60440ce72ab8d94c89b8ad0f6c64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_773": {
									"entryPoint": null,
									"id": 773,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 475,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 581,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:18"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:18"
															},
															"nodeType": "YulIf",
															"src": "220:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:18"
															},
															"nodeType": "YulIf",
															"src": "353:36:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:18"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:18"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:18"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:18",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:18"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:18"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:18",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:18"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:18"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:18"
															},
															"nodeType": "YulIf",
															"src": "536:72:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:18",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:18"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:18"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:18"
															},
															"nodeType": "YulIf",
															"src": "698:53:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:18"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:18"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:18",
																"statements": []
															},
															"src": "779:133:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:18"
															},
															"nodeType": "YulIf",
															"src": "921:80:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:18",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:18"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:18",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:18",
														"type": ""
													}
												],
												"src": "146:885:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:18"
															},
															"nodeType": "YulIf",
															"src": "1164:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:18"
															},
															"nodeType": "YulIf",
															"src": "1301:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:18"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:18"
															},
															"nodeType": "YulIf",
															"src": "1474:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:18"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:18",
														"type": ""
													}
												],
												"src": "1036:562:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:18"
															},
															"nodeType": "YulIf",
															"src": "1746:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:18"
															},
															"nodeType": "YulIf",
															"src": "1816:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:18",
														"type": ""
													}
												],
												"src": "1603:380:18"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b5e38038062000b5e8339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b6108cd80620002916000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f619543fdce4f3db13c3660f4cb24b0f5614da60440ce72ab8d94c89b8ad0f6c64736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB5E CODESIZE SUB DUP1 PUSH3 0xB5E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x281 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8CD DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x871 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x86B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x892 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 NOT SLOAD EXTCODEHASH 0xDC 0xE4 RETURN 0xDB SGT 0xC3 PUSH7 0xF4CB24B0F5614 0xDA PUSH1 0x44 0xC 0xE7 0x2A 0xB8 0xD9 0x4C DUP10 0xB8 0xAD 0xF PUSH13 0x64736F6C634300080D00330000 ",
							"sourceMap": "1403:11223:6:-:0;;;1978:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2067:17:6;;;;:7;;:17;;;;;:::i;:::-;;1978:113;;1403:11223;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1403:11223:6;;;-1:-1:-1;1403:11223:6;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:18;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:18;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:18;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:18:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:18;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1403:11223:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_1315": {
									"entryPoint": null,
									"id": 1315,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1250": {
									"entryPoint": 903,
									"id": 1250,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1304": {
									"entryPoint": null,
									"id": 1304,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1512": {
									"entryPoint": null,
									"id": 1512,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1293": {
									"entryPoint": 1195,
									"id": 1293,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1077": {
									"entryPoint": 1341,
									"id": 1077,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_870": {
									"entryPoint": null,
									"id": 870,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_895": {
									"entryPoint": 600,
									"id": 895,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_827": {
									"entryPoint": null,
									"id": 827,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_803": {
									"entryPoint": null,
									"id": 803,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1000": {
									"entryPoint": 738,
									"id": 1000,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_958": {
									"entryPoint": 660,
									"id": 958,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_783": {
									"entryPoint": 454,
									"id": 783,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_793": {
									"entryPoint": 723,
									"id": 793,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_928": {
									"entryPoint": 624,
									"id": 928,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_852": {
									"entryPoint": 889,
									"id": 852,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1888,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2018,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2052,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1958,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2161,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2103,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:18"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:18",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:18",
																"statements": []
															},
															"src": "294:140:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:18"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:18"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:18",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:18"
															},
															"nodeType": "YulIf",
															"src": "443:91:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:18",
														"type": ""
													}
												],
												"src": "14:597:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:18"
															},
															"nodeType": "YulIf",
															"src": "713:70:18"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:18",
														"type": ""
													}
												],
												"src": "616:173:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:18"
															},
															"nodeType": "YulIf",
															"src": "891:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:18",
														"type": ""
													}
												],
												"src": "794:254:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:18",
														"type": ""
													}
												],
												"src": "1053:187:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:18",
														"type": ""
													}
												],
												"src": "1245:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:18"
															},
															"nodeType": "YulIf",
															"src": "1541:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:18",
														"type": ""
													}
												],
												"src": "1427:328:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:18",
														"type": ""
													}
												],
												"src": "1760:184:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:18"
															},
															"nodeType": "YulIf",
															"src": "2029:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:18",
														"type": ""
													}
												],
												"src": "1949:186:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:18"
															},
															"nodeType": "YulIf",
															"src": "2237:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:18",
														"type": ""
													}
												],
												"src": "2140:260:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:18"
															},
															"nodeType": "YulIf",
															"src": "2548:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:18"
															},
															"nodeType": "YulIf",
															"src": "2618:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:18",
														"type": ""
													}
												],
												"src": "2405:380:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:18",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:18"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:18"
															},
															"nodeType": "YulIf",
															"src": "2848:136:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:18"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:18",
														"type": ""
													}
												],
												"src": "2790:225:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:18"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:18",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:18"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:18",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:18",
														"type": ""
													}
												],
												"src": "3020:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:18",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:18",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:18"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:18",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:18",
														"type": ""
													}
												],
												"src": "3426:400:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:18",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:18"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:18",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:18",
														"type": ""
													}
												],
												"src": "3831:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:18",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:18"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:18",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:18",
														"type": ""
													}
												],
												"src": "4234:353:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:18",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:18"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:18",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:18",
														"type": ""
													}
												],
												"src": "4592:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:18",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:18",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:18"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:18",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:18",
														"type": ""
													}
												],
												"src": "4998:399:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:18",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:18"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:18",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:18",
														"type": ""
													}
												],
												"src": "5402:402:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f619543fdce4f3db13c3660f4cb24b0f5614da60440ce72ab8d94c89b8ad0f6c64736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x871 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x86B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x892 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 NOT SLOAD EXTCODEHASH 0xDC 0xE4 RETURN 0xDB SGT 0xC3 PUSH7 0xF4CB24B0F5614 0xDA PUSH1 0x44 0xC 0xE7 0x2A 0xB8 0xD9 0x4C DUP10 0xB8 0xAD 0xF PUSH13 0x64736F6C634300080D00330000 ",
							"sourceMap": "1403:11223:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:18;;1211:22;1193:41;;1181:2;1166:18;4433:197:6;1053:187:18;3244:106:6;3331:12;;3244:106;;;1391:25:18;;;1379:2;1364:18;3244:106:6;1245:177:18;5192:286:6;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;1902:36:18;;1890:2;1875:18;3093:91:6;1760:184:18;5873:236:6;;;;;;:::i;:::-;;:::i;3408:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:6;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;:::i;6596:429::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3976:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4091:18:6;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149;2156:98;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:11;4570:32:6;719:10:11;4586:7:6;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:6;;4433:197;-1:-1:-1;;;4433:197:6:o;5192:286::-;5319:4;719:10:11;5375:38:6;5391:4;719:10:11;5406:6:6;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:6;;5192:286;-1:-1:-1;;;;5192:286:6:o;5873:236::-;719:10:11;5961:4:6;6040:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6040:27:6;;;;;;;;;;5961:4;;719:10:11;6015:66:6;;719:10:11;;6040:27:6;;:40;;6070:10;;6040:40;:::i;:::-;6015:8;:66::i;2367:102::-;2423:13;2455:7;2448:14;;;;;:::i;6596:429::-;719:10:11;6689:4:6;6770:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6770:27:6;;;;;;;;;;6689:4;;719:10:11;6815:35:6;;;;6807:85;;;;-1:-1:-1;;;6807:85:6;;3222:2:18;6807:85:6;;;3204:21:18;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:18;;;3344:35;3396:19;;6807:85:6;;;;;;;;;6926:60;6935:5;6942:7;6970:15;6951:16;:34;6926:8;:60::i;3729:189::-;3808:4;719:10:11;3862:28:6;719:10:11;3879:2:6;3883:6;3862:9;:28::i;10123:370::-;-1:-1:-1;;;;;10254:19:6;;10246:68;;;;-1:-1:-1;;;10246:68:6;;3628:2:18;10246:68:6;;;3610:21:18;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:18;;;3750:34;3801:19;;10246:68:6;3426:400:18;10246:68:6;-1:-1:-1;;;;;10332:21:6;;10324:68;;;;-1:-1:-1;;;10324:68:6;;4033:2:18;10324:68:6;;;4015:21:18;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:18;;;4155:32;4204:19;;10324:68:6;3831:398:18;10324:68:6;-1:-1:-1;;;;;10403:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10454:32;;1391:25:18;;;10454:32:6;;1364:18:18;10454:32:6;;;;;;;10123:370;;;:::o;10770:441::-;-1:-1:-1;;;;;4091:18:6;;;10900:24;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10966:37:6;;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:6;;4436:2:18;11019:68:6;;;4418:21:18;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11019:68:6;4234:353:18;11019:68:6;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10890:321;10770:441;;;:::o;7488:651::-;-1:-1:-1;;;;;7614:18:6;;7606:68;;;;-1:-1:-1;;;7606:68:6;;4794:2:18;7606:68:6;;;4776:21:18;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:18;;;4916:35;4968:19;;7606:68:6;4592:401:18;7606:68:6;-1:-1:-1;;;;;7692:16:6;;7684:64;;;;-1:-1:-1;;;7684:64:6;;5200:2:18;7684:64:6;;;5182:21:18;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:18;;;5322:33;5372:19;;7684:64:6;4998:399:18;7684:64:6;-1:-1:-1;;;;;7830:15:6;;7808:19;7830:15;;;;;;;;;;;7863:21;;;;7855:72;;;;-1:-1:-1;;;7855:72:6;;5604:2:18;7855:72:6;;;5586:21:18;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:18;;;5726:36;5779:19;;7855:72:6;5402:402:18;7855:72:6;-1:-1:-1;;;;;7961:15:6;;;:9;:15;;;;;;;;;;;7979:20;;;7961:38;;8019:13;;;;;;;;:23;;7993:6;;7961:9;8019:23;;7993:6;;8019:23;:::i;:::-;;;;;;;;8073:2;-1:-1:-1;;;;;8058:26:6;8067:4;-1:-1:-1;;;;;8058:26:6;;8077:6;8058:26;;;;1391:25:18;;1379:2;1364:18;;1245:177;8058:26:6;;;;;;;;8095:37;11795:121;14:597:18;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:18;574:15;-1:-1:-1;;570:29:18;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:18:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:18;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:18:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:18:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:18;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "450600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2562",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "26966",
								"increaseAllowance(address,uint256)": "26945",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51270",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "tag",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DIV",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 18,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 18,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 18,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 18,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 18,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "39"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 18,
									"value": "39"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 18,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 18,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f619543fdce4f3db13c3660f4cb24b0f5614da60440ce72ab8d94c89b8ad0f6c64736f6c634300080d0033",
									".code": [
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "70A08231"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "95D89B41"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "A457C2D7"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "DD62ED3E"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "6FDDE03"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "95EA7B3"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "18160DDD"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "23B872DD"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "313CE567"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3482,
											"end": 3489,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4065,
											"end": 4072,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2210,
											"end": 2223,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2242,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4516,
											"end": 4520,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4586,
											"end": 4593,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4595,
											"end": 4601,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4570,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5319,
											"end": 5323,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 5391,
											"end": 5395,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5406,
											"end": 5412,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5375,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5433,
											"end": 5437,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5439,
											"end": 5441,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5443,
											"end": 5449,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5423,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6051,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6070,
											"end": 6080,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6070,
											"end": 6080,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6015,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2423,
											"end": 2436,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6781,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6926,
											"end": 6986,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 6935,
											"end": 6940,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6970,
											"end": 6985,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6967,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6985,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6926,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 6926,
											"end": 6986,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3808,
											"end": 3812,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3879,
											"end": 3881,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3862,
											"end": 3871,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10273,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10254,
											"end": 10273,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10332,
											"end": 10353,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10332,
											"end": 10353,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10414,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "PUSH",
											"source": 6,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10900,
											"end": 10924,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10966,
											"end": 11003,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11003,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11047,
											"end": 11053,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 11138,
											"end": 11143,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11145,
											"end": 11152,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11173,
											"end": 11179,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11154,
											"end": 11170,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11154,
											"end": 11179,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11129,
											"end": 11137,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10890,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7488,
											"end": 8139,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 7488,
											"end": 8139,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7614,
											"end": 7632,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7614,
											"end": 7632,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "tag",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7692,
											"end": 7708,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7692,
											"end": 7708,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7808,
											"end": 7827,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7970,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7999,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7999,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7970,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8073,
											"end": 8075,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8067,
											"end": 8071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8077,
											"end": 8083,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 8095,
											"end": 8132,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 11795,
											"end": 11916,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 18,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 18,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 18,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 18,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 18,
											"value": "87"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12af4ac016f9fdf3be5d15824f4292272aa11f6b2e0192a0f7320f5ad49bbbf0\",\"dweb:/ipfs/QmRXMpdqCgA3TYuYxBodqs5p9jGbnMW6xa2gvjppvq4TWk\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12af4ac016f9fdf3be5d15824f4292272aa11f6b2e0192a0f7320f5ad49bbbf0\",\"dweb:/ipfs/QmRXMpdqCgA3TYuYxBodqs5p9jGbnMW6xa2gvjppvq4TWk\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c0f62d3d5bef22b5ca00cc3903e7de6152cb68d2d22401a463f373cda54c00f\",\"dweb:/ipfs/QmSfzjZux7LC7NW2f7rjCXTHeFMUCWERqDkhpCTBy7kxTe\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ERC20Pausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"paused()": "5c975abb",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":\"ERC20Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d491a2ca79dbf44bc02e876e21a5847a2cbcc011188532ad8662cdc1c134a4e\",\"dweb:/ipfs/QmUQXhSV8ZvHLzfdG89ZNSh1nLrAYyjnNBLznJGwGcwVk8\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12af4ac016f9fdf3be5d15824f4292272aa11f6b2e0192a0f7320f5ad49bbbf0\",\"dweb:/ipfs/QmRXMpdqCgA3TYuYxBodqs5p9jGbnMW6xa2gvjppvq4TWk\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1414cb92779420b50d3e796b47bad6ea800ef1805bc6f9bf35a3ccb4e17db3dc\",\"dweb:/ipfs/QmaMzwYqLiivfaWSgqeaAPboBtJjVD1hSrH48p7ExJZ7DG\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220be8e796df3678a252927d61fa1ac9c2d4a06755791bc1015400802f5a32140a464736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220be8e796df3678a252927d61fa1ac9c2d4a06755791bc1015400802f5a32140a464736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE DUP15 PUSH26 0x6DF3678A252927D61FA1AC9C2D4A06755791BC1015400802F5A3 0x21 BLOCKHASH LOG4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "146:1885:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220be8e796df3678a252927d61fa1ac9c2d4a06755791bc1015400802f5a32140a464736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE DUP15 PUSH26 0x6DF3678A252927D61FA1AC9C2D4A06755791BC1015400802F5A3 0x21 BLOCKHASH LOG4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "146:1885:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220be8e796df3678a252927d61fa1ac9c2d4a06755791bc1015400802f5a32140a464736f6c634300080d0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220087bbcf26e435ce4c8a5ac6a25748bb133dd06d79ff20c0d6b0c5747a4a35e9764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220087bbcf26e435ce4c8a5ac6a25748bb133dd06d79ff20c0d6b0c5747a4a35e9764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD PUSH28 0xBCF26E435CE4C8A5AC6A25748BB133DD06D79FF20C0D6B0C5747A4A3 0x5E SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "467:6301:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220087bbcf26e435ce4c8a5ac6a25748bb133dd06d79ff20c0d6b0c5747a4a35e9764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD PUSH28 0xBCF26E435CE4C8A5AC6A25748BB133DD06D79FF20C0D6B0C5747A4A3 0x5E SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "467:6301:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220087bbcf26e435ce4c8a5ac6a25748bb133dd06d79ff20c0d6b0c5747a4a35e9764736f6c634300080d0033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":812:12180  library EnumerableSet {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":812:12180  library EnumerableSet {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ea13dd946e6b018137863782d77129ccad2d0d3219b89e044622da354a51a30e64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea13dd946e6b018137863782d77129ccad2d0d3219b89e044622da354a51a30e64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SGT 0xDD SWAP5 PUSH15 0x6B018137863782D77129CCAD2D0D32 NOT 0xB8 SWAP15 DIV CHAINID 0x22 0xDA CALLDATALOAD 0x4A MLOAD LOG3 0xE PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "812:11368:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;812:11368:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea13dd946e6b018137863782d77129ccad2d0d3219b89e044622da354a51a30e64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SGT 0xDD SWAP5 PUSH15 0x6B018137863782D77129CCAD2D0D32 NOT 0xB8 SWAP15 DIV CHAINID 0x22 0xDA CALLDATALOAD 0x4A MLOAD LOG3 0xE PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "812:11368:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ea13dd946e6b018137863782d77129ccad2d0d3219b89e044622da354a51a30e64736f6c634300080d0033",
									".code": [
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/HatTokenV2.sol": {
				"HatTokenV2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MINTER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PAUSER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "addLiquidityFree",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "can_send",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "can_receive",
									"type": "bool"
								}
							],
							"name": "blockUser",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "blocked",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "getRoleMember",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleMemberCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidityFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidityKeeper",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								}
							],
							"name": "setLiquidityFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "keeper",
									"type": "address"
								}
							],
							"name": "setLiquidityKeeper",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"constructor": {
								"details": "Set liquidity fee and keeper See {ERC20-constructor}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"getOwner()": {
								"details": "Returns the bep token owner."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"getRoleMember(bytes32,uint256)": {
								"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
							},
							"getRoleMemberCount(bytes32)": {
								"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/HatTokenV2.sol\":510:4040  contract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/HatTokenV2.sol\":1090:1436  constructor(string memory name, string memory symbol) ERC20(name, symbol) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  dup2\n  mload\n    /* \"contracts/HatTokenV2.sol\":1150:1154  name */\n  dup3\n  swap1\n    /* \"contracts/HatTokenV2.sol\":1156:1162  symbol */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  tag_9\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2049  _name */\n  0x05\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  dup1\n  mload\n  tag_11\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2074  _symbol */\n  0x06\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_10\n  jump\t// in\ntag_11:\n  pop\n  pop\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":981:988  _paused */\n  0x07\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":981:996  _paused = false */\n  dup1\n  sload\n  not(0xff)\n  and\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_14\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_17\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_14:\n    /* \"contracts/HatTokenV2.sol\":1175:1219  _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()) */\n  tag_19\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"contracts/HatTokenV2.sol\":1175:1185  _setupRole */\n  tag_21\n    /* \"contracts/HatTokenV2.sol\":1175:1219  _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()) */\n  jump\t// in\ntag_19:\n    /* \"contracts/HatTokenV2.sol\":1232:1269  _setupRole(MINTER_ROLE, _msgSender()) */\n  tag_22\n    /* \"contracts/HatTokenV2.sol\":685:709  keccak256(\"MINTER_ROLE\") */\n  0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"contracts/HatTokenV2.sol\":1175:1185  _setupRole */\n  tag_21\n    /* \"contracts/HatTokenV2.sol\":1175:1219  _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()) */\n  jump\t// in\n    /* \"contracts/HatTokenV2.sol\":1232:1269  _setupRole(MINTER_ROLE, _msgSender()) */\ntag_22:\n    /* \"contracts/HatTokenV2.sol\":1280:1317  _setupRole(PAUSER_ROLE, _msgSender()) */\n  tag_24\n    /* \"contracts/HatTokenV2.sol\":754:778  keccak256(\"PAUSER_ROLE\") */\n  0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"contracts/HatTokenV2.sol\":1175:1185  _setupRole */\n  tag_21\n    /* \"contracts/HatTokenV2.sol\":1175:1219  _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()) */\n  jump\t// in\n    /* \"contracts/HatTokenV2.sol\":1280:1317  _setupRole(PAUSER_ROLE, _msgSender()) */\ntag_24:\n    /* \"contracts/HatTokenV2.sol\":1346:1348  50 */\n  0x32\n    /* \"contracts/HatTokenV2.sol\":1330:1343  _liquidityFee */\n  0x08\n    /* \"contracts/HatTokenV2.sol\":1330:1348  _liquidityFee = 50 */\n  sstore\n    /* \"contracts/HatTokenV2.sol\":1378:1385  owner() */\n  tag_26\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n  sload(0x07)\n  0x0100\n  swap1\n  div\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n  jump\n    /* \"contracts/HatTokenV2.sol\":1378:1385  owner() */\ntag_26:\n    /* \"contracts/HatTokenV2.sol\":1359:1375  _liquidityKeeper */\n  0x09\n    /* \"contracts/HatTokenV2.sol\":1359:1385  _liquidityKeeper = owner() */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  dup4\n  and\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n  sload(0x07)\n    /* \"contracts/HatTokenV2.sol\":1398:1428  _mint(owner(), 10**9 * 10**18) */\n  tag_28\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n  0x0100\n  swap1\n  swap2\n  div\n  and\n    /* \"contracts/HatTokenV2.sol\":1413:1427  10**9 * 10**18 */\n  0x033b2e3c9fd0803ce8000000\n    /* \"contracts/HatTokenV2.sol\":1398:1403  _mint */\n  tag_30\n    /* \"contracts/HatTokenV2.sol\":1398:1428  _mint(owner(), 10**9 * 10**18) */\n  jump\t// in\ntag_28:\n    /* \"contracts/HatTokenV2.sol\":1090:1436  constructor(string memory name, string memory symbol) ERC20(name, symbol) {... */\n  pop\n  pop\n    /* \"contracts/HatTokenV2.sol\":510:4040  contract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {... */\n  jump(tag_105)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_17:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x07\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x0100\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup2\n  dup2\n  mul\n  not(sub(shl(0xa8, 0x01), 0x0100))\n  dup6\n  and\n  or\n  swap1\n  swap5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap4\n  swap1\n  swap3\n  div\n  and\n  swap2\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6257:6367  function _setupRole(bytes32 role, address account) internal virtual {... */\ntag_21:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6335:6360  _grantRole(role, account) */\n  tag_35\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6346:6350  role */\n  dup3\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6352:6359  account */\n  dup3\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6335:6345  _grantRole */\n  tag_36\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6335:6360  _grantRole(role, account) */\n  jump\t// in\ntag_35:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6257:6367  function _setupRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8415:8804  function _mint(address account, uint256 amount) internal virtual {... */\ntag_30:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8498:8519  account != address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8490:8555  require(account != address(0), \"ERC20: mint to the zero address\") */\n  tag_39\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":1805:1807   */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8490:8555  require(account != address(0), \"ERC20: mint to the zero address\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":1787:1808   */\n  mstore\n    /* \"#utility.yul\":1844:1846   */\n  0x1f\n    /* \"#utility.yul\":1824:1842   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":1817:1847   */\n  mstore\n    /* \"#utility.yul\":1883:1916   */\n  0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n    /* \"#utility.yul\":1863:1881   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":1856:1917   */\n  mstore\n    /* \"#utility.yul\":1934:1952   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8490:8555  require(account != address(0), \"ERC20: mint to the zero address\") */\ntag_40:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_39:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8566:8615  _beforeTokenTransfer(address(0), account, amount) */\n  tag_42\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8595:8596  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8599:8606  account */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8608:8614  amount */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8566:8586  _beforeTokenTransfer */\n  tag_43\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8566:8615  _beforeTokenTransfer(address(0), account, amount) */\n  jump\t// in\ntag_42:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8642:8648  amount */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8626:8638  _totalSupply */\n  0x04\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8626:8648  _totalSupply += amount */\n  dup3\n  dup3\n  sload\n  tag_44\n  swap2\n  swap1\n  tag_45\n  jump\t// in\ntag_44:\n  swap1\n  swap2\n  sstore\n  pop\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8676  _balances[account] */\n  dup3\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8667  _balances */\n  0x02\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8676  _balances[account] */\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8686  _balances[account] += amount */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8680:8686  amount */\n  dup4\n  swap3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8676  _balances[account] */\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8686  _balances[account] += amount */\n  tag_46\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8680:8686  amount */\n  dup5\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8658:8686  _balances[account] += amount */\n  tag_45\n  jump\t// in\ntag_46:\n  swap1\n  swap2\n  sstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8701:8738  Transfer(address(0), account, amount) */\n  mload(0x40)\n    /* \"#utility.yul\":2339:2364   */\n  dup2\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8701:8738  Transfer(address(0), account, amount) */\n  dup4\n  and\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8718:8719  0 */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8701:8738  Transfer(address(0), account, amount) */\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  swap1\n    /* \"#utility.yul\":2327:2329   */\n  0x20\n    /* \"#utility.yul\":2312:2330   */\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8701:8738  Transfer(address(0), account, amount) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6257:6367  function _setupRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1978:2144  function _grantRole(bytes32 role, address account) internal virtual override {... */\ntag_36:\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2096  super._grantRole(role, account) */\n  tag_52\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2082:2086  role */\n  dup3\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2088:2095  account */\n  dup3\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2081  super._grantRole */\n  or(tag_0_183, shl(0x20, tag_53))\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2096  super._grantRole(role, account) */\n  0x20\n  shr\n  jump\t// in\ntag_52:\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2124  _roleMembers[role] */\n  0x00\n  dup3\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2118  _roleMembers */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2124  _roleMembers[role] */\n  0x20\n  swap1\n  dup2\n  mstore\n  0x40\n  swap1\n  swap2\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2137  _roleMembers[role].add(account) */\n  tag_54\n  swap2\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2129:2136  account */\n  dup4\n  swap1\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2128  _roleMembers[role].add */\n  tag_0_184\n  tag_55\n  dup3\n  shl\n  or\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2137  _roleMembers[role].add(account) */\n  swap1\n  shr\n  jump\t// in\ntag_54:\n  pop\n    /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1978:2144  function _grantRole(bytes32 role, address account) internal virtual override {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/HatTokenV2.sol\":1444:1919  function _beforeTokenTransfer(... */\ntag_43:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/HatTokenV2.sol\":1632:1651  _blockSenders[from] */\n  dup4\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"contracts/HatTokenV2.sol\":1632:1645  _blockSenders */\n  0x0a\n    /* \"contracts/HatTokenV2.sol\":1632:1651  _blockSenders[from] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"contracts/HatTokenV2.sol\":1631:1651  !_blockSenders[from] */\n  iszero\n    /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n  tag_57\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":2577:2579   */\n  0x20\n    /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2559:2580   */\n  mstore\n    /* \"#utility.yul\":2616:2618   */\n  0x2e\n    /* \"#utility.yul\":2596:2614   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":2589:2619   */\n  mstore\n    /* \"#utility.yul\":2655:2689   */\n  0x4865726f204177616b656e20546f6b656e3a207468652073656e646572206861\n    /* \"#utility.yul\":2635:2653   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":2628:2690   */\n  mstore\n  shl(0x92, 0x1cc81899595b88189b1bd8dad959)\n    /* \"#utility.yul\":2706:2724   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":2699:2743   */\n  mstore\n    /* \"#utility.yul\":2760:2779   */\n  0x84\n  add\n    /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n  tag_40\n    /* \"#utility.yul\":2375:2785   */\n  jump\n    /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\ntag_57:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/HatTokenV2.sol\":1759:1778  _blockReceivers[to] */\n  dup3\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"contracts/HatTokenV2.sol\":1759:1774  _blockReceivers */\n  0x0b\n    /* \"contracts/HatTokenV2.sol\":1759:1778  _blockReceivers[to] */\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"contracts/HatTokenV2.sol\":1758:1778  !_blockReceivers[to] */\n  iszero\n    /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n  tag_60\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":2992:2994   */\n  0x20\n    /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2974:2995   */\n  mstore\n    /* \"#utility.yul\":3031:3033   */\n  0x30\n    /* \"#utility.yul\":3011:3029   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":3004:3034   */\n  mstore\n    /* \"#utility.yul\":3070:3104   */\n  0x4865726f204177616b656e20546f6b656e3a2074686520726563656976657220\n    /* \"#utility.yul\":3050:3068   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":3043:3105   */\n  mstore\n  shl(0x82, 0x1a185cc81899595b88189b1bd8dad959)\n    /* \"#utility.yul\":3121:3139   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":3114:3160   */\n  mstore\n    /* \"#utility.yul\":3177:3196   */\n  0x84\n  add\n    /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n  tag_40\n    /* \"#utility.yul\":2790:3202   */\n  jump\n    /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\ntag_60:\n    /* \"contracts/HatTokenV2.sol\":1867:1911  super._beforeTokenTransfer(from, to, amount) */\n  tag_54\n    /* \"contracts/HatTokenV2.sol\":1894:1898  from */\n  dup4\n    /* \"contracts/HatTokenV2.sol\":1900:1902  to */\n  dup4\n    /* \"contracts/HatTokenV2.sol\":1904:1910  amount */\n  dup4\n    /* \"contracts/HatTokenV2.sol\":1867:1893  super._beforeTokenTransfer */\n  or(tag_0_185, shl(0x20, tag_64))\n    /* \"contracts/HatTokenV2.sol\":1867:1911  super._beforeTokenTransfer(from, to, amount) */\n  0x20\n  shr\n  jump\t// in\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6861:7094  function _grantRole(bytes32 role, address account) internal virtual {... */\ntag_53:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":2995:2999  bool */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3018:3030  _roles[role] */\n  dup3\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":3018:3047  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6939:7088  if (!hasRole(role, account)) {... */\n  tag_35\n  jumpi\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:6988  _roles */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:6994  _roles[role] */\n  dup3\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7011  _roles[role].members[account] */\n  dup6\n  and\n  dup5\n  mstore\n  swap1\n  swap2\n  mstore\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7018  _roles[role].members[account] = true */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7014:7018  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7018  _roles[role].members[account] = true */\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7064:7076  _msgSender() */\n  tag_70\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  swap1\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  jump\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7064:7076  _msgSender() */\ntag_70:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7055:7062  account */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n  and\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7049:7053  role */\n  dup4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n  0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6861:7094  function _grantRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7612:7762  function add(AddressSet storage set, address value) internal returns (bool) {... */\ntag_55:\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7682:7686  bool */\n  0x00\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7755  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  tag_72\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7710:7713  set */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7730:7753  uint256(uint160(value)) */\n  dup5\n  and\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7709  _add */\n  tag_73\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7755  _add(set._inner, bytes32(uint256(uint160(value)))) */\n  jump\t// in\ntag_72:\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7698:7755  return _add(set._inner, bytes32(uint256(uint160(value)))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7612:7762  function add(AddressSet storage set, address value) internal returns (bool) {... */\ntag_71:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":665:929  function _beforeTokenTransfer(... */\ntag_64:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":803:847  super._beforeTokenTransfer(from, to, amount) */\n  tag_75\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":830:834  from */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":836:838  to */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":840:846  amount */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":803:829  super._beforeTokenTransfer */\n  or(tag_0_217, shl(0x20, tag_54))\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":803:847  super._beforeTokenTransfer(from, to, amount) */\n  0x20\n  shr\n  jump\t// in\ntag_75:\n    /* \"@openzeppelin/contracts/security/Pausable.sol\":1168:1175  _paused */\n  and(0xff, sload(0x07))\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":866:875  !paused() */\n  iszero\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n  tag_54\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":3409:3411   */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3391:3412   */\n  mstore\n    /* \"#utility.yul\":3448:3450   */\n  0x2a\n    /* \"#utility.yul\":3428:3446   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":3421:3451   */\n  mstore\n    /* \"#utility.yul\":3487:3521   */\n  0x45524332305061757361626c653a20746f6b656e207472616e73666572207768\n    /* \"#utility.yul\":3467:3485   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":3460:3522   */\n  mstore\n  shl(0xb2, 0x1a5b19481c185d5cd959)\n    /* \"#utility.yul\":3538:3556   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":3531:3571   */\n  mstore\n    /* \"#utility.yul\":3588:3607   */\n  0x84\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n  tag_40\n    /* \"#utility.yul\":3207:3613   */\n  jump\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1697:2101  function _add(Set storage set, bytes32 value) private returns (bool) {... */\ntag_73:\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1760:1764  bool */\n  0x00\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3853  set._indexes[value] */\n  dup2\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3846  set._indexes */\n  0x01\n  dup4\n  add\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3853  set._indexes[value] */\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  sload\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1776:2095  if (!_contains(set, value)) {... */\n  tag_86\n  jumpi\n  pop\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1841  set._values.push(value) */\n  dup2\n  sload\n  0x01\n  dup2\n  dup2\n  add\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1829  set._values */\n  0x00\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1841  set._values.push(value) */\n  dup5\n  dup2\n  mstore\n  0x20\n  dup1\n  dup3\n  keccak256\n  swap1\n  swap4\n  add\n  dup5\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1998:2016  set._values.length */\n  dup5\n  sload\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1995  set._indexes[value] */\n  dup5\n  dup3\n  mstore\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1988  set._indexes */\n  dup3\n  dup7\n  add\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1995  set._indexes[value] */\n  swap1\n  swap4\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:2016  set._indexes[value] = set._values.length */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2030:2041  return true */\n  jump(tag_71)\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1776:2095  if (!_contains(set, value)) {... */\ntag_86:\n  pop\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2079:2084  false */\n  0x00\n    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2072:2084  return false */\n  jump(tag_71)\n    /* \"contracts/HatTokenV2.sol\":510:4040  contract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {... */\ntag_10:\n  dup3\n  dup1\n  sload\n  tag_92\n  swap1\n  tag_93\n  jump\t// in\ntag_92:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_95\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_98)\ntag_95:\n  dup3\n  0x1f\n  lt\n  tag_96\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_98)\ntag_96:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_98\n  jumpi\n  swap2\n  dup3\n  add\ntag_97:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_98\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_97)\ntag_98:\n  pop\n  tag_99\n  swap3\n  swap2\n  pop\n  tag_100\n  jump\t// in\ntag_99:\n  pop\n  swap1\n  jump\t// out\ntag_100:\ntag_101:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_99\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_101)\n    /* \"#utility.yul\":14:141   */\ntag_103:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_104:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_108\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_108:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_110\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_110\n  tag_103\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_112\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_112\n  tag_103\n  jump\t// in\ntag_112:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_113\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_113:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_114:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_116\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_114)\ntag_116:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_117\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_117:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_119\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_119:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_120\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_120:\n    /* \"#utility.yul\":1354:1415   */\n  tag_121\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_104\n  jump\t// in\ntag_121:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_122\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_122:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_123\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_104\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1963:2188   */\ntag_45:\n    /* \"#utility.yul\":2003:2006   */\n  0x00\n    /* \"#utility.yul\":2034:2035   */\n  dup3\n    /* \"#utility.yul\":2030:2036   */\n  not\n    /* \"#utility.yul\":2027:2028   */\n  dup3\n    /* \"#utility.yul\":2024:2037   */\n  gt\n    /* \"#utility.yul\":2021:2157   */\n  iszero\n  tag_126\n  jumpi\n    /* \"#utility.yul\":2079:2089   */\n  0x4e487b71\n    /* \"#utility.yul\":2074:2077   */\n  0xe0\n    /* \"#utility.yul\":2070:2090   */\n  shl\n    /* \"#utility.yul\":2067:2068   */\n  0x00\n    /* \"#utility.yul\":2060:2091   */\n  mstore\n    /* \"#utility.yul\":2114:2118   */\n  0x11\n    /* \"#utility.yul\":2111:2112   */\n  0x04\n    /* \"#utility.yul\":2104:2119   */\n  mstore\n    /* \"#utility.yul\":2142:2146   */\n  0x24\n    /* \"#utility.yul\":2139:2140   */\n  0x00\n    /* \"#utility.yul\":2132:2147   */\n  revert\n    /* \"#utility.yul\":2021:2157   */\ntag_126:\n  pop\n    /* \"#utility.yul\":2173:2182   */\n  add\n  swap1\n    /* \"#utility.yul\":1963:2188   */\n  jump\t// out\n    /* \"#utility.yul\":3618:3998   */\ntag_93:\n    /* \"#utility.yul\":3697:3698   */\n  0x01\n    /* \"#utility.yul\":3693:3705   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":3740:3752   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":3761:3822   */\n  tag_132\n  jumpi\n    /* \"#utility.yul\":3815:3819   */\n  0x7f\n    /* \"#utility.yul\":3807:3813   */\n  dup3\n    /* \"#utility.yul\":3803:3820   */\n  and\n    /* \"#utility.yul\":3793:3820   */\n  swap2\n  pop\n    /* \"#utility.yul\":3761:3822   */\ntag_132:\n    /* \"#utility.yul\":3868:3870   */\n  0x20\n    /* \"#utility.yul\":3860:3866   */\n  dup3\n    /* \"#utility.yul\":3857:3871   */\n  lt\n    /* \"#utility.yul\":3837:3855   */\n  dup2\n    /* \"#utility.yul\":3834:3872   */\n  sub\n    /* \"#utility.yul\":3831:3992   */\n  tag_133\n  jumpi\n    /* \"#utility.yul\":3914:3924   */\n  0x4e487b71\n    /* \"#utility.yul\":3909:3912   */\n  0xe0\n    /* \"#utility.yul\":3905:3925   */\n  shl\n    /* \"#utility.yul\":3902:3903   */\n  0x00\n    /* \"#utility.yul\":3895:3926   */\n  mstore\n    /* \"#utility.yul\":3949:3953   */\n  0x22\n    /* \"#utility.yul\":3946:3947   */\n  0x04\n    /* \"#utility.yul\":3939:3954   */\n  mstore\n    /* \"#utility.yul\":3977:3981   */\n  0x24\n    /* \"#utility.yul\":3974:3975   */\n  0x00\n    /* \"#utility.yul\":3967:3982   */\n  revert\n    /* \"#utility.yul\":3831:3992   */\ntag_133:\n  pop\n    /* \"#utility.yul\":3618:3998   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_105:\n    /* \"contracts/HatTokenV2.sol\":510:4040  contract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/HatTokenV2.sol\":510:4040  contract HatTokenV2 is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8bea9334\n      gt\n      tag_39\n      jumpi\n      dup1\n      0xa9059cbb\n      gt\n      tag_40\n      jumpi\n      dup1\n      0xdd62ed3e\n      gt\n      tag_41\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_34\n      jumpi\n      dup1\n      0xe5962195\n      eq\n      tag_35\n      jumpi\n      dup1\n      0xe63ab1e9\n      eq\n      tag_36\n      jumpi\n      dup1\n      0xeefb9be2\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      dup1\n      0xa9059cbb\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xca15c873\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xd5391393\n      eq\n      tag_32\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      dup1\n      0x95d89b41\n      gt\n      tag_42\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x98118cb4\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xa128471f\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_29\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      dup1\n      0x8bea9334\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x9010d07c\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      dup1\n      0x36568abe\n      gt\n      tag_43\n      jumpi\n      dup1\n      0x70a08231\n      gt\n      tag_44\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x7f257c3e\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x893d20e8\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup1\n      0x36568abe\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      dup1\n      0x23b872dd\n      gt\n      tag_45\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x357bf15c\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":634:846  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_3:\n      tag_46\n      tag_47\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_47:\n      tag_49\n      jump\t// in\n    tag_46:\n      mload(0x40)\n        /* \"#utility.yul\":470:484   */\n      swap1\n      iszero\n        /* \"#utility.yul\":463:485   */\n      iszero\n        /* \"#utility.yul\":445:486   */\n      dup2\n      mstore\n        /* \"#utility.yul\":433:435   */\n      0x20\n        /* \"#utility.yul\":418:436   */\n      add\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":634:846  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_52\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      tag_50\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_5:\n      tag_46\n      tag_57\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_6:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3331:3343  _totalSupply */\n      sload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_61:\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_50\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_7:\n      tag_46\n      tag_66\n      calldatasize\n      0x04\n      tag_67\n      jump\t// in\n    tag_66:\n      tag_68\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4008:4137  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_8:\n      tag_61\n      tag_71\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4082:4089  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4120  _roles[role] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4130  _roles[role].adminRole */\n      0x01\n      add\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4008:4137  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4387:4532  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_9:\n      tag_76\n      tag_77\n      calldatasize\n      0x04\n      tag_78\n      jump\t// in\n    tag_77:\n      tag_79\n      jump\t// in\n    tag_76:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n    tag_10:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3175:3177  18 */\n      0x12\n        /* \"#utility.yul\":2868:2904   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2856:2858   */\n      0x20\n        /* \"#utility.yul\":2841:2859   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n      tag_50\n        /* \"#utility.yul\":2726:2910   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":2656:2891  function setLiquidityFee(uint256 fee) public onlyOwner {... */\n    tag_11:\n      tag_76\n      tag_85\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5404:5618  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_12:\n      tag_76\n      tag_89\n      calldatasize\n      0x04\n      tag_78\n      jump\t// in\n    tag_89:\n      tag_90\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6109  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_13:\n      tag_46\n      tag_92\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_92:\n      tag_93\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n    tag_14:\n      tag_76\n      tag_96\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1098:1182  function paused() public view virtual returns (bool) {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1168:1175  _paused */\n      and(0xff, sload(0x07))\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1098:1182  function paused() public view virtual returns (bool) {... */\n      jump(tag_46)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_16:\n      tag_61\n      tag_102\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3482:3489  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3517  _balances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_17:\n      tag_76\n      tag_107\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":973:1134  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_18:\n      tag_76\n      tag_109\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":2183:2284  function liquidityKeeper() external view returns (address) {... */\n    tag_19:\n        /* \"contracts/HatTokenV2.sol\":2260:2276  _liquidityKeeper */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x09))\n        /* \"contracts/HatTokenV2.sol\":2183:2284  function liquidityKeeper() external view returns (address) {... */\n    tag_111:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3455:3487   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3437:3488   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3425:3427   */\n      0x20\n        /* \"#utility.yul\":3410:3428   */\n      add\n        /* \"contracts/HatTokenV2.sol\":2183:2284  function liquidityKeeper() external view returns (address) {... */\n      tag_50\n        /* \"#utility.yul\":3291:3494   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":1987:2072  function getOwner() external view returns (address) {... */\n    tag_20:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/HatTokenV2.sol\":1987:2072  function getOwner() external view returns (address) {... */\n      jump(tag_111)\n        /* \"contracts/HatTokenV2.sol\":2436:2648  function blockUser(... */\n    tag_21:\n      tag_76\n      tag_119\n      calldatasize\n      0x04\n      tag_120\n      jump\t// in\n    tag_119:\n      tag_121\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1431:1582  function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {... */\n    tag_23:\n      tag_111\n      tag_126\n      calldatasize\n      0x04\n      tag_127\n      jump\t// in\n    tag_126:\n      tag_128\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2909:3054  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_24:\n      tag_46\n      tag_131\n      calldatasize\n      0x04\n      tag_78\n      jump\t// in\n    tag_131:\n      tag_132\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_25:\n      tag_52\n      tag_135\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":2080:2175  function liquidityFee() external view returns (uint256) {... */\n    tag_26:\n        /* \"contracts/HatTokenV2.sol\":2154:2167  _liquidityFee */\n      sload(0x08)\n        /* \"contracts/HatTokenV2.sol\":2080:2175  function liquidityFee() external view returns (uint256) {... */\n      jump(tag_61)\n        /* \"contracts/HatTokenV2.sol\":2899:3004  function setLiquidityKeeper(address keeper) public onlyOwner {... */\n    tag_27:\n      tag_76\n      tag_141\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_141:\n      tag_142\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_28:\n      tag_61\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:7025  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_29:\n      tag_46\n      tag_147\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_147:\n      tag_148\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_30:\n      tag_46\n      tag_151\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_151:\n      tag_152\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1750:1890  function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {... */\n    tag_31:\n      tag_61\n      tag_155\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_155:\n      tag_156\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":647:709  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\") */\n    tag_32:\n      tag_61\n        /* \"contracts/HatTokenV2.sol\":685:709  keccak256(\"MINTER_ROLE\") */\n      0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\n        /* \"contracts/HatTokenV2.sol\":647:709  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\") */\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4766:4913  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_33:\n      tag_76\n      tag_162\n      calldatasize\n      0x04\n      tag_78\n      jump\t// in\n    tag_162:\n      tag_163\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_34:\n      tag_61\n      tag_165\n      calldatasize\n      0x04\n      tag_166\n      jump\t// in\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4065:4072  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/HatTokenV2.sol\":2292:2428  function blocked(address user) external view returns (bool, bool) {... */\n    tag_35:\n      tag_169\n      tag_170\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":2377:2396  _blockSenders[user] */\n      and\n        /* \"contracts/HatTokenV2.sol\":2346:2350  bool */\n      0x00\n        /* \"contracts/HatTokenV2.sol\":2377:2396  _blockSenders[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":2377:2390  _blockSenders */\n      0x0a\n        /* \"contracts/HatTokenV2.sol\":2377:2396  _blockSenders[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/HatTokenV2.sol\":2398:2413  _blockReceivers */\n      0x0b\n        /* \"contracts/HatTokenV2.sol\":2398:2419  _blockReceivers[user] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/HatTokenV2.sol\":2377:2396  _blockSenders[user] */\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n        /* \"contracts/HatTokenV2.sol\":2398:2419  _blockReceivers[user] */\n      swap2\n      and\n      swap1\n        /* \"contracts/HatTokenV2.sol\":2292:2428  function blocked(address user) external view returns (bool, bool) {... */\n      jump\n    tag_169:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4696:4710   */\n      swap3\n      iszero\n        /* \"#utility.yul\":4689:4711   */\n      iszero\n        /* \"#utility.yul\":4671:4712   */\n      dup4\n      mstore\n        /* \"#utility.yul\":4755:4769   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4748:4770   */\n      iszero\n        /* \"#utility.yul\":4743:4745   */\n      0x20\n        /* \"#utility.yul\":4728:4746   */\n      dup4\n      add\n        /* \"#utility.yul\":4721:4771   */\n      mstore\n        /* \"#utility.yul\":4644:4662   */\n      add\n        /* \"contracts/HatTokenV2.sol\":2292:2428  function blocked(address user) external view returns (bool, bool) {... */\n      tag_50\n        /* \"#utility.yul\":4509:4777   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":716:778  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\") */\n    tag_36:\n      tag_61\n        /* \"contracts/HatTokenV2.sol\":754:778  keccak256(\"PAUSER_ROLE\") */\n      0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n        /* \"contracts/HatTokenV2.sol\":716:778  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\") */\n      dup2\n      jump\n        /* \"contracts/HatTokenV2.sol\":3012:3116  function addLiquidityFree(address user) public onlyOwner {... */\n    tag_37:\n      tag_76\n      tag_178\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_178:\n      tag_179\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_38:\n      tag_76\n      tag_181\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_181:\n      tag_182\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":634:846  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_49:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":719:723  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":742:799  interfaceId == type(IAccessControlEnumerable).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5a05180f)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":742:839  interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId) */\n      tag_189\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":803:839  super.supportsInterface(interfaceId) */\n      tag_189\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":827:838  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":803:826  super.supportsInterface */\n      tag_190\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":803:839  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_189:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":735:839  return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId) */\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":634:846  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2210:2223  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2242:2247  _name */\n      0x05\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2235:2247  return _name */\n      dup1\n      sload\n      tag_192\n      swap1\n      tag_193\n      jump\t// in\n    tag_192:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_194\n      swap1\n      tag_193\n      jump\t// in\n    tag_194:\n      dup1\n      iszero\n      tag_195\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_196\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_195)\n    tag_196:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_197:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_197\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_195:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4516:4520  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      tag_201\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4586:4593  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4595:4601  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4578  _approve */\n      tag_202\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_201:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4619:4623  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5319:5323  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      tag_206\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5391:5395  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5406:5412  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5390  _spendAllowance */\n      tag_207\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_206:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      tag_208\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5433:5437  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5439:5441  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5443:5449  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5432  _transfer */\n      tag_209\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      jump\t// in\n    tag_208:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5467:5471  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4387:4532  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4082:4089  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4120  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4130  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2535  _checkRole(role, _msgSender()) */\n      tag_213\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_215\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2535  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_213:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4500:4525  _grantRole(role, account) */\n      tag_217\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4511:4515  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4517:4524  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4500:4510  _grantRole */\n      tag_218\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4500:4525  _grantRole(role, account) */\n      jump\t// in\n    tag_217:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4387:4532  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/HatTokenV2.sol\":2656:2891  function setLiquidityFee(uint256 fee) public onlyOwner {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_223\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_224:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_223:\n        /* \"contracts/HatTokenV2.sol\":2763:2767  1000 */\n      0x03e8\n        /* \"contracts/HatTokenV2.sol\":2756:2759  fee */\n      dup2\n        /* \"contracts/HatTokenV2.sol\":2756:2767  fee <= 1000 */\n      gt\n      iszero\n        /* \"contracts/HatTokenV2.sol\":2722:2851  require(... */\n      tag_228\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5730:5732   */\n      0x20\n        /* \"contracts/HatTokenV2.sol\":2722:2851  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5712:5733   */\n      mstore\n        /* \"#utility.yul\":5769:5771   */\n      0x38\n        /* \"#utility.yul\":5749:5767   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5742:5772   */\n      mstore\n        /* \"#utility.yul\":5808:5842   */\n      0x4865726f204177616b656e20546f6b656e3a206c697175696469747920666565\n        /* \"#utility.yul\":5788:5806   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5781:5843   */\n      mstore\n        /* \"#utility.yul\":5879:5905   */\n      0x206d757374206265747765656e203020616e6420313030300000000000000000\n        /* \"#utility.yul\":5859:5877   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5852:5906   */\n      mstore\n        /* \"#utility.yul\":5923:5942   */\n      0x84\n      add\n        /* \"contracts/HatTokenV2.sol\":2722:2851  require(... */\n      tag_224\n        /* \"#utility.yul\":5528:5948   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":2722:2851  require(... */\n    tag_228:\n        /* \"contracts/HatTokenV2.sol\":2864:2877  _liquidityFee */\n      0x08\n        /* \"contracts/HatTokenV2.sol\":2864:2883  _liquidityFee = fee */\n      sstore\n        /* \"contracts/HatTokenV2.sol\":2656:2891  function setLiquidityFee(uint256 fee) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5404:5618  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_90:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5499:5522  account == _msgSender() */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5499:5522  account == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5491:5574  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_233\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6155:6157   */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5491:5574  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6137:6158   */\n      mstore\n        /* \"#utility.yul\":6194:6196   */\n      0x2f\n        /* \"#utility.yul\":6174:6192   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6167:6197   */\n      mstore\n        /* \"#utility.yul\":6233:6267   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":6213:6231   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6206:6268   */\n      mstore\n      shl(0x89, 0x103937b632b9903337b91039b2b633)\n        /* \"#utility.yul\":6284:6302   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6277:6322   */\n      mstore\n        /* \"#utility.yul\":6339:6358   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5491:5574  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_224\n        /* \"#utility.yul\":5953:6364   */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5491:5574  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n    tag_233:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5585:5611  _revokeRole(role, account) */\n      tag_236\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5597:5601  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5603:5610  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5585:5596  _revokeRole */\n      tag_237\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5585:5611  _revokeRole(role, account) */\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5404:5618  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:6109  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_93:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5961:5965  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6058  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6051  _allowances */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6058  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6067  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5961:5965  bool */\n      swap1\n      swap2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6081  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      tag_201\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6067  _allowances[owner][spender] */\n      dup7\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6080  _allowances[owner][spender] + addedValue */\n      tag_241\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6070:6080  addedValue */\n      dup8\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6040:6080  _allowances[owner][spender] + addedValue */\n      tag_242\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6023  _approve */\n      tag_202\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6015:6081  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:660  _burn(_msgSender(), amount) */\n      tag_244\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":653:659  amount */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:638  _burn */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:660  _burn(_msgSender(), amount) */\n      jump\t// in\n    tag_244:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_107:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_252\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_255\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_256\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_255:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":973:1134  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_110:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1095  _spendAllowance(account, _msgSender(), amount) */\n      tag_258\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1065:1072  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1088:1094  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1064  _spendAllowance */\n      tag_207\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1095  _spendAllowance(account, _msgSender(), amount) */\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1127  _burn(account, amount) */\n      tag_236\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1111:1118  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1120:1126  amount */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1110  _burn */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1127  _burn(account, amount) */\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":2436:2648  function blockUser(... */\n    tag_121:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_267\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_267:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":2564:2583  _blockSenders[user] */\n      swap1\n      swap3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":2564:2577  _blockSenders */\n      0x0a\n        /* \"contracts/HatTokenV2.sol\":2564:2583  _blockSenders[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/HatTokenV2.sol\":2564:2594  _blockSenders[user] = can_send */\n      dup1\n      sload\n      swap5\n      iszero\n      iszero\n      not(0xff)\n      swap6\n      dup7\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/HatTokenV2.sol\":2605:2620  _blockReceivers */\n      0x0b\n        /* \"contracts/HatTokenV2.sol\":2605:2626  _blockReceivers[user] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/HatTokenV2.sol\":2605:2640  _blockReceivers[user] = can_receive */\n      dup1\n      sload\n      swap3\n      iszero\n      iszero\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/HatTokenV2.sol\":2436:2648  function blockUser(... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1431:1582  function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {... */\n    tag_128:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1521:1528  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1565  _roleMembers[role] */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1559  _roleMembers */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1565  _roleMembers[role] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1575  _roleMembers[role].at(index) */\n      tag_272\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1569:1574  index */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1568  _roleMembers[role].at */\n      tag_273\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1547:1575  _roleMembers[role].at(index) */\n      jump\t// in\n    tag_272:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1540:1575  return _roleMembers[role].at(index) */\n      swap4\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1431:1582  function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2909:3054  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2995:2999  bool */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3018:3030  _roles[role] */\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3018:3047  _roles[role].members[account] */\n      swap4\n      swap1\n      swap4\n      and\n      dup5\n      mstore\n      swap2\n      swap1\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2909:3054  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_135:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2423:2436  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2455:2462  _symbol */\n      0x06\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2448:2462  return _symbol */\n      dup1\n      sload\n      tag_192\n      swap1\n      tag_193\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":2899:3004  function setLiquidityKeeper(address keeper) public onlyOwner {... */\n    tag_142:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_285\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_285:\n        /* \"contracts/HatTokenV2.sol\":2971:2987  _liquidityKeeper */\n      0x09\n        /* \"contracts/HatTokenV2.sol\":2971:2996  _liquidityKeeper = keeper */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/HatTokenV2.sol\":2899:3004  function setLiquidityKeeper(address keeper) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:7025  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_148:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6689:6693  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6788  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6781  _allowances */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6788  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6770:6797  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6689:6693  bool */\n      swap1\n      swap2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6815:6850  currentAllowance >= subtractedValue */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_290\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6836:6838   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6818:6839   */\n      mstore\n        /* \"#utility.yul\":6875:6877   */\n      0x25\n        /* \"#utility.yul\":6855:6873   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6848:6878   */\n      mstore\n        /* \"#utility.yul\":6914:6948   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":6894:6912   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6887:6949   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":6965:6983   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6958:6993   */\n      mstore\n        /* \"#utility.yul\":7010:7029   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_224\n        /* \"#utility.yul\":6634:7035   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6807:6892  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_290:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6986  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_208\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6935:6940  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6942:6949  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6970:6985  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6951:6967  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6951:6985  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6934  _approve */\n      tag_202\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6926:6986  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_152:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3808:3812  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      tag_201\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3879:3881  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3883:3889  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3871  _transfer */\n      tag_209\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1750:1890  function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {... */\n    tag_156:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1830:1837  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1874  _roleMembers[role] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1868  _roleMembers */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1874  _roleMembers[role] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1883  _roleMembers[role].length() */\n      tag_189\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1881  _roleMembers[role].length */\n      tag_299\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1856:1883  _roleMembers[role].length() */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4766:4913  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_163:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4082:4089  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4120  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4108:4130  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2535  _checkRole(role, _msgSender()) */\n      tag_302\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_215\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2505:2535  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_302:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4880:4906  _revokeRole(role, account) */\n      tag_217\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4892:4896  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4898:4905  account */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4880:4891  _revokeRole */\n      tag_237\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4880:4906  _revokeRole(role, account) */\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":3012:3116  function addLiquidityFree(address user) public onlyOwner {... */\n    tag_179:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_311\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_311:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":3080:3101  _liquidityFrees[user] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":3080:3095  _liquidityFrees */\n      0x0c\n        /* \"contracts/HatTokenV2.sol\":3080:3101  _liquidityFrees[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/HatTokenV2.sol\":3080:3108  _liquidityFrees[user] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/HatTokenV2.sol\":3104:3108  true */\n      0x01\n        /* \"contracts/HatTokenV2.sol\":3080:3108  _liquidityFrees[user] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/HatTokenV2.sol\":3012:3116  function addLiquidityFree(address user) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x0100\n      swap1\n      swap2\n      div\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_317\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_224\n      swap1\n      tag_225\n      jump\t// in\n    tag_317:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_320\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7242:7244   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7224:7245   */\n      mstore\n        /* \"#utility.yul\":7281:7283   */\n      0x26\n        /* \"#utility.yul\":7261:7279   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7254:7284   */\n      mstore\n        /* \"#utility.yul\":7320:7354   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":7300:7318   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7293:7355   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":7371:7389   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7364:7400   */\n      mstore\n        /* \"#utility.yul\":7417:7436   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_224\n        /* \"#utility.yul\":7040:7442   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_320:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_244\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_256\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6861:7094  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_183:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6944:6966  hasRole(role, account) */\n      tag_325\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6952:6956  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6958:6965  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6944:6951  hasRole */\n      tag_132\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6944:6966  hasRole(role, account) */\n      jump\t// in\n    tag_325:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6939:7088  if (!hasRole(role, account)) {... */\n      tag_236\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:6988  _roles */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:6994  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7011  _roles[role].members[account] */\n      dup6\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7018  _roles[role].members[account] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7014:7018  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6982:7018  _roles[role].members[account] = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7064:7076  _msgSender() */\n      tag_327\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7064:7076  _msgSender() */\n    tag_327:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7055:7062  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7049:7053  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7037:7077  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6861:7094  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7612:7762  function add(AddressSet storage set, address value) internal returns (bool) {... */\n    tag_184:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7682:7686  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7755  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7710:7713  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7730:7753  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7709  _add */\n      tag_330\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7705:7755  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":665:929  function _beforeTokenTransfer(... */\n    tag_185:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1168:1175  _paused */\n      and(0xff, sload(0x07))\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":866:875  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n      tag_217\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7649:7651   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7631:7652   */\n      mstore\n        /* \"#utility.yul\":7688:7690   */\n      0x2a\n        /* \"#utility.yul\":7668:7686   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7661:7691   */\n      mstore\n        /* \"#utility.yul\":7727:7761   */\n      0x45524332305061757361626c653a20746f6b656e207472616e73666572207768\n        /* \"#utility.yul\":7707:7725   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7700:7762   */\n      mstore\n      shl(0xb2, 0x1a5b19481c185d5cd959)\n        /* \"#utility.yul\":7778:7796   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7771:7811   */\n      mstore\n        /* \"#utility.yul\":7828:7847   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":858:922  require(!paused(), \"ERC20Pausable: token transfer while paused\") */\n      tag_224\n        /* \"#utility.yul\":7447:7853   */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2620:2822  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_190:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2705:2709  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2728:2775  interfaceId == type(IAccessControl).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x7965db0b)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2728:2815  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      tag_189\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2779:2815  super.supportsInterface(interfaceId) */\n      tag_189\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10123:10493  function _approve(... */\n    tag_202:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10273  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_344\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8060:8062   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8042:8063   */\n      mstore\n        /* \"#utility.yul\":8099:8101   */\n      0x24\n        /* \"#utility.yul\":8079:8097   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8072:8102   */\n      mstore\n        /* \"#utility.yul\":8138:8172   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":8118:8136   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8111:8173   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":8189:8207   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8182:8216   */\n      mstore\n        /* \"#utility.yul\":8233:8252   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_224\n        /* \"#utility.yul\":7858:8258   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10246:10314  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_344:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10332:10353  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_347\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8465:8467   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8447:8468   */\n      mstore\n        /* \"#utility.yul\":8504:8506   */\n      0x22\n        /* \"#utility.yul\":8484:8502   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8477:8507   */\n      mstore\n        /* \"#utility.yul\":8543:8577   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":8523:8541   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8516:8578   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":8594:8612   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8587:8619   */\n      mstore\n        /* \"#utility.yul\":8636:8655   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_224\n        /* \"#utility.yul\":8263:8661   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10324:10392  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_347:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10421  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10414  _allowances */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10421  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10430  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10403:10439  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1731:1756   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10454:10486  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10123:10493  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n    tag_207:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10900:10924  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10966:11003  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10962:11205  if (currentAllowance != type(uint256).max) {... */\n      tag_357\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11047:11053  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11027:11043  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11027:11053  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_354\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8868:8870   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8850:8871   */\n      mstore\n        /* \"#utility.yul\":8907:8909   */\n      0x1d\n        /* \"#utility.yul\":8887:8905   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8880:8910   */\n      mstore\n        /* \"#utility.yul\":8946:8977   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":8926:8944   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8919:8978   */\n      mstore\n        /* \"#utility.yul\":8995:9013   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_224\n        /* \"#utility.yul\":8666:9019   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      tag_357\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11138:11143  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11145:11152  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11173:11179  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11154:11170  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11154:11179  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11137  _approve */\n      tag_202\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_357:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10890:11211  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/HatTokenV2.sol\":3595:4037  function _transfer(... */\n    tag_209:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":3723:3744  _liquidityFrees[from] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":3723:3738  _liquidityFrees */\n      0x0c\n        /* \"contracts/HatTokenV2.sol\":3723:3744  _liquidityFrees[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup1\n        /* \"contracts/HatTokenV2.sol\":3723:3767  _liquidityFrees[from] || _liquidityFrees[to] */\n      tag_359\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":3748:3767  _liquidityFrees[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":3748:3763  _liquidityFrees */\n      0x0c\n        /* \"contracts/HatTokenV2.sol\":3748:3767  _liquidityFrees[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/HatTokenV2.sol\":3723:3767  _liquidityFrees[from] || _liquidityFrees[to] */\n    tag_359:\n        /* \"contracts/HatTokenV2.sol\":3719:3839  if (_liquidityFrees[from] || _liquidityFrees[to]) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"contracts/HatTokenV2.sol\":3784:3817  super._transfer(from, to, amount) */\n      tag_361\n        /* \"contracts/HatTokenV2.sol\":3800:3804  from */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":3806:3808  to */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":3810:3816  amount */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":3784:3799  super._transfer */\n      tag_362\n        /* \"contracts/HatTokenV2.sol\":3784:3817  super._transfer(from, to, amount) */\n      jump\t// in\n    tag_361:\n        /* \"contracts/HatTokenV2.sol\":3855:3866  uint256 fee */\n      0x00\n        /* \"contracts/HatTokenV2.sol\":3869:3904  amount.mul(_liquidityFee).div(1000) */\n      tag_364\n        /* \"contracts/HatTokenV2.sol\":3899:3903  1000 */\n      0x03e8\n        /* \"contracts/HatTokenV2.sol\":3869:3894  amount.mul(_liquidityFee) */\n      tag_365\n        /* \"contracts/HatTokenV2.sol\":3880:3893  _liquidityFee */\n      sload(0x08)\n        /* \"contracts/HatTokenV2.sol\":3869:3875  amount */\n      dup6\n        /* \"contracts/HatTokenV2.sol\":3869:3879  amount.mul */\n      tag_366\n      swap1\n        /* \"contracts/HatTokenV2.sol\":3869:3894  amount.mul(_liquidityFee) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_365:\n        /* \"contracts/HatTokenV2.sol\":3869:3898  amount.mul(_liquidityFee).div */\n      swap1\n      tag_367\n        /* \"contracts/HatTokenV2.sol\":3869:3904  amount.mul(_liquidityFee).div(1000) */\n      jump\t// in\n    tag_364:\n        /* \"contracts/HatTokenV2.sol\":3855:3904  uint256 fee = amount.mul(_liquidityFee).div(1000) */\n      swap1\n      pop\n        /* \"contracts/HatTokenV2.sol\":3915:3928  amount -= fee */\n      tag_368\n        /* \"contracts/HatTokenV2.sol\":3855:3904  uint256 fee = amount.mul(_liquidityFee).div(1000) */\n      dup2\n        /* \"contracts/HatTokenV2.sol\":3915:3928  amount -= fee */\n      dup4\n      tag_369\n      jump\t// in\n    tag_368:\n      swap2\n      pop\n        /* \"contracts/HatTokenV2.sol\":3941:3974  super._transfer(from, to, amount) */\n      tag_370\n        /* \"contracts/HatTokenV2.sol\":3957:3961  from */\n      dup5\n        /* \"contracts/HatTokenV2.sol\":3963:3965  to */\n      dup5\n        /* \"contracts/HatTokenV2.sol\":3967:3973  amount */\n      dup5\n        /* \"contracts/HatTokenV2.sol\":3941:3956  super._transfer */\n      tag_362\n        /* \"contracts/HatTokenV2.sol\":3941:3974  super._transfer(from, to, amount) */\n      jump\t// in\n    tag_370:\n        /* \"contracts/HatTokenV2.sol\":4007:4023  _liquidityKeeper */\n      sload(0x09)\n        /* \"contracts/HatTokenV2.sol\":3985:4029  super._transfer(from, _liquidityKeeper, fee) */\n      tag_357\n      swap1\n        /* \"contracts/HatTokenV2.sol\":4001:4005  from */\n      dup6\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":4007:4023  _liquidityKeeper */\n      and\n        /* \"contracts/HatTokenV2.sol\":4025:4028  fee */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":3985:4000  super._transfer */\n      tag_362\n        /* \"contracts/HatTokenV2.sol\":3985:4029  super._transfer(from, _liquidityKeeper, fee) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3335:3827  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_215:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3423:3445  hasRole(role, account) */\n      tag_373\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3431:3435  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3437:3444  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3423:3430  hasRole */\n      tag_132\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3423:3445  hasRole(role, account) */\n      jump\t// in\n    tag_373:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3418:3821  if (!hasRole(role, account)) {... */\n      tag_236\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3606:3647  Strings.toHexString(uint160(account), 20) */\n      tag_375\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3634:3641  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3606:3647  Strings.toHexString(uint160(account), 20) */\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3644:3646  20 */\n      0x14\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3606:3625  Strings.toHexString */\n      tag_376\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3606:3647  Strings.toHexString(uint160(account), 20) */\n      jump\t// in\n    tag_375:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:3756  Strings.toHexString(uint256(role), 32) */\n      tag_377\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3746:3750  role */\n      dup4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3753:3755  32 */\n      0x20\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:3737  Strings.toHexString */\n      tag_376\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3718:3756  Strings.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_377:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3513:3778  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_378\n      swap3\n      swap2\n      swap1\n      tag_379\n      jump\t// in\n    tag_378:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3461:3810  revert(... */\n      dup3\n      mstore\n      tag_224\n      swap2\n      0x04\n      add\n      tag_55\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":1978:2144  function _grantRole(bytes32 role, address account) internal virtual override {... */\n    tag_218:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2096  super._grantRole(role, account) */\n      tag_382\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2082:2086  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2088:2095  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2081  super._grantRole */\n      tag_183\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2065:2096  super._grantRole(role, account) */\n      jump\t// in\n    tag_382:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2124  _roleMembers[role] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2118  _roleMembers */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2124  _roleMembers[role] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2137  _roleMembers[role].add(account) */\n      tag_217\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2129:2136  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2128  _roleMembers[role].add */\n      tag_184\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2106:2137  _roleMembers[role].add(account) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2233:2404  function _revokeRole(bytes32 role, address account) internal virtual override {... */\n    tag_237:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2321:2353  super._revokeRole(role, account) */\n      tag_385\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2339:2343  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2345:2352  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2321:2338  super._revokeRole */\n      tag_386\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2321:2353  super._revokeRole(role, account) */\n      jump\t// in\n    tag_385:\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2381  _roleMembers[role] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2375  _roleMembers */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2381  _roleMembers[role] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2397  _roleMembers[role].remove(account) */\n      tag_217\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2389:2396  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2388  _roleMembers[role].remove */\n      tag_388\n        /* \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":2363:2397  _roleMembers[role].remove(account) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9124:9700  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_246:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9207:9228  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9199:9266  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_390\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10147:10149   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9199:9266  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10129:10150   */\n      mstore\n        /* \"#utility.yul\":10186:10188   */\n      0x21\n        /* \"#utility.yul\":10166:10184   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10159:10189   */\n      mstore\n        /* \"#utility.yul\":10225:10259   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":10205:10223   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10198:10260   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":10276:10294   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10269:10300   */\n      mstore\n        /* \"#utility.yul\":10317:10336   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9199:9266  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_224\n        /* \"#utility.yul\":9945:10342   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9199:9266  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_390:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9277:9326  _beforeTokenTransfer(account, address(0), amount) */\n      tag_393\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9298:9305  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9315:9316  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9319:9325  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9277:9297  _beforeTokenTransfer */\n      tag_394\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9277:9326  _beforeTokenTransfer(account, address(0), amount) */\n      jump\t// in\n    tag_393:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9362:9380  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9337:9359  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9362:9380  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9362:9371  _balances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9362:9380  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9398:9422  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9390:9461  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_395\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10549:10551   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9390:9461  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10531:10552   */\n      mstore\n        /* \"#utility.yul\":10588:10590   */\n      0x22\n        /* \"#utility.yul\":10568:10586   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10561:10591   */\n      mstore\n        /* \"#utility.yul\":10627:10661   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":10607:10625   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10600:10662   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":10678:10696   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10671:10703   */\n      mstore\n        /* \"#utility.yul\":10720:10739   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9390:9461  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_224\n        /* \"#utility.yul\":10347:10745   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9390:9461  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_395:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9495:9513  _balances[account] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9495:9504  _balances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9495:9513  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9516:9539  accountBalance - amount */\n      dup4\n      dup4\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9495:9539  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9559:9571  _totalSupply */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9559:9581  _totalSupply -= amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9533:9539  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9495:9513  _balances[account] */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9559:9581  _totalSupply -= amount */\n      tag_398\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9533:9539  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9559:9581  _totalSupply -= amount */\n      tag_369\n      jump\t// in\n    tag_398:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9597:9634  Transfer(account, address(0), amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9623:9624  0 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9597:9634  Transfer(account, address(0), amount) */\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9597:9634  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4387:4532  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x07\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x0100\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup2\n      dup2\n      mul\n      not(sub(shl(0xa8, 0x01), 0x0100))\n      dup6\n      and\n      or\n      swap1\n      swap5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap4\n      swap1\n      swap3\n      div\n      and\n      swap2\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8870:9026  function at(AddressSet storage set, uint256 index) internal view returns (address) {... */\n    tag_273:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8944:8951  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8994:9016  _at(set._inner, index) */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8998:9001  set */\n      dup4\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":9010:9015  index */\n      dup4\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8994:8997  _at */\n      tag_405\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8994:9016  _at(set._inner, index) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8413:8528  function length(AddressSet storage set) internal view returns (uint256) {... */\n    tag_299:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8476:8483  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8502:8521  _length(set._inner) */\n      tag_189\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8510:8513  set */\n      dup3\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4028:4046  set._values.length */\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3946:4053  function _length(Set storage set) private view returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1697:2101  function _add(Set storage set, bytes32 value) private returns (bool) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1760:1764  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3853  set._indexes[value] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3846  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3834:3853  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1776:2095  if (!_contains(set, value)) {... */\n      tag_412\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1841  set._values.push(value) */\n      dup2\n      sload\n      0x01\n      dup2\n      dup2\n      add\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1829  set._values */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1818:1841  set._values.push(value) */\n      dup5\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      swap1\n      swap4\n      add\n      dup5\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1998:2016  set._values.length */\n      dup5\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1995  set._indexes[value] */\n      dup5\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1988  set._indexes */\n      dup3\n      dup7\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:1995  set._indexes[value] */\n      swap1\n      swap4\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1976:2016  set._indexes[value] = set._values.length */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2030:2041  return true */\n      jump(tag_189)\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1776:2095  if (!_contains(set, value)) {... */\n    tag_412:\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2079:2084  false */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2072:2084  return false */\n      jump(tag_189)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7488:8139  function _transfer(... */\n    tag_362:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7614:7632  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_417\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10952:10954   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10934:10955   */\n      mstore\n        /* \"#utility.yul\":10991:10993   */\n      0x25\n        /* \"#utility.yul\":10971:10989   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10964:10994   */\n      mstore\n        /* \"#utility.yul\":11030:11064   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":11010:11028   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11003:11065   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":11081:11099   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11074:11109   */\n      mstore\n        /* \"#utility.yul\":11126:11145   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_224\n        /* \"#utility.yul\":10750:11151   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7606:7674  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_417:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7692:7708  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_420\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11358:11360   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11340:11361   */\n      mstore\n        /* \"#utility.yul\":11397:11399   */\n      0x23\n        /* \"#utility.yul\":11377:11395   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11370:11400   */\n      mstore\n        /* \"#utility.yul\":11436:11470   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11416:11434   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11409:11471   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":11487:11505   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11480:11513   */\n      mstore\n        /* \"#utility.yul\":11530:11549   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_224\n        /* \"#utility.yul\":11156:11555   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7684:7748  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_420:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7759:7797  _beforeTokenTransfer(from, to, amount) */\n      tag_423\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7780:7784  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7786:7788  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7790:7796  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7759:7779  _beforeTokenTransfer */\n      tag_394\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7759:7797  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_423:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7845  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7808:7827  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7845  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7839  _balances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7830:7845  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7863:7884  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_424\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11762:11764   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11744:11765   */\n      mstore\n        /* \"#utility.yul\":11801:11803   */\n      0x26\n        /* \"#utility.yul\":11781:11799   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11774:11804   */\n      mstore\n        /* \"#utility.yul\":11840:11874   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":11820:11838   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11813:11875   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":11891:11909   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11884:11920   */\n      mstore\n        /* \"#utility.yul\":11937:11956   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_224\n        /* \"#utility.yul\":11560:11962   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:7927  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_424:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7976  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7970  _balances */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7976  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7979:7999  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7999  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8032  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7993:7999  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7961:7976  _balances[from] */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      tag_427\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7993:7999  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8019:8042  _balances[to] += amount */\n      tag_242\n      jump\t// in\n    tag_427:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8073:8075  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8067:8071  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8077:8083  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_428\n      swap2\n        /* \"#utility.yul\":1731:1756   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n      swap1\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8058:8084  Transfer(from, to, amount) */\n    tag_428:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8095:8132  _afterTokenTransfer(from, to, amount) */\n      tag_357\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4387:4532  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3451:3547  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_366:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3509:3516  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3539:3540  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3536  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3535:3540  a * b */\n      tag_432\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3836:3932  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_367:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3894:3901  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3924:3925  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3921  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3920:3925  a / b */\n      tag_435\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_376:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1663:1676  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1707  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_437\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1724:1730  length */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1721  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1730  2 * length */\n      tag_432\n      jump\t// in\n    tag_437:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_438\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1733:1734  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_242\n      jump\t// in\n    tag_438:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_440\n      jumpi\n      tag_440\n      tag_441\n      jump\t// in\n    tag_440:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_442\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_442:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n      shl(0xfc, 0x03)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1751  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1752:1753  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1754  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_444\n      jumpi\n      tag_444\n      tag_445\n      jump\t// in\n    tag_444:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n      shl(0xfb, 0x0f)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1776  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1777:1778  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1779  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_447\n      jumpi\n      tag_447\n      tag_445\n      jump\t// in\n    tag_447:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1809  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_451\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1816:1822  length */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1813  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1822  2 * length */\n      tag_432\n      jump\t// in\n    tag_451:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_452\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1825:1826  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_242\n      jump\t// in\n    tag_452:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_448:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1832:1833  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1829  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1828:1833  i > 1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_449\n      jumpi\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1884  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1887:1890  0xf */\n      0x0f\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1879:1890  value & 0xf */\n      and\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_454\n      jumpi\n      tag_454\n      tag_445\n      jump\t// in\n    tag_454:\n      byte\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1860  buffer */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1861:1862  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1863  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_456\n      jumpi\n      tag_456\n      tag_445\n      jump\t// in\n    tag_456:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1915:1916  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1905:1916  value >>= 4 */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1835:1838  --i */\n      tag_457\n      dup2\n      tag_458\n      jump\t// in\n    tag_457:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_448)\n    tag_449:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1944:1954  value == 0 */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_272\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12969:12971   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12951:12972   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":12988:13006   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12981:13011   */\n      mstore\n        /* \"#utility.yul\":13047:13081   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":13027:13045   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13020:13082   */\n      mstore\n        /* \"#utility.yul\":13099:13117   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_224\n        /* \"#utility.yul\":12767:13123   */\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7219:7453  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_386:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7302:7324  hasRole(role, account) */\n      tag_463\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7310:7314  role */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7316:7323  account */\n      dup3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7302:7309  hasRole */\n      tag_132\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7302:7324  hasRole(role, account) */\n      jump\t// in\n    tag_463:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7298:7447  if (hasRole(role, account)) {... */\n      iszero\n      tag_236\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7372:7377  false */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7340:7352  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7340:7369  _roles[role].members[account] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7340:7377  _roles[role].members[account] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7396:7436  RoleRevoked(role, account, _msgSender()) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7340:7352  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7396:7436  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap2\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7372:7377  false */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7396:7436  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":7219:7453  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":7930:8086  function remove(AddressSet storage set, address value) internal returns (bool) {... */\n    tag_388:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8003:8007  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8026:8079  _remove(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8034:8037  set */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8054:8077  uint256(uint160(value)) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8026:8033  _remove */\n      tag_468\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8026:8079  _remove(set._inner, bytes32(uint256(uint160(value)))) */\n      jump\t// in\n        /* \"contracts/HatTokenV2.sol\":1444:1919  function _beforeTokenTransfer(... */\n    tag_394:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":1632:1651  _blockSenders[from] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":1632:1645  _blockSenders */\n      0x0a\n        /* \"contracts/HatTokenV2.sol\":1632:1651  _blockSenders[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/HatTokenV2.sol\":1631:1651  !_blockSenders[from] */\n      iszero\n        /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n      tag_470\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13330:13332   */\n      0x20\n        /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13312:13333   */\n      mstore\n        /* \"#utility.yul\":13369:13371   */\n      0x2e\n        /* \"#utility.yul\":13349:13367   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13342:13372   */\n      mstore\n        /* \"#utility.yul\":13408:13442   */\n      0x4865726f204177616b656e20546f6b656e3a207468652073656e646572206861\n        /* \"#utility.yul\":13388:13406   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13381:13443   */\n      mstore\n      shl(0x92, 0x1cc81899595b88189b1bd8dad959)\n        /* \"#utility.yul\":13459:13477   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13452:13496   */\n      mstore\n        /* \"#utility.yul\":13513:13532   */\n      0x84\n      add\n        /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n      tag_224\n        /* \"#utility.yul\":13128:13538   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":1609:1725  require(... */\n    tag_470:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/HatTokenV2.sol\":1759:1778  _blockReceivers[to] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/HatTokenV2.sol\":1759:1774  _blockReceivers */\n      0x0b\n        /* \"contracts/HatTokenV2.sol\":1759:1778  _blockReceivers[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/HatTokenV2.sol\":1758:1778  !_blockReceivers[to] */\n      iszero\n        /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n      tag_473\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13745:13747   */\n      0x20\n        /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13727:13748   */\n      mstore\n        /* \"#utility.yul\":13784:13786   */\n      0x30\n        /* \"#utility.yul\":13764:13782   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13757:13787   */\n      mstore\n        /* \"#utility.yul\":13823:13857   */\n      0x4865726f204177616b656e20546f6b656e3a2074686520726563656976657220\n        /* \"#utility.yul\":13803:13821   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13796:13858   */\n      mstore\n      shl(0x82, 0x1a185cc81899595b88189b1bd8dad959)\n        /* \"#utility.yul\":13874:13892   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13867:13913   */\n      mstore\n        /* \"#utility.yul\":13930:13949   */\n      0x84\n      add\n        /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n      tag_224\n        /* \"#utility.yul\":13543:13955   */\n      jump\n        /* \"contracts/HatTokenV2.sol\":1736:1854  require(... */\n    tag_473:\n        /* \"contracts/HatTokenV2.sol\":1867:1911  super._beforeTokenTransfer(from, to, amount) */\n      tag_217\n        /* \"contracts/HatTokenV2.sol\":1894:1898  from */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":1900:1902  to */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":1904:1910  amount */\n      dup4\n        /* \"contracts/HatTokenV2.sol\":1867:1893  super._beforeTokenTransfer */\n      tag_185\n        /* \"contracts/HatTokenV2.sol\":1867:1911  super._beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4395:4513  function _at(Set storage set, uint256 index) private view returns (bytes32) {... */\n    tag_405:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4462:4469  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4488:4491  set */\n      dup3\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4488:4499  set._values */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4500:4505  index */\n      dup3\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4488:4506  set._values[index] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_480\n      jumpi\n      tag_480\n      tag_445\n      jump\t// in\n    tag_480:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4481:4506  return set._values[index] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4395:4513  function _at(Set storage set, uint256 index) private view returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2269:3657  function _remove(Set storage set, bytes32 value) private returns (bool) {... */\n    tag_468:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2335:2339  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2472:2491  set._indexes[value] */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2472:2484  set._indexes */\n      0x01\n      dup4\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2472:2491  set._indexes[value] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2506:2521  valueIndex != 0 */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2502:3651  if (valueIndex != 0) {... */\n      tag_485\n      jumpi\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2875:2896  uint256 toDeleteIndex */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2899:2913  valueIndex - 1 */\n      tag_486\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2912:2913  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2899:2909  valueIndex */\n      dup4\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2899:2913  valueIndex - 1 */\n      tag_369\n      jump\t// in\n    tag_486:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2947:2965  set._values.length */\n      dup6\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2875:2913  uint256 toDeleteIndex = valueIndex - 1 */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2927:2944  uint256 lastIndex */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2947:2969  set._values.length - 1 */\n      tag_487\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2968:2969  1 */\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2947:2969  set._values.length - 1 */\n      tag_369\n      jump\t// in\n    tag_487:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2927:2969  uint256 lastIndex = set._values.length - 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3001:3014  toDeleteIndex */\n      dup2\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2988:2997  lastIndex */\n      dup2\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2988:3014  lastIndex != toDeleteIndex */\n      eq\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2984:3382  if (lastIndex != toDeleteIndex) {... */\n      tag_488\n      jumpi\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3034:3051  bytes32 lastvalue */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3054:3057  set */\n      dup7\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3054:3065  set._values */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3066:3075  lastIndex */\n      dup3\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3054:3076  set._values[lastIndex] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_490\n      jumpi\n      tag_490\n      tag_445\n      jump\t// in\n    tag_490:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3034:3076  bytes32 lastvalue = set._values[lastIndex] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3205:3214  lastvalue */\n      dup1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3176:3179  set */\n      dup8\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3176:3187  set._values */\n      0x00\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3188:3201  toDeleteIndex */\n      dup5\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3176:3202  set._values[toDeleteIndex] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_493\n      jumpi\n      tag_493\n      tag_445\n      jump\t// in\n    tag_493:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3176:3214  set._values[toDeleteIndex] = lastvalue */\n      swap3\n      swap1\n      swap3\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3288:3311  set._indexes[lastvalue] */\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3288:3300  set._indexes */\n      0x01\n      dup9\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3288:3311  set._indexes[lastvalue] */\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3288:3324  set._indexes[lastvalue] = valueIndex */\n      dup4\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2984:3382  if (lastIndex != toDeleteIndex) {... */\n    tag_488:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3460:3477  set._values.pop() */\n      dup6\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3460:3463  set */\n      dup7\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3460:3477  set._values.pop() */\n      dup1\n      tag_496\n      jumpi\n      tag_496\n      tag_497\n      jump\t// in\n    tag_496:\n      0x01\n      swap1\n      sub\n      dup2\n      dup2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sstore\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3552:3555  set */\n      dup6\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3552:3564  set._indexes */\n      0x01\n      add\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3552:3571  set._indexes[value] */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3565:3570  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3552:3571  set._indexes[value] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3545:3571  delete set._indexes[value] */\n      0x00\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3593:3597  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3586:3597  return true */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump(tag_189)\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2502:3651  if (valueIndex != 0) {... */\n    tag_485:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3635:3640  false */\n      0x00\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":3628:3640  return false */\n      swap2\n      pop\n      pop\n      jump(tag_189)\n        /* \"#utility.yul\":14:300   */\n    tag_48:\n        /* \"#utility.yul\":72:78   */\n      0x00\n        /* \"#utility.yul\":125:127   */\n      0x20\n        /* \"#utility.yul\":113:122   */\n      dup3\n        /* \"#utility.yul\":104:111   */\n      dup5\n        /* \"#utility.yul\":100:123   */\n      sub\n        /* \"#utility.yul\":96:128   */\n      slt\n        /* \"#utility.yul\":93:145   */\n      iszero\n      tag_506\n      jumpi\n        /* \"#utility.yul\":141:142   */\n      0x00\n        /* \"#utility.yul\":138:139   */\n      dup1\n        /* \"#utility.yul\":131:143   */\n      revert\n        /* \"#utility.yul\":93:145   */\n    tag_506:\n        /* \"#utility.yul\":167:190   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":219:251   */\n      dup2\n      and\n        /* \"#utility.yul\":209:252   */\n      dup2\n      eq\n        /* \"#utility.yul\":199:270   */\n      tag_272\n      jumpi\n        /* \"#utility.yul\":266:267   */\n      0x00\n        /* \"#utility.yul\":263:264   */\n      dup1\n        /* \"#utility.yul\":256:268   */\n      revert\n        /* \"#utility.yul\":497:755   */\n    tag_500:\n        /* \"#utility.yul\":569:570   */\n      0x00\n        /* \"#utility.yul\":579:692   */\n    tag_510:\n        /* \"#utility.yul\":593:599   */\n      dup4\n        /* \"#utility.yul\":590:591   */\n      dup2\n        /* \"#utility.yul\":587:600   */\n      lt\n        /* \"#utility.yul\":579:692   */\n      iszero\n      tag_512\n      jumpi\n        /* \"#utility.yul\":669:680   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":663:681   */\n      mload\n        /* \"#utility.yul\":650:661   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":643:682   */\n      mstore\n        /* \"#utility.yul\":615:617   */\n      0x20\n        /* \"#utility.yul\":608:618   */\n      add\n        /* \"#utility.yul\":579:692   */\n      jump(tag_510)\n    tag_512:\n        /* \"#utility.yul\":710:716   */\n      dup4\n        /* \"#utility.yul\":707:708   */\n      dup2\n        /* \"#utility.yul\":704:717   */\n      gt\n        /* \"#utility.yul\":701:749   */\n      iszero\n      tag_357\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":745:746   */\n      0x00\n        /* \"#utility.yul\":727:743   */\n      swap2\n      add\n        /* \"#utility.yul\":720:747   */\n      mstore\n        /* \"#utility.yul\":497:755   */\n      jump\t// out\n        /* \"#utility.yul\":760:1143   */\n    tag_55:\n        /* \"#utility.yul\":909:911   */\n      0x20\n        /* \"#utility.yul\":898:907   */\n      dup2\n        /* \"#utility.yul\":891:912   */\n      mstore\n        /* \"#utility.yul\":872:876   */\n      0x00\n        /* \"#utility.yul\":941:947   */\n      dup3\n        /* \"#utility.yul\":935:948   */\n      mload\n        /* \"#utility.yul\":984:990   */\n      dup1\n        /* \"#utility.yul\":979:981   */\n      0x20\n        /* \"#utility.yul\":968:977   */\n      dup5\n        /* \"#utility.yul\":964:982   */\n      add\n        /* \"#utility.yul\":957:991   */\n      mstore\n        /* \"#utility.yul\":1000:1066   */\n      tag_515\n        /* \"#utility.yul\":1059:1065   */\n      dup2\n        /* \"#utility.yul\":1054:1056   */\n      0x40\n        /* \"#utility.yul\":1043:1052   */\n      dup6\n        /* \"#utility.yul\":1039:1057   */\n      add\n        /* \"#utility.yul\":1034:1036   */\n      0x20\n        /* \"#utility.yul\":1026:1032   */\n      dup8\n        /* \"#utility.yul\":1022:1037   */\n      add\n        /* \"#utility.yul\":1000:1066   */\n      tag_500\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":1127:1129   */\n      0x1f\n        /* \"#utility.yul\":1106:1121   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1102:1131   */\n      and\n        /* \"#utility.yul\":1087:1132   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1134:1136   */\n      0x40\n        /* \"#utility.yul\":1083:1137   */\n      add\n      swap3\n        /* \"#utility.yul\":760:1143   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1148:1321   */\n    tag_501:\n        /* \"#utility.yul\":1216:1236   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1265:1296   */\n      dup2\n      and\n        /* \"#utility.yul\":1255:1297   */\n      dup2\n      eq\n        /* \"#utility.yul\":1245:1315   */\n      tag_517\n      jumpi\n        /* \"#utility.yul\":1311:1312   */\n      0x00\n        /* \"#utility.yul\":1308:1309   */\n      dup1\n        /* \"#utility.yul\":1301:1313   */\n      revert\n        /* \"#utility.yul\":1245:1315   */\n    tag_517:\n        /* \"#utility.yul\":1148:1321   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1326:1580   */\n    tag_58:\n        /* \"#utility.yul\":1394:1400   */\n      0x00\n        /* \"#utility.yul\":1402:1408   */\n      dup1\n        /* \"#utility.yul\":1455:1457   */\n      0x40\n        /* \"#utility.yul\":1443:1452   */\n      dup4\n        /* \"#utility.yul\":1434:1441   */\n      dup6\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_519\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_519:\n        /* \"#utility.yul\":1494:1523   */\n      tag_520\n        /* \"#utility.yul\":1513:1522   */\n      dup4\n        /* \"#utility.yul\":1494:1523   */\n      tag_501\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":1484:1523   */\n      swap5\n        /* \"#utility.yul\":1570:1572   */\n      0x20\n        /* \"#utility.yul\":1555:1573   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1542:1574   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1326:1580   */\n      jump\t// out\n        /* \"#utility.yul\":1767:2095   */\n    tag_67:\n        /* \"#utility.yul\":1844:1850   */\n      0x00\n        /* \"#utility.yul\":1852:1858   */\n      dup1\n        /* \"#utility.yul\":1860:1866   */\n      0x00\n        /* \"#utility.yul\":1913:1915   */\n      0x60\n        /* \"#utility.yul\":1901:1910   */\n      dup5\n        /* \"#utility.yul\":1892:1899   */\n      dup7\n        /* \"#utility.yul\":1888:1911   */\n      sub\n        /* \"#utility.yul\":1884:1916   */\n      slt\n        /* \"#utility.yul\":1881:1933   */\n      iszero\n      tag_523\n      jumpi\n        /* \"#utility.yul\":1929:1930   */\n      0x00\n        /* \"#utility.yul\":1926:1927   */\n      dup1\n        /* \"#utility.yul\":1919:1931   */\n      revert\n        /* \"#utility.yul\":1881:1933   */\n    tag_523:\n        /* \"#utility.yul\":1952:1981   */\n      tag_524\n        /* \"#utility.yul\":1971:1980   */\n      dup5\n        /* \"#utility.yul\":1952:1981   */\n      tag_501\n      jump\t// in\n    tag_524:\n        /* \"#utility.yul\":1942:1981   */\n      swap3\n      pop\n        /* \"#utility.yul\":2000:2038   */\n      tag_525\n        /* \"#utility.yul\":2034:2036   */\n      0x20\n        /* \"#utility.yul\":2023:2032   */\n      dup6\n        /* \"#utility.yul\":2019:2037   */\n      add\n        /* \"#utility.yul\":2000:2038   */\n      tag_501\n      jump\t// in\n    tag_525:\n        /* \"#utility.yul\":1990:2038   */\n      swap2\n      pop\n        /* \"#utility.yul\":2085:2087   */\n      0x40\n        /* \"#utility.yul\":2074:2083   */\n      dup5\n        /* \"#utility.yul\":2070:2088   */\n      add\n        /* \"#utility.yul\":2057:2089   */\n      calldataload\n        /* \"#utility.yul\":2047:2089   */\n      swap1\n      pop\n        /* \"#utility.yul\":1767:2095   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2100:2280   */\n    tag_72:\n        /* \"#utility.yul\":2159:2165   */\n      0x00\n        /* \"#utility.yul\":2212:2214   */\n      0x20\n        /* \"#utility.yul\":2200:2209   */\n      dup3\n        /* \"#utility.yul\":2191:2198   */\n      dup5\n        /* \"#utility.yul\":2187:2210   */\n      sub\n        /* \"#utility.yul\":2183:2215   */\n      slt\n        /* \"#utility.yul\":2180:2232   */\n      iszero\n      tag_527\n      jumpi\n        /* \"#utility.yul\":2228:2229   */\n      0x00\n        /* \"#utility.yul\":2225:2226   */\n      dup1\n        /* \"#utility.yul\":2218:2230   */\n      revert\n        /* \"#utility.yul\":2180:2232   */\n    tag_527:\n      pop\n        /* \"#utility.yul\":2251:2274   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2100:2280   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2467:2721   */\n    tag_78:\n        /* \"#utility.yul\":2535:2541   */\n      0x00\n        /* \"#utility.yul\":2543:2549   */\n      dup1\n        /* \"#utility.yul\":2596:2598   */\n      0x40\n        /* \"#utility.yul\":2584:2593   */\n      dup4\n        /* \"#utility.yul\":2575:2582   */\n      dup6\n        /* \"#utility.yul\":2571:2594   */\n      sub\n        /* \"#utility.yul\":2567:2599   */\n      slt\n        /* \"#utility.yul\":2564:2616   */\n      iszero\n      tag_530\n      jumpi\n        /* \"#utility.yul\":2612:2613   */\n      0x00\n        /* \"#utility.yul\":2609:2610   */\n      dup1\n        /* \"#utility.yul\":2602:2614   */\n      revert\n        /* \"#utility.yul\":2564:2616   */\n    tag_530:\n        /* \"#utility.yul\":2648:2657   */\n      dup3\n        /* \"#utility.yul\":2635:2658   */\n      calldataload\n        /* \"#utility.yul\":2625:2658   */\n      swap2\n      pop\n        /* \"#utility.yul\":2677:2715   */\n      tag_531\n        /* \"#utility.yul\":2711:2713   */\n      0x20\n        /* \"#utility.yul\":2700:2709   */\n      dup5\n        /* \"#utility.yul\":2696:2714   */\n      add\n        /* \"#utility.yul\":2677:2715   */\n      tag_501\n      jump\t// in\n    tag_531:\n        /* \"#utility.yul\":2667:2715   */\n      swap1\n      pop\n        /* \"#utility.yul\":2467:2721   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3100:3286   */\n    tag_103:\n        /* \"#utility.yul\":3159:3165   */\n      0x00\n        /* \"#utility.yul\":3212:3214   */\n      0x20\n        /* \"#utility.yul\":3200:3209   */\n      dup3\n        /* \"#utility.yul\":3191:3198   */\n      dup5\n        /* \"#utility.yul\":3187:3210   */\n      sub\n        /* \"#utility.yul\":3183:3215   */\n      slt\n        /* \"#utility.yul\":3180:3232   */\n      iszero\n      tag_536\n      jumpi\n        /* \"#utility.yul\":3228:3229   */\n      0x00\n        /* \"#utility.yul\":3225:3226   */\n      dup1\n        /* \"#utility.yul\":3218:3230   */\n      revert\n        /* \"#utility.yul\":3180:3232   */\n    tag_536:\n        /* \"#utility.yul\":3251:3280   */\n      tag_272\n        /* \"#utility.yul\":3270:3279   */\n      dup3\n        /* \"#utility.yul\":3251:3280   */\n      tag_501\n      jump\t// in\n        /* \"#utility.yul\":3499:3659   */\n    tag_502:\n        /* \"#utility.yul\":3564:3584   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":3620:3633   */\n      dup1\n      iszero\n        /* \"#utility.yul\":3613:3634   */\n      iszero\n        /* \"#utility.yul\":3603:3635   */\n      dup2\n      eq\n        /* \"#utility.yul\":3593:3653   */\n      tag_517\n      jumpi\n        /* \"#utility.yul\":3649:3650   */\n      0x00\n        /* \"#utility.yul\":3646:3647   */\n      dup1\n        /* \"#utility.yul\":3639:3651   */\n      revert\n        /* \"#utility.yul\":3664:3986   */\n    tag_120:\n        /* \"#utility.yul\":3735:3741   */\n      0x00\n        /* \"#utility.yul\":3743:3749   */\n      dup1\n        /* \"#utility.yul\":3751:3757   */\n      0x00\n        /* \"#utility.yul\":3804:3806   */\n      0x60\n        /* \"#utility.yul\":3792:3801   */\n      dup5\n        /* \"#utility.yul\":3783:3790   */\n      dup7\n        /* \"#utility.yul\":3779:3802   */\n      sub\n        /* \"#utility.yul\":3775:3807   */\n      slt\n        /* \"#utility.yul\":3772:3824   */\n      iszero\n      tag_542\n      jumpi\n        /* \"#utility.yul\":3820:3821   */\n      0x00\n        /* \"#utility.yul\":3817:3818   */\n      dup1\n        /* \"#utility.yul\":3810:3822   */\n      revert\n        /* \"#utility.yul\":3772:3824   */\n    tag_542:\n        /* \"#utility.yul\":3843:3872   */\n      tag_543\n        /* \"#utility.yul\":3862:3871   */\n      dup5\n        /* \"#utility.yul\":3843:3872   */\n      tag_501\n      jump\t// in\n    tag_543:\n        /* \"#utility.yul\":3833:3872   */\n      swap3\n      pop\n        /* \"#utility.yul\":3891:3926   */\n      tag_544\n        /* \"#utility.yul\":3922:3924   */\n      0x20\n        /* \"#utility.yul\":3911:3920   */\n      dup6\n        /* \"#utility.yul\":3907:3925   */\n      add\n        /* \"#utility.yul\":3891:3926   */\n      tag_502\n      jump\t// in\n    tag_544:\n        /* \"#utility.yul\":3881:3926   */\n      swap2\n      pop\n        /* \"#utility.yul\":3945:3980   */\n      tag_545\n        /* \"#utility.yul\":3976:3978   */\n      0x40\n        /* \"#utility.yul\":3965:3974   */\n      dup6\n        /* \"#utility.yul\":3961:3979   */\n      add\n        /* \"#utility.yul\":3945:3980   */\n      tag_502\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":3935:3980   */\n      swap1\n      pop\n        /* \"#utility.yul\":3664:3986   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":3991:4239   */\n    tag_127:\n        /* \"#utility.yul\":4059:4065   */\n      0x00\n        /* \"#utility.yul\":4067:4073   */\n      dup1\n        /* \"#utility.yul\":4120:4122   */\n      0x40\n        /* \"#utility.yul\":4108:4117   */\n      dup4\n        /* \"#utility.yul\":4099:4106   */\n      dup6\n        /* \"#utility.yul\":4095:4118   */\n      sub\n        /* \"#utility.yul\":4091:4123   */\n      slt\n        /* \"#utility.yul\":4088:4140   */\n      iszero\n      tag_547\n      jumpi\n        /* \"#utility.yul\":4136:4137   */\n      0x00\n        /* \"#utility.yul\":4133:4134   */\n      dup1\n        /* \"#utility.yul\":4126:4138   */\n      revert\n        /* \"#utility.yul\":4088:4140   */\n    tag_547:\n      pop\n      pop\n        /* \"#utility.yul\":4159:4182   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":4229:4231   */\n      0x20\n        /* \"#utility.yul\":4214:4232   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":4201:4233   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":3991:4239   */\n      jump\t// out\n        /* \"#utility.yul\":4244:4504   */\n    tag_166:\n        /* \"#utility.yul\":4312:4318   */\n      0x00\n        /* \"#utility.yul\":4320:4326   */\n      dup1\n        /* \"#utility.yul\":4373:4375   */\n      0x40\n        /* \"#utility.yul\":4361:4370   */\n      dup4\n        /* \"#utility.yul\":4352:4359   */\n      dup6\n        /* \"#utility.yul\":4348:4371   */\n      sub\n        /* \"#utility.yul\":4344:4376   */\n      slt\n        /* \"#utility.yul\":4341:4393   */\n      iszero\n      tag_549\n      jumpi\n        /* \"#utility.yul\":4389:4390   */\n      0x00\n        /* \"#utility.yul\":4386:4387   */\n      dup1\n        /* \"#utility.yul\":4379:4391   */\n      revert\n        /* \"#utility.yul\":4341:4393   */\n    tag_549:\n        /* \"#utility.yul\":4412:4441   */\n      tag_550\n        /* \"#utility.yul\":4431:4440   */\n      dup4\n        /* \"#utility.yul\":4412:4441   */\n      tag_501\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":4402:4441   */\n      swap2\n      pop\n        /* \"#utility.yul\":4460:4498   */\n      tag_531\n        /* \"#utility.yul\":4494:4496   */\n      0x20\n        /* \"#utility.yul\":4483:4492   */\n      dup5\n        /* \"#utility.yul\":4479:4497   */\n      add\n        /* \"#utility.yul\":4460:4498   */\n      tag_501\n      jump\t// in\n        /* \"#utility.yul\":4782:5162   */\n    tag_193:\n        /* \"#utility.yul\":4861:4862   */\n      0x01\n        /* \"#utility.yul\":4857:4869   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4904:4916   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4925:4986   */\n      tag_554\n      jumpi\n        /* \"#utility.yul\":4979:4983   */\n      0x7f\n        /* \"#utility.yul\":4971:4977   */\n      dup3\n        /* \"#utility.yul\":4967:4984   */\n      and\n        /* \"#utility.yul\":4957:4984   */\n      swap2\n      pop\n        /* \"#utility.yul\":4925:4986   */\n    tag_554:\n        /* \"#utility.yul\":5032:5034   */\n      0x20\n        /* \"#utility.yul\":5024:5030   */\n      dup3\n        /* \"#utility.yul\":5021:5035   */\n      lt\n        /* \"#utility.yul\":5001:5019   */\n      dup2\n        /* \"#utility.yul\":4998:5036   */\n      sub\n        /* \"#utility.yul\":4995:5156   */\n      tag_555\n      jumpi\n        /* \"#utility.yul\":5078:5088   */\n      0x4e487b71\n        /* \"#utility.yul\":5073:5076   */\n      0xe0\n        /* \"#utility.yul\":5069:5089   */\n      shl\n        /* \"#utility.yul\":5066:5067   */\n      0x00\n        /* \"#utility.yul\":5059:5090   */\n      mstore\n        /* \"#utility.yul\":5113:5117   */\n      0x22\n        /* \"#utility.yul\":5110:5111   */\n      0x04\n        /* \"#utility.yul\":5103:5118   */\n      mstore\n        /* \"#utility.yul\":5141:5145   */\n      0x24\n        /* \"#utility.yul\":5138:5139   */\n      0x00\n        /* \"#utility.yul\":5131:5146   */\n      revert\n        /* \"#utility.yul\":4995:5156   */\n    tag_555:\n      pop\n        /* \"#utility.yul\":4782:5162   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5167:5523   */\n    tag_225:\n        /* \"#utility.yul\":5369:5371   */\n      0x20\n        /* \"#utility.yul\":5351:5372   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5388:5406   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5381:5411   */\n      mstore\n        /* \"#utility.yul\":5447:5481   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5442:5444   */\n      0x40\n        /* \"#utility.yul\":5427:5445   */\n      dup3\n      add\n        /* \"#utility.yul\":5420:5482   */\n      mstore\n        /* \"#utility.yul\":5514:5516   */\n      0x60\n        /* \"#utility.yul\":5499:5517   */\n      add\n      swap1\n        /* \"#utility.yul\":5167:5523   */\n      jump\t// out\n        /* \"#utility.yul\":6369:6496   */\n    tag_503:\n        /* \"#utility.yul\":6430:6440   */\n      0x4e487b71\n        /* \"#utility.yul\":6425:6428   */\n      0xe0\n        /* \"#utility.yul\":6421:6441   */\n      shl\n        /* \"#utility.yul\":6418:6419   */\n      0x00\n        /* \"#utility.yul\":6411:6442   */\n      mstore\n        /* \"#utility.yul\":6461:6465   */\n      0x11\n        /* \"#utility.yul\":6458:6459   */\n      0x04\n        /* \"#utility.yul\":6451:6466   */\n      mstore\n        /* \"#utility.yul\":6485:6489   */\n      0x24\n        /* \"#utility.yul\":6482:6483   */\n      0x00\n        /* \"#utility.yul\":6475:6490   */\n      revert\n        /* \"#utility.yul\":6501:6629   */\n    tag_242:\n        /* \"#utility.yul\":6541:6544   */\n      0x00\n        /* \"#utility.yul\":6572:6573   */\n      dup3\n        /* \"#utility.yul\":6568:6574   */\n      not\n        /* \"#utility.yul\":6565:6566   */\n      dup3\n        /* \"#utility.yul\":6562:6575   */\n      gt\n        /* \"#utility.yul\":6559:6598   */\n      iszero\n      tag_562\n      jumpi\n        /* \"#utility.yul\":6578:6596   */\n      tag_562\n      tag_503\n      jump\t// in\n    tag_562:\n      pop\n        /* \"#utility.yul\":6614:6623   */\n      add\n      swap1\n        /* \"#utility.yul\":6501:6629   */\n      jump\t// out\n        /* \"#utility.yul\":9024:9149   */\n    tag_369:\n        /* \"#utility.yul\":9064:9068   */\n      0x00\n        /* \"#utility.yul\":9092:9093   */\n      dup3\n        /* \"#utility.yul\":9089:9090   */\n      dup3\n        /* \"#utility.yul\":9086:9094   */\n      lt\n        /* \"#utility.yul\":9083:9117   */\n      iszero\n      tag_571\n      jumpi\n        /* \"#utility.yul\":9097:9115   */\n      tag_571\n      tag_503\n      jump\t// in\n    tag_571:\n      pop\n        /* \"#utility.yul\":9134:9143   */\n      sub\n      swap1\n        /* \"#utility.yul\":9024:9149   */\n      jump\t// out\n        /* \"#utility.yul\":9154:9940   */\n    tag_379:\n        /* \"#utility.yul\":9565:9590   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":9560:9563   */\n      dup2\n        /* \"#utility.yul\":9553:9591   */\n      mstore\n        /* \"#utility.yul\":9535:9538   */\n      0x00\n        /* \"#utility.yul\":9620:9626   */\n      dup4\n        /* \"#utility.yul\":9614:9627   */\n      mload\n        /* \"#utility.yul\":9636:9698   */\n      tag_573\n        /* \"#utility.yul\":9691:9697   */\n      dup2\n        /* \"#utility.yul\":9686:9688   */\n      0x17\n        /* \"#utility.yul\":9681:9684   */\n      dup6\n        /* \"#utility.yul\":9677:9689   */\n      add\n        /* \"#utility.yul\":9670:9674   */\n      0x20\n        /* \"#utility.yul\":9662:9668   */\n      dup9\n        /* \"#utility.yul\":9658:9675   */\n      add\n        /* \"#utility.yul\":9636:9698   */\n      tag_500\n      jump\t// in\n    tag_573:\n      shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n        /* \"#utility.yul\":9757:9759   */\n      0x17\n        /* \"#utility.yul\":9717:9733   */\n      swap2\n      dup5\n      add\n        /* \"#utility.yul\":9749:9760   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":9742:9782   */\n      mstore\n        /* \"#utility.yul\":9807:9820   */\n      dup4\n      mload\n        /* \"#utility.yul\":9829:9892   */\n      tag_574\n        /* \"#utility.yul\":9807:9820   */\n      dup2\n        /* \"#utility.yul\":9878:9880   */\n      0x28\n        /* \"#utility.yul\":9870:9881   */\n      dup5\n      add\n        /* \"#utility.yul\":9863:9867   */\n      0x20\n        /* \"#utility.yul\":9851:9868   */\n      dup9\n      add\n        /* \"#utility.yul\":9829:9892   */\n      tag_500\n      jump\t// in\n    tag_574:\n        /* \"#utility.yul\":9912:9929   */\n      add\n        /* \"#utility.yul\":9931:9933   */\n      0x28\n        /* \"#utility.yul\":9908:9934   */\n      add\n      swap5\n        /* \"#utility.yul\":9154:9940   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11967:12135   */\n    tag_432:\n        /* \"#utility.yul\":12007:12014   */\n      0x00\n        /* \"#utility.yul\":12073:12074   */\n      dup2\n        /* \"#utility.yul\":12069:12070   */\n      0x00\n        /* \"#utility.yul\":12065:12071   */\n      not\n        /* \"#utility.yul\":12061:12075   */\n      div\n        /* \"#utility.yul\":12058:12059   */\n      dup4\n        /* \"#utility.yul\":12055:12076   */\n      gt\n        /* \"#utility.yul\":12050:12051   */\n      dup3\n        /* \"#utility.yul\":12043:12052   */\n      iszero\n        /* \"#utility.yul\":12036:12053   */\n      iszero\n        /* \"#utility.yul\":12032:12077   */\n      and\n        /* \"#utility.yul\":12029:12100   */\n      iszero\n      tag_582\n      jumpi\n        /* \"#utility.yul\":12080:12098   */\n      tag_582\n      tag_503\n      jump\t// in\n    tag_582:\n      pop\n        /* \"#utility.yul\":12120:12129   */\n      mul\n      swap1\n        /* \"#utility.yul\":11967:12135   */\n      jump\t// out\n        /* \"#utility.yul\":12140:12357   */\n    tag_435:\n        /* \"#utility.yul\":12180:12181   */\n      0x00\n        /* \"#utility.yul\":12206:12207   */\n      dup3\n        /* \"#utility.yul\":12196:12328   */\n      tag_584\n      jumpi\n        /* \"#utility.yul\":12250:12260   */\n      0x4e487b71\n        /* \"#utility.yul\":12245:12248   */\n      0xe0\n        /* \"#utility.yul\":12241:12261   */\n      shl\n        /* \"#utility.yul\":12238:12239   */\n      0x00\n        /* \"#utility.yul\":12231:12262   */\n      mstore\n        /* \"#utility.yul\":12285:12289   */\n      0x12\n        /* \"#utility.yul\":12282:12283   */\n      0x04\n        /* \"#utility.yul\":12275:12290   */\n      mstore\n        /* \"#utility.yul\":12313:12317   */\n      0x24\n        /* \"#utility.yul\":12310:12311   */\n      0x00\n        /* \"#utility.yul\":12303:12318   */\n      revert\n        /* \"#utility.yul\":12196:12328   */\n    tag_584:\n      pop\n        /* \"#utility.yul\":12342:12351   */\n      div\n      swap1\n        /* \"#utility.yul\":12140:12357   */\n      jump\t// out\n        /* \"#utility.yul\":12362:12489   */\n    tag_441:\n        /* \"#utility.yul\":12423:12433   */\n      0x4e487b71\n        /* \"#utility.yul\":12418:12421   */\n      0xe0\n        /* \"#utility.yul\":12414:12434   */\n      shl\n        /* \"#utility.yul\":12411:12412   */\n      0x00\n        /* \"#utility.yul\":12404:12435   */\n      mstore\n        /* \"#utility.yul\":12454:12458   */\n      0x41\n        /* \"#utility.yul\":12451:12452   */\n      0x04\n        /* \"#utility.yul\":12444:12459   */\n      mstore\n        /* \"#utility.yul\":12478:12482   */\n      0x24\n        /* \"#utility.yul\":12475:12476   */\n      0x00\n        /* \"#utility.yul\":12468:12483   */\n      revert\n        /* \"#utility.yul\":12494:12621   */\n    tag_445:\n        /* \"#utility.yul\":12555:12565   */\n      0x4e487b71\n        /* \"#utility.yul\":12550:12553   */\n      0xe0\n        /* \"#utility.yul\":12546:12566   */\n      shl\n        /* \"#utility.yul\":12543:12544   */\n      0x00\n        /* \"#utility.yul\":12536:12567   */\n      mstore\n        /* \"#utility.yul\":12586:12590   */\n      0x32\n        /* \"#utility.yul\":12583:12584   */\n      0x04\n        /* \"#utility.yul\":12576:12591   */\n      mstore\n        /* \"#utility.yul\":12610:12614   */\n      0x24\n        /* \"#utility.yul\":12607:12608   */\n      0x00\n        /* \"#utility.yul\":12600:12615   */\n      revert\n        /* \"#utility.yul\":12626:12762   */\n    tag_458:\n        /* \"#utility.yul\":12665:12668   */\n      0x00\n        /* \"#utility.yul\":12693:12698   */\n      dup2\n        /* \"#utility.yul\":12683:12722   */\n      tag_589\n      jumpi\n        /* \"#utility.yul\":12702:12720   */\n      tag_589\n      tag_503\n      jump\t// in\n    tag_589:\n      pop\n      not(0x00)\n        /* \"#utility.yul\":12738:12756   */\n      add\n      swap1\n        /* \"#utility.yul\":12626:12762   */\n      jump\t// out\n        /* \"#utility.yul\":13960:14087   */\n    tag_497:\n        /* \"#utility.yul\":14021:14031   */\n      0x4e487b71\n        /* \"#utility.yul\":14016:14019   */\n      0xe0\n        /* \"#utility.yul\":14012:14032   */\n      shl\n        /* \"#utility.yul\":14009:14010   */\n      0x00\n        /* \"#utility.yul\":14002:14033   */\n      mstore\n        /* \"#utility.yul\":14052:14056   */\n      0x31\n        /* \"#utility.yul\":14049:14050   */\n      0x04\n        /* \"#utility.yul\":14042:14057   */\n      mstore\n        /* \"#utility.yul\":14076:14080   */\n      0x24\n        /* \"#utility.yul\":14073:14074   */\n      0x00\n        /* \"#utility.yul\":14066:14081   */\n      revert\n\n    auxdata: 0xa26469706673582212208c07753cef65e25fc61f05f734b08d9500ff824f6de0adeec0d63e93eef198d664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2772": {
									"entryPoint": null,
									"id": 2772,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_555": {
									"entryPoint": null,
									"id": 555,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_663": {
									"entryPoint": null,
									"id": 663,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_773": {
									"entryPoint": null,
									"id": 773,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_add_2126": {
									"entryPoint": 1349,
									"id": 2126,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_afterTokenTransfer_1315": {
									"entryPoint": null,
									"id": 1315,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1304": {
									"entryPoint": null,
									"id": 1304,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1474": {
									"entryPoint": 1221,
									"id": 1474,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_2809": {
									"entryPoint": 743,
									"id": 2809,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_contains_2229": {
									"entryPoint": null,
									"id": 2229,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_grantRole_276": {
									"entryPoint": 1029,
									"id": 276,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_grantRole_408": {
									"entryPoint": 676,
									"id": 408,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_mint_1133": {
									"entryPoint": 429,
									"id": 1133,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1512": {
									"entryPoint": null,
									"id": 1512,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_setupRole_216": {
									"entryPoint": 413,
									"id": 216,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_635": {
									"entryPoint": 323,
									"id": 635,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@add_2412": {
									"entryPoint": 1189,
									"id": 2412,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@hasRole_81": {
									"entryPoint": null,
									"id": 81,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@owner_564": {
									"entryPoint": null,
									"id": 564,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@paused_672": {
									"entryPoint": null,
									"id": 672,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 1619,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 1802,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1908,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1947,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 1597,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4000:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:18"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:18"
															},
															"nodeType": "YulIf",
															"src": "220:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:18"
															},
															"nodeType": "YulIf",
															"src": "353:36:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:18"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:18"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:18"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:18",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:18"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:18"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:18",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:18"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:18"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:18"
															},
															"nodeType": "YulIf",
															"src": "536:72:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:18",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:18"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:18"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:18"
															},
															"nodeType": "YulIf",
															"src": "698:53:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:18"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:18"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:18",
																"statements": []
															},
															"src": "779:133:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:18"
															},
															"nodeType": "YulIf",
															"src": "921:80:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:18",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:18"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:18",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:18",
														"type": ""
													}
												],
												"src": "146:885:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:18"
															},
															"nodeType": "YulIf",
															"src": "1164:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:18"
															},
															"nodeType": "YulIf",
															"src": "1301:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:18"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:18"
															},
															"nodeType": "YulIf",
															"src": "1474:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:18"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:18",
														"type": ""
													}
												],
												"src": "1036:562:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1777:181:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1794:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1805:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1787:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1787:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1787:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1828:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1839:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1824:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1824:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1844:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1817:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1817:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1817:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1867:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1878:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1863:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1863:18:18"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1883:33:18",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1856:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1856:61:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1856:61:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1926:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1938:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1949:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1934:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1934:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1926:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1754:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1768:4:18",
														"type": ""
													}
												],
												"src": "1603:355:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2011:177:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2046:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2067:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2074:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2079:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2070:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2070:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2060:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2060:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2060:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2111:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2114:4:18",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2104:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2104:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2104:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2139:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2142:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2132:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2132:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2132:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2027:1:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2034:1:18"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2030:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2030:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2024:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2024:13:18"
															},
															"nodeType": "YulIf",
															"src": "2021:136:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2166:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2177:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2180:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2173:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2173:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2166:3:18"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1994:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1997:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2003:3:18",
														"type": ""
													}
												],
												"src": "1963:225:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2294:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2304:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2316:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2327:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2312:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2312:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2304:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2346:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2357:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2339:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2339:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2339:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2263:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2274:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2285:4:18",
														"type": ""
													}
												],
												"src": "2193:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2549:236:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2566:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2577:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2559:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2559:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2559:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2600:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2611:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2596:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2596:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2616:2:18",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2589:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2589:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2589:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2639:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2650:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2635:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2635:18:18"
																	},
																	{
																		"hexValue": "4865726f204177616b656e20546f6b656e3a207468652073656e646572206861",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2655:34:18",
																		"type": "",
																		"value": "Hero Awaken Token: the sender ha"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2628:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2628:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2628:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2710:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2721:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2706:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2706:18:18"
																	},
																	{
																		"hexValue": "73206265656e20626c6f636b6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2726:16:18",
																		"type": "",
																		"value": "s been blocked"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2699:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2699:44:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2699:44:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2752:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2764:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2775:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2760:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2760:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2752:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2526:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2540:4:18",
														"type": ""
													}
												],
												"src": "2375:410:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2964:238:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2981:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2992:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2974:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2974:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2974:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3015:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3026:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3011:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3011:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3031:2:18",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3004:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3004:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3004:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3054:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3065:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3050:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3050:18:18"
																	},
																	{
																		"hexValue": "4865726f204177616b656e20546f6b656e3a2074686520726563656976657220",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3070:34:18",
																		"type": "",
																		"value": "Hero Awaken Token: the receiver "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3043:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3043:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3043:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3125:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3136:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3121:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3121:18:18"
																	},
																	{
																		"hexValue": "686173206265656e20626c6f636b6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3141:18:18",
																		"type": "",
																		"value": "has been blocked"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3114:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3114:46:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3114:46:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3169:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3181:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3192:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3177:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3177:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3169:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2941:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2955:4:18",
														"type": ""
													}
												],
												"src": "2790:412:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3381:232:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3398:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3409:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3391:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3391:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3391:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3432:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3443:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3428:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3428:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3448:2:18",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3421:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3421:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3421:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3471:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3482:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3467:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3467:18:18"
																	},
																	{
																		"hexValue": "45524332305061757361626c653a20746f6b656e207472616e73666572207768",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3487:34:18",
																		"type": "",
																		"value": "ERC20Pausable: token transfer wh"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3460:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3460:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3460:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3542:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3553:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3538:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3538:18:18"
																	},
																	{
																		"hexValue": "696c6520706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3558:12:18",
																		"type": "",
																		"value": "ile paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3531:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3531:40:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3531:40:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3580:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3592:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3603:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3588:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3580:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3358:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3372:4:18",
														"type": ""
													}
												],
												"src": "3207:406:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3673:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3683:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3697:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3700:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "3693:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3693:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "3683:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3714:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3744:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3750:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3740:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3740:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "3718:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3791:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3793:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "3807:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3815:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "3803:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3803:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3793:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "3771:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3764:26:18"
															},
															"nodeType": "YulIf",
															"src": "3761:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3881:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3902:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3909:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3914:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3905:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3905:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3895:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3895:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3895:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3946:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3949:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3939:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3939:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3939:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3974:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3977:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3967:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3967:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3967:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "3837:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3860:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3868:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3857:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3857:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "3834:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3834:38:18"
															},
															"nodeType": "YulIf",
															"src": "3831:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3653:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3662:6:18",
														"type": ""
													}
												],
												"src": "3618:380:18"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Hero Awaken Token: the sender ha\")\n        mstore(add(headStart, 96), \"s been blocked\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Hero Awaken Token: the receiver \")\n        mstore(add(headStart, 96), \"has been blocked\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC20Pausable: token transfer wh\")\n        mstore(add(headStart, 96), \"ile paused\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x23AC CODESIZE SUB DUP1 PUSH3 0x23AC DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x70A JUMP JUMPDEST DUP2 MLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x597 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x597 JUMP JUMPDEST POP POP PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH3 0x7B CALLER PUSH3 0x143 JUMP JUMPDEST PUSH3 0x88 PUSH1 0x0 CALLER PUSH3 0x19D JUMP JUMPDEST PUSH3 0xB4 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0x19D JUMP JUMPDEST PUSH3 0xE0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH3 0x19D JUMP JUMPDEST PUSH1 0x32 PUSH1 0x8 SSTORE PUSH3 0xFD PUSH1 0x7 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH3 0x13B SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV AND PUSH12 0x33B2E3C9FD0803CE8000000 PUSH3 0x1AD JUMP JUMPDEST POP POP PUSH3 0x7D7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x1A9 DUP3 DUP3 PUSH3 0x2A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x209 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x217 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2E7 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x22B SWAP2 SWAP1 PUSH3 0x774 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH3 0x25A SWAP1 DUP5 SWAP1 PUSH3 0x774 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x2BB DUP3 DUP3 PUSH3 0x405 PUSH1 0x20 SHL PUSH3 0xB43 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0x2E2 SWAP2 DUP4 SWAP1 PUSH3 0xBC7 PUSH3 0x4A5 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x369 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A207468652073656E646572206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1CC81899595B88189B1BD8DAD959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x200 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x3ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A2074686520726563656976657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1A185CC81899595B88189B1BD8DAD959 PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x200 JUMP JUMPDEST PUSH3 0x2E2 DUP4 DUP4 DUP4 PUSH3 0x4C5 PUSH1 0x20 SHL PUSH3 0xBDC OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x1A9 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x461 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4BC DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x545 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4DD DUP4 DUP4 DUP4 PUSH3 0x2E2 PUSH1 0x20 SHL PUSH3 0x683 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x2E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1A5B19481C185D5CD959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x200 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x58E JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x4BF JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x4BF JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x5A5 SWAP1 PUSH3 0x79B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x5C9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x614 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x5E4 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x614 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x614 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x614 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x5F7 JUMP JUMPDEST POP PUSH3 0x622 SWAP3 SWAP2 POP PUSH3 0x626 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x622 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x627 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x682 JUMPI PUSH3 0x682 PUSH3 0x63D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x6AD JUMPI PUSH3 0x6AD PUSH3 0x63D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x6EE JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x6CF JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x700 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x744 DUP7 DUP4 DUP8 ADD PUSH3 0x653 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x76A DUP6 DUP3 DUP7 ADD PUSH3 0x653 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x796 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x7B0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x7D1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC5 DUP1 PUSH3 0x7E7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BEA9334 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0xE5962195 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xEEFB9BE2 EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x98118CB4 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xA128471F EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BEA9334 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x7F257C3E EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x357BF15C EQ PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x271 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x234 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x17C2 JUMP JUMPDEST PUSH2 0x564 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x73E JUMP JUMPDEST PUSH2 0x234 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x324 CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x234 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x808 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x844 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x385 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x859 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1980 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST PUSH2 0x234 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x251 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x275 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x275 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0xA06 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x275 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x275 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x500 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x275 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0xA51 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x55F CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x589 JUMPI POP PUSH2 0x589 DUP3 PUSH2 0xC42 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x59E SWAP1 PUSH2 0x19CC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5CA SWAP1 PUSH2 0x19CC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x617 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5EC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x617 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5FA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x62F DUP2 DUP6 DUP6 PUSH2 0xC77 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x647 DUP6 DUP3 DUP6 PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x652 DUP6 DUP6 DUP6 PUSH2 0xE2D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x679 DUP2 CALLER PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 PUSH2 0xF34 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A206C697175696469747920666565 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D757374206265747765656E203020616E6420313030300000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x7AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x7B8 DUP3 DUP3 PUSH2 0xF56 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x62F SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x7F6 SWAP1 DUP8 SWAP1 PUSH2 0x1A51 JUMP JUMPDEST PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x805 CALLER DUP3 PUSH2 0xF78 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x838 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH2 0x842 PUSH1 0x0 PUSH2 0x10D2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x84F DUP3 CALLER DUP4 PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x7B8 DUP3 DUP3 PUSH2 0xF78 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP5 ISZERO ISZERO PUSH1 0xFF NOT SWAP6 DUP7 AND OR SWAP1 SSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x8E3 SWAP1 DUP4 PUSH2 0x112C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x59E SWAP1 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x652 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x62F DUP2 DUP6 DUP6 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x589 SWAP1 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA47 DUP2 CALLER PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xA81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xAD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x805 DUP2 PUSH2 0x10D2 JUMP JUMPDEST PUSH2 0xB4D DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB83 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1142 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x683 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1A5B19481C185D5CD959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x589 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE27 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xE27 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0xE6C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0xE7C JUMPI PUSH2 0xE7C DUP4 DUP4 DUP4 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9F PUSH2 0x3E8 PUSH2 0xE99 PUSH1 0x8 SLOAD DUP6 PUSH2 0x136A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1376 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAB DUP2 DUP4 PUSH2 0x1A69 JUMP JUMPDEST SWAP2 POP PUSH2 0xEB8 DUP5 DUP5 DUP5 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0xE27 SWAP1 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1191 JUMP JUMPDEST PUSH2 0xEDA DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x7B8 JUMPI PUSH2 0xEF2 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x1382 JUMP JUMPDEST PUSH2 0xEFD DUP4 PUSH1 0x20 PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF0E SWAP3 SWAP2 SWAP1 PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6B8 SWAP2 PUSH1 0x4 ADD PUSH2 0x1818 JUMP JUMPDEST PUSH2 0xF3E DUP3 DUP3 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x683 SWAP1 DUP3 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0xF60 DUP3 DUP3 PUSH2 0x151E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x683 SWAP1 DUP3 PUSH2 0x1583 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xFE4 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1087 SWAP1 DUP5 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 DUP4 PUSH2 0x16A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x589 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1189 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x589 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x11F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x1262 DUP4 DUP4 DUP4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1311 SWAP1 DUP5 SWAP1 PUSH2 0x1A51 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x135D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP3 DUP5 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP3 DUP5 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1391 DUP4 PUSH1 0x2 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x139C SWAP1 PUSH1 0x2 PUSH2 0x1A51 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13B4 JUMPI PUSH2 0x13B4 PUSH2 0x1B36 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13DE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13F9 JUMPI PUSH2 0x13F9 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1428 JUMPI PUSH2 0x1428 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x144C DUP5 PUSH1 0x2 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x1457 SWAP1 PUSH1 0x1 PUSH2 0x1A51 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x14CF JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1B4C JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14A1 JUMPI PUSH2 0x14A1 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x14C8 DUP2 PUSH2 0x1B62 JUMP JUMPDEST SWAP1 POP PUSH2 0x145A JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x1528 DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1618 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A207468652073656E646572206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1CC81899595B88189B1BD8DAD959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x169A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A2074686520726563656976657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1A185CC81899595B88189B1BD8DAD959 PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 DUP4 PUSH2 0xBDC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16BC JUMPI PUSH2 0x16BC PUSH2 0x1B4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x17B8 JUMPI PUSH1 0x0 PUSH2 0x16F3 PUSH1 0x1 DUP4 PUSH2 0x1A69 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1707 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x176C JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1727 JUMPI PUSH2 0x1727 PUSH2 0x1B4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x174A JUMPI PUSH2 0x174A PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x177D JUMPI PUSH2 0x177D PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1807 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17EF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE27 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1837 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x17EC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1883 DUP4 PUSH2 0x184B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18AF DUP5 PUSH2 0x184B JUMP JUMPDEST SWAP3 POP PUSH2 0x18BD PUSH1 0x20 DUP6 ADD PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1909 PUSH1 0x20 DUP5 ADD PUSH2 0x184B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8E3 DUP3 PUSH2 0x184B JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x195B DUP5 PUSH2 0x184B JUMP JUMPDEST SWAP3 POP PUSH2 0x1969 PUSH1 0x20 DUP6 ADD PUSH2 0x192D JUMP JUMPDEST SWAP2 POP PUSH2 0x1977 PUSH1 0x40 DUP6 ADD PUSH2 0x192D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1993 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19BE DUP4 PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH2 0x1909 PUSH1 0x20 DUP5 ADD PUSH2 0x184B JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x19E0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A00 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1A64 JUMPI PUSH2 0x1A64 PUSH2 0x1A3B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1A7B JUMPI PUSH2 0x1A7B PUSH2 0x1A3B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1AB8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17EC JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1AE9 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17EC JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1B0F JUMPI PUSH2 0x1B0F PUSH2 0x1A3B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B31 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1B71 JUMPI PUSH2 0x1B71 PUSH2 0x1A3B JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 SMOD PUSH22 0x3CEF65E25FC61F05F734B08D9500FF824F6DE0ADEEC0 0xD6 RETURNDATACOPY SWAP4 0xEE CALL SWAP9 0xD6 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "510:3530:17:-:0;;;1090:346;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:13:6;;1150:4:17;;1156:6;;2044:13:6;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2067:17:6;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;981:7:5;:15;;-1:-1:-1;;981:15:5;;;-1:-1:-1;921:32:4;719:10:11;921:18:4;:32::i;:::-;1175:44:17::1;2072:4:0;719:10:11::0;1175::17::1;:44::i;:::-;1232:37;685:24;719:10:11::0;1175::17::1;:44::i;1232:37::-;1280;754:24;719:10:11::0;1175::17::1;:44::i;1280:37::-;1346:2;1330:13;:18:::0;1378:7:::1;1108:6:4::0;;;;;-1:-1:-1;;;;;1108:6:4;;1036:85;1378:7:17::1;1359:16;:26:::0;;-1:-1:-1;;;;;;1359:26:17::1;-1:-1:-1::0;;;;;1359:26:17;;::::1;;::::0;;1108:6:4;;1398:30:17::1;::::0;1108:6:4;;;;;1413:14:17::1;1398:5;:30::i;:::-;1090:346:::0;;510:3530;;2270:187:4;2362:6;;;-1:-1:-1;;;;;2378:17:4;;;2362:6;2378:17;;;-1:-1:-1;;;;;;2378:17:4;;;;;;2410:40;;2362:6;;;;;;;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;6257:110:0:-;6335:25;6346:4;6352:7;6335:10;:25::i;:::-;6257:110;;:::o;8415:389:6:-;-1:-1:-1;;;;;8498:21:6;;8490:65;;;;-1:-1:-1;;;8490:65:6;;1805:2:18;8490:65:6;;;1787:21:18;1844:2;1824:18;;;1817:30;1883:33;1863:18;;;1856:61;1934:18;;8490:65:6;;;;;;;;;8566:49;8595:1;8599:7;8608:6;8566:20;:49::i;:::-;8642:6;8626:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8658:18:6;;;;;;:9;:18;;;;;:28;;8680:6;;8658:18;:28;;8680:6;;8658:28;:::i;:::-;;;;-1:-1:-1;;8701:37:6;;2339:25:18;;;-1:-1:-1;;;;;8701:37:6;;;8718:1;;8701:37;;2327:2:18;2312:18;8701:37:6;;;;;;;6257:110:0;;:::o;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;;;;;:31;;:::i;:::-;2106:18;;;;:12;:18;;;;;;;;:31;;2129:7;;2106:22;;;;;:31;;:::i;:::-;;1978:166;;:::o;1444:475:17:-;-1:-1:-1;;;;;1632:19:17;;;;;;:13;:19;;;;;;;;1631:20;1609:116;;;;-1:-1:-1;;;1609:116:17;;2577:2:18;1609:116:17;;;2559:21:18;2616:2;2596:18;;;2589:30;2655:34;2635:18;;;2628:62;-1:-1:-1;;;2706:18:18;;;2699:44;2760:19;;1609:116:17;2375:410:18;1609:116:17;-1:-1:-1;;;;;1759:19:17;;;;;;:15;:19;;;;;;;;1758:20;1736:118;;;;-1:-1:-1;;;1736:118:17;;2992:2:18;1736:118:17;;;2974:21:18;3031:2;3011:18;;;3004:30;3070:34;3050:18;;;3043:62;-1:-1:-1;;;3121:18:18;;;3114:46;3177:19;;1736:118:17;2790:412:18;1736:118:17;1867:44;1894:4;1900:2;1904:6;1867:26;;;;;:44;;:::i;6861:233:0:-;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:0;;;;;;;;;;;;6939:149;;6982:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6982:29:0;;;;;;;;;:36;;-1:-1:-1;;6982:36:0;7014:4;6982:36;;;7064:12;719:10:11;;640:96;7064:12:0;-1:-1:-1;;;;;7037:40:0;7055:7;-1:-1:-1;;;;;7037:40:0;7049:4;7037:40;;;;;;;;;;6861:233;;:::o;7612:150:16:-;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:16;;7705:4;:50::i;:::-;7698:57;;7612:150;;;;;:::o;665:264:9:-;803:44;830:4;836:2;840:6;803:26;;;;;:44;;:::i;:::-;1168:7:5;;;;866:9:9;858:64;;;;-1:-1:-1;;;858:64:9;;3409:2:18;858:64:9;;;3391:21:18;3448:2;3428:18;;;3421:30;3487:34;3467:18;;;3460:62;-1:-1:-1;;;3538:18:18;;;3531:40;3588:19;;858:64:9;3207:406:18;1697:404:16;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:16;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:16;2072:12;;510:3530:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;510:3530:17;;;-1:-1:-1;510:3530:17;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:18;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:18;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:18;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:18:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:18;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1963:225::-;2003:3;2034:1;2030:6;2027:1;2024:13;2021:136;;;2079:10;2074:3;2070:20;2067:1;2060:31;2114:4;2111:1;2104:15;2142:4;2139:1;2132:15;2021:136;-1:-1:-1;2173:9:18;;1963:225::o;3618:380::-;3697:1;3693:12;;;;3740;;;3761:61;;3815:4;3807:6;3803:17;3793:27;;3761:61;3868:2;3860:6;3857:14;3837:18;3834:38;3831:161;;3914:10;3909:3;3905:20;3902:1;3895:31;3949:4;3946:1;3939:15;3977:4;3974:1;3967:15;3831:161;;3618:380;;;:::o;:::-;510:3530:17;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_ADMIN_ROLE_27": {
									"entryPoint": null,
									"id": 27,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@MINTER_ROLE_2699": {
									"entryPoint": null,
									"id": 2699,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@PAUSER_ROLE_2704": {
									"entryPoint": null,
									"id": 2704,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_add_2126": {
									"entryPoint": 4418,
									"id": 2126,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_afterTokenTransfer_1315": {
									"entryPoint": null,
									"id": 1315,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1250": {
									"entryPoint": 3191,
									"id": 1250,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_at_2260": {
									"entryPoint": 5797,
									"id": 2260,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_beforeTokenTransfer_1304": {
									"entryPoint": null,
									"id": 1304,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1474": {
									"entryPoint": 3036,
									"id": 1474,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_2809": {
									"entryPoint": 5528,
									"id": 2809,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_burn_1205": {
									"entryPoint": 3960,
									"id": 1205,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkRole_124": {
									"entryPoint": 3792,
									"id": 124,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_contains_2229": {
									"entryPoint": null,
									"id": 2229,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_grantRole_276": {
									"entryPoint": 2883,
									"id": 276,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_grantRole_408": {
									"entryPoint": 3892,
									"id": 408,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_length_2243": {
									"entryPoint": null,
									"id": 2243,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_1512": {
									"entryPoint": null,
									"id": 1512,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_remove_2210": {
									"entryPoint": 5839,
									"id": 2210,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_revokeRole_307": {
									"entryPoint": 5406,
									"id": 307,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revokeRole_432": {
									"entryPoint": 3926,
									"id": 432,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_spendAllowance_1293": {
									"entryPoint": 3483,
									"id": 1293,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_635": {
									"entryPoint": 4306,
									"id": 635,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_1077": {
									"entryPoint": 4497,
									"id": 1077,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_2986": {
									"entryPoint": 3629,
									"id": 2986,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@addLiquidityFree_2926": {
									"entryPoint": 2641,
									"id": 2926,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@add_2412": {
									"entryPoint": 3015,
									"id": 2412,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@allowance_870": {
									"entryPoint": null,
									"id": 870,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_895": {
									"entryPoint": 1569,
									"id": 895,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@at_2508": {
									"entryPoint": 4396,
									"id": 2508,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_827": {
									"entryPoint": null,
									"id": 827,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@blockUser_2877": {
									"entryPoint": 2137,
									"id": 2877,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@blocked_2853": {
									"entryPoint": null,
									"id": 2853,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@burnFrom_1437": {
									"entryPoint": 2116,
									"id": 1437,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_1416": {
									"entryPoint": 2043,
									"id": 1416,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_803": {
									"entryPoint": null,
									"id": 803,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1000": {
									"entryPoint": 2420,
									"id": 1000,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@div_1982": {
									"entryPoint": 4982,
									"id": 1982,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getOwner_2819": {
									"entryPoint": null,
									"id": 2819,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getRoleAdmin_139": {
									"entryPoint": null,
									"id": 139,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRoleMemberCount_384": {
									"entryPoint": 2580,
									"id": 384,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRoleMember_368": {
									"entryPoint": 2251,
									"id": 368,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@grantRole_159": {
									"entryPoint": 1629,
									"id": 159,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_81": {
									"entryPoint": 2282,
									"id": 81,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_958": {
									"entryPoint": 1980,
									"id": 958,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@length_2481": {
									"entryPoint": 4408,
									"id": 2481,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@liquidityFee_2827": {
									"entryPoint": null,
									"id": 2827,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@liquidityKeeper_2835": {
									"entryPoint": null,
									"id": 2835,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mul_1967": {
									"entryPoint": 4970,
									"id": 1967,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_783": {
									"entryPoint": 1423,
									"id": 783,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_564": {
									"entryPoint": null,
									"id": 564,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@paused_672": {
									"entryPoint": null,
									"id": 672,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@remove_2439": {
									"entryPoint": 5507,
									"id": 2439,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceOwnership_592": {
									"entryPoint": 2056,
									"id": 592,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceRole_202": {
									"entryPoint": 1854,
									"id": 202,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_179": {
									"entryPoint": 2603,
									"id": 179,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setLiquidityFee_2900": {
									"entryPoint": 1672,
									"id": 2900,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setLiquidityKeeper_2912": {
									"entryPoint": 2338,
									"id": 2912,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@supportsInterface_1748": {
									"entryPoint": null,
									"id": 1748,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_349": {
									"entryPoint": 1380,
									"id": 349,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_62": {
									"entryPoint": 3138,
									"id": 62,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_793": {
									"entryPoint": 2323,
									"id": 793,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toHexString_1724": {
									"entryPoint": 4994,
									"id": 1724,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_928": {
									"entryPoint": 1593,
									"id": 928,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_615": {
									"entryPoint": 2725,
									"id": 615,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_852": {
									"entryPoint": 2566,
									"id": 852,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 6219,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_bool": {
									"entryPoint": 6445,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6418,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 6562,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 6289,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_boolt_bool": {
									"entryPoint": 6461,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 6349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 6374,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32t_uint256": {
									"entryPoint": 6528,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 6082,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6784,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6a89d7fbb95c9909be81b8b6d1b3f62aeadfedad713314ae6cba8802f9479cb0__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6662,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6737,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 6932,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6901,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6761,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 6124,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 7010,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 6604,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 6715,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x31": {
									"entryPoint": 7033,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 6988,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 6966,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14089:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "83:217:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "138:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "141:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "104:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "113:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "125:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "96:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:32:18"
															},
															"nodeType": "YulIf",
															"src": "93:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "154:36:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "180:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "167:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "167:23:18"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "158:5:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "254:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "263:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "266:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "256:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "256:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "212:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "223:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "234:3:18",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "239:10:18",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "230:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "230:20:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "219:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "219:32:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "209:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "209:43:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "202:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:51:18"
															},
															"nodeType": "YulIf",
															"src": "199:71:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "279:15:18",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "289:5:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "279:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "49:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "60:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "72:6:18",
														"type": ""
													}
												],
												"src": "14:286:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "400:92:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "410:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "433:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "418:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "418:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "410:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "452:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "477:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "470:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "470:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "463:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "463:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "445:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "445:41:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "445:41:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "369:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "380:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "391:4:18",
														"type": ""
													}
												],
												"src": "305:187:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "550:205:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "560:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "569:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "564:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "629:63:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "654:3:18"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "659:1:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "650:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "650:11:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "673:3:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "678:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "669:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "669:11:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "663:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "663:18:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "643:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "643:39:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "643:39:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "590:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "593:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "587:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "587:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "601:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "603:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "612:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "615:2:18",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "608:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "608:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "603:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "583:3:18",
																"statements": []
															},
															"src": "579:113:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "718:31:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "731:3:18"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "736:6:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "727:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "727:16:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "745:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "720:27:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "720:27:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "707:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "710:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "704:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "704:13:18"
															},
															"nodeType": "YulIf",
															"src": "701:48:18"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "528:3:18",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "533:3:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "538:6:18",
														"type": ""
													}
												],
												"src": "497:258:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:262:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "909:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "891:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "891:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "891:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "921:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "941:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "935:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "925:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "968:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "979:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "964:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "964:18:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "984:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "957:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "957:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "957:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1034:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1022:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1022:15:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1043:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1054:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1039:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1039:18:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1059:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1000:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1000:66:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1000:66:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1075:62:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1091:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1110:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1118:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1106:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1106:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1127:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1123:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1123:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1102:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1102:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1087:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1087:45:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1134:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1083:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1083:54:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1075:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "850:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "861:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "872:4:18",
														"type": ""
													}
												],
												"src": "760:383:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1197:124:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1207:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1229:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1216:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1216:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1207:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1299:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1308:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1311:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1301:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1301:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1301:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1258:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1269:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1284:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1289:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1280:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1280:11:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1293:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1276:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1276:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1265:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1265:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1255:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1255:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1248:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1248:50:18"
															},
															"nodeType": "YulIf",
															"src": "1245:70:18"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1176:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1187:5:18",
														"type": ""
													}
												],
												"src": "1148:173:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:167:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:18"
															},
															"nodeType": "YulIf",
															"src": "1423:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1513:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1494:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1532:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1559:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1570:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1555:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1555:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1542:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1542:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1532:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1371:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1382:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1394:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1402:6:18",
														"type": ""
													}
												],
												"src": "1326:254:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1686:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1696:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1708:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1719:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1704:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1696:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1738:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1749:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1731:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1731:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1731:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1655:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1666:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1677:4:18",
														"type": ""
													}
												],
												"src": "1585:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1871:224:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1917:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1926:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1929:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1919:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1919:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1919:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1892:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1901:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1888:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1888:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1913:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:32:18"
															},
															"nodeType": "YulIf",
															"src": "1881:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1942:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1971:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1952:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1942:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1990:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2034:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2000:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2000:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1990:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2047:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2074:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2085:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2070:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2070:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2057:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2057:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2047:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1821:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1832:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1844:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1852:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1860:6:18",
														"type": ""
													}
												],
												"src": "1767:328:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2170:110:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2216:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2225:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2228:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2218:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2218:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2218:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2191:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2200:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2187:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2187:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2212:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2183:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2183:32:18"
															},
															"nodeType": "YulIf",
															"src": "2180:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2241:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2264:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2251:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2251:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2241:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2136:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2147:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2159:6:18",
														"type": ""
													}
												],
												"src": "2100:180:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2386:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2396:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2408:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2419:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2404:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2396:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2438:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2449:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2431:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2431:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2431:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2355:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2366:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2377:4:18",
														"type": ""
													}
												],
												"src": "2285:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2554:167:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2600:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2609:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2612:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2602:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2602:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2602:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2575:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2584:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2571:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2571:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2596:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2567:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2567:32:18"
															},
															"nodeType": "YulIf",
															"src": "2564:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2625:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2648:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2635:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2635:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2625:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2667:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2700:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2711:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2696:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2696:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2677:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2677:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2667:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2512:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2523:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2535:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2543:6:18",
														"type": ""
													}
												],
												"src": "2467:254:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2823:87:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2833:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2845:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2856:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2841:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2841:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2833:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2890:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2898:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2886:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2886:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2868:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2868:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2868:36:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2792:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2803:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2814:4:18",
														"type": ""
													}
												],
												"src": "2726:184:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2985:110:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3031:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3040:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3043:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3033:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3033:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3033:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3006:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3015:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3002:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3002:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3027:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2998:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2998:32:18"
															},
															"nodeType": "YulIf",
															"src": "2995:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3056:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3079:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3066:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3066:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3056:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2951:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2962:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2974:6:18",
														"type": ""
													}
												],
												"src": "2915:180:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3170:116:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3216:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3225:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3228:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3218:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3218:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3218:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3191:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3200:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3187:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3187:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3212:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3183:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3183:32:18"
															},
															"nodeType": "YulIf",
															"src": "3180:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3241:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3270:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3251:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3251:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3241:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3136:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3147:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3159:6:18",
														"type": ""
													}
												],
												"src": "3100:186:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3392:102:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3402:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3414:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3425:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3410:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3410:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3402:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3444:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3459:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3475:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3480:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3471:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3471:11:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3484:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3467:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3467:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3455:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3455:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3437:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3437:51:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3437:51:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3361:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3372:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3383:4:18",
														"type": ""
													}
												],
												"src": "3291:203:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3545:114:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3555:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3577:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3564:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3564:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3555:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3637:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3646:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3649:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3639:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3639:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3639:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3606:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3627:5:18"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3620:6:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3620:13:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3613:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3613:21:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3603:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3603:32:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3596:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3596:40:18"
															},
															"nodeType": "YulIf",
															"src": "3593:60:18"
														}
													]
												},
												"name": "abi_decode_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3524:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3535:5:18",
														"type": ""
													}
												],
												"src": "3499:160:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3762:224:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3808:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3817:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3820:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3810:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3810:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3810:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3783:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3792:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3779:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3779:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3804:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3775:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3775:32:18"
															},
															"nodeType": "YulIf",
															"src": "3772:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3833:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3862:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3843:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3843:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3833:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3881:45:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3911:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3922:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3907:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3907:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_bool",
																	"nodeType": "YulIdentifier",
																	"src": "3891:15:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3891:35:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3881:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3935:45:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3965:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3976:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3961:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3961:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_bool",
																	"nodeType": "YulIdentifier",
																	"src": "3945:15:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3945:35:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3935:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_boolt_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3712:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3723:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3735:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3743:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3751:6:18",
														"type": ""
													}
												],
												"src": "3664:322:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4078:161:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4124:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4133:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4136:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4126:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4126:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4126:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4099:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4108:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4095:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4095:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4120:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4091:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4091:32:18"
															},
															"nodeType": "YulIf",
															"src": "4088:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4149:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4172:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4159:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4159:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4149:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4191:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4218:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4229:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4214:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4214:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4201:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4201:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4191:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4036:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4047:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4059:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4067:6:18",
														"type": ""
													}
												],
												"src": "3991:248:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4331:173:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4377:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4386:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4389:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4379:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4379:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4379:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4352:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4361:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4348:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4348:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4373:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4344:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4344:32:18"
															},
															"nodeType": "YulIf",
															"src": "4341:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4402:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4431:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4412:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4412:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4402:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4450:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4483:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4494:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4479:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4479:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4460:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4460:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4450:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4289:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4300:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4312:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4320:6:18",
														"type": ""
													}
												],
												"src": "4244:260:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4626:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4636:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4648:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4659:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4644:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4644:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4636:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4678:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4703:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4696:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4696:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4689:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4689:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4671:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4671:41:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4671:41:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4732:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4743:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4728:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4728:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "4762:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4755:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4755:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4748:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4748:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4721:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4721:50:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4721:50:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4587:9:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4598:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4606:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4617:4:18",
														"type": ""
													}
												],
												"src": "4509:268:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4837:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4847:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4861:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4864:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4857:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4857:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4847:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4878:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4908:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4914:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4904:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4904:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4882:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4955:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4957:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4971:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4979:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4967:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4967:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4957:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4935:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4928:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4928:26:18"
															},
															"nodeType": "YulIf",
															"src": "4925:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5045:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5066:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5073:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5078:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5069:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5069:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5059:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5059:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5059:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5110:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5113:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5103:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5103:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5103:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5138:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5141:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5131:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5131:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5131:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5001:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5024:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5032:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5021:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5021:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4998:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4998:38:18"
															},
															"nodeType": "YulIf",
															"src": "4995:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4817:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4826:6:18",
														"type": ""
													}
												],
												"src": "4782:380:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5341:182:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5358:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5369:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5351:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5351:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5351:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5392:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5403:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5388:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5388:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5408:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5381:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5381:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5381:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5431:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5442:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5427:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5427:18:18"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5447:34:18",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5420:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5420:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5420:62:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5491:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5503:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5514:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5491:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5318:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5332:4:18",
														"type": ""
													}
												],
												"src": "5167:356:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5702:246:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5719:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5730:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5712:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5712:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5712:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5753:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5764:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5749:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5749:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5769:2:18",
																		"type": "",
																		"value": "56"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5742:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5742:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5742:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5792:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5803:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5788:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5788:18:18"
																	},
																	{
																		"hexValue": "4865726f204177616b656e20546f6b656e3a206c697175696469747920666565",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5808:34:18",
																		"type": "",
																		"value": "Hero Awaken Token: liquidity fee"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5781:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5781:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5781:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5863:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5874:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5859:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5859:18:18"
																	},
																	{
																		"hexValue": "206d757374206265747765656e203020616e642031303030",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5879:26:18",
																		"type": "",
																		"value": " must between 0 and 1000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5852:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5852:54:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5852:54:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5915:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5927:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5938:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5923:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5923:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5915:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6a89d7fbb95c9909be81b8b6d1b3f62aeadfedad713314ae6cba8802f9479cb0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5679:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5693:4:18",
														"type": ""
													}
												],
												"src": "5528:420:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6127:237:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6144:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6155:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6137:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6137:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6137:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6178:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6189:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6174:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6174:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6194:2:18",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6167:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6167:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6167:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6217:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6228:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6213:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6213:18:18"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6233:34:18",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6206:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6206:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6206:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6288:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6299:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6284:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6284:18:18"
																	},
																	{
																		"hexValue": "20726f6c657320666f722073656c66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6304:17:18",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6277:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6277:45:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6277:45:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6331:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6343:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6354:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6339:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6339:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6331:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6104:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6118:4:18",
														"type": ""
													}
												],
												"src": "5953:411:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6401:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6418:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6425:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6430:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6421:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6421:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6411:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6411:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6411:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6458:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6461:4:18",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6451:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6451:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6451:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6482:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6485:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6475:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6475:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6475:15:18"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6369:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6549:80:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6576:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6578:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6578:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6578:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6565:1:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6572:1:18"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6568:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6568:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6562:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6562:13:18"
															},
															"nodeType": "YulIf",
															"src": "6559:39:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6607:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6618:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6621:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6614:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6614:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6607:3:18"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6532:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6535:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6541:3:18",
														"type": ""
													}
												],
												"src": "6501:128:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6808:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6825:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6836:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6818:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6818:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6818:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6859:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6870:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6855:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6855:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6875:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6848:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6848:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6848:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6898:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6909:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6894:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6894:18:18"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6914:34:18",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6887:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6887:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6887:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6969:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6980:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6965:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6965:18:18"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6985:7:18",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6958:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6958:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6958:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7002:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7014:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7025:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7010:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7010:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7002:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6785:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6799:4:18",
														"type": ""
													}
												],
												"src": "6634:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7214:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7231:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7242:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7224:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7224:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7224:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7265:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7276:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7261:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7261:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7281:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7254:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7254:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7254:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7304:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7315:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7300:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7300:18:18"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7320:34:18",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7293:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7293:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7293:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7375:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7386:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7371:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7371:18:18"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7391:8:18",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7364:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7364:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7364:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7421:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7432:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7417:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7417:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7409:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7191:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7205:4:18",
														"type": ""
													}
												],
												"src": "7040:402:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7621:232:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7638:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7649:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7631:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7631:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7631:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7672:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7683:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7668:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7668:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7688:2:18",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7661:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7661:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7661:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7711:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7722:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7707:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7707:18:18"
																	},
																	{
																		"hexValue": "45524332305061757361626c653a20746f6b656e207472616e73666572207768",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7727:34:18",
																		"type": "",
																		"value": "ERC20Pausable: token transfer wh"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7700:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7700:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7700:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7782:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7793:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7778:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7778:18:18"
																	},
																	{
																		"hexValue": "696c6520706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7798:12:18",
																		"type": "",
																		"value": "ile paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7771:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7771:40:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7771:40:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7820:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7832:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7843:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7828:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7828:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7820:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7598:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7612:4:18",
														"type": ""
													}
												],
												"src": "7447:406:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8032:226:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8049:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8060:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8042:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8042:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8042:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8083:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8094:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8079:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8079:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8099:2:18",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8072:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8072:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8072:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8122:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8133:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8118:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8118:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8138:34:18",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8111:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8111:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8111:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8193:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8204:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8189:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8189:18:18"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8209:6:18",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8182:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8182:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8182:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8225:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8237:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8248:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8233:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8233:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8225:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8009:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8023:4:18",
														"type": ""
													}
												],
												"src": "7858:400:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8437:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8454:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8465:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8447:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8447:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8447:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8488:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8499:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8484:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8484:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8504:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8477:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8477:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8477:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8527:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8538:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8523:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8523:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8543:34:18",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8516:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8516:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8516:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8598:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8609:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8594:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8594:18:18"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8614:4:18",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8587:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8587:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8587:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8628:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8640:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8651:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8636:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8636:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8628:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8414:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8428:4:18",
														"type": ""
													}
												],
												"src": "8263:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8840:179:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8857:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8868:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8850:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8850:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8850:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8891:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8902:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8887:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8887:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8907:2:18",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8880:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8880:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8880:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8930:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8941:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8926:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8926:18:18"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8946:31:18",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8919:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8919:59:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8919:59:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8987:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8999:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9010:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8995:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8995:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8987:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8817:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8831:4:18",
														"type": ""
													}
												],
												"src": "8666:353:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9073:76:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9095:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9097:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9097:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9097:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9089:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9092:1:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9086:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9086:8:18"
															},
															"nodeType": "YulIf",
															"src": "9083:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9126:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9138:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9141:1:18"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "9134:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9134:9:18"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "9126:4:18"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9055:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9058:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "9064:4:18",
														"type": ""
													}
												],
												"src": "9024:125:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9543:397:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9560:3:18"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9565:25:18",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9553:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9553:38:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9553:38:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9600:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9620:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9614:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9614:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9604:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9662:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9670:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9658:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9658:17:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "9681:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9686:2:18",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9677:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9677:12:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9691:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9636:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9636:62:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9707:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9721:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9726:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9717:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9717:16:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "9711:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9753:2:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9757:2:18",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9749:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9749:11:18"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9762:19:18",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9742:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9742:40:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9742:40:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9791:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9813:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9807:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9807:13:18"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "9795:8:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "9855:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9863:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9851:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9851:17:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9874:2:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9878:2:18",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9870:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9870:11:18"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "9883:8:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9829:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9829:63:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9829:63:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9901:33:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9916:2:18"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "9920:8:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9912:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9912:17:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9931:2:18",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9908:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9908:26:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9901:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9511:3:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9516:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9524:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9535:3:18",
														"type": ""
													}
												],
												"src": "9154:786:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10119:223:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10136:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10147:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10129:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10129:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10129:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10170:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10181:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10166:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10166:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10186:2:18",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10159:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10159:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10159:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10209:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10220:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10205:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10205:18:18"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10225:34:18",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10198:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10198:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10198:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10280:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10291:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10276:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10276:18:18"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10296:3:18",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10269:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10269:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10269:31:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10309:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10321:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10332:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10317:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10317:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10309:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10096:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10110:4:18",
														"type": ""
													}
												],
												"src": "9945:397:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10521:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10538:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10549:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10531:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10531:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10531:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10572:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10583:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10568:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10568:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10588:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10561:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10561:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10561:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10611:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10622:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10607:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10607:18:18"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10627:34:18",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10600:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10600:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10600:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10682:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10693:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10678:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10678:18:18"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10698:4:18",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10671:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10671:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10671:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10712:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10724:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10735:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10720:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10720:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10712:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10498:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10512:4:18",
														"type": ""
													}
												],
												"src": "10347:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10924:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10941:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10952:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10934:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10934:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10934:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10975:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10986:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10971:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10971:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10991:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10964:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10964:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10964:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11014:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11025:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11010:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11010:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11030:34:18",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11003:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11003:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11003:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11085:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11096:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11081:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11081:18:18"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11101:7:18",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11074:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11074:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11074:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11118:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11130:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11141:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11126:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11126:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11118:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10901:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10915:4:18",
														"type": ""
													}
												],
												"src": "10750:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11330:225:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11347:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11358:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11340:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11340:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11340:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11381:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11392:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11377:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11377:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11397:2:18",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11370:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11370:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11370:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11420:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11431:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11416:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11416:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11436:34:18",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11409:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11409:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11409:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11491:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11502:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11487:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11487:18:18"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11507:5:18",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11480:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11480:33:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11480:33:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11522:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11534:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11545:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11530:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11530:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11522:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11307:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11321:4:18",
														"type": ""
													}
												],
												"src": "11156:399:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11734:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11751:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11762:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11744:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11744:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11744:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11785:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11796:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11781:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11781:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11801:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11774:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11774:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11774:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11824:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11835:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11820:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11820:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11840:34:18",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11813:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11813:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11813:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11895:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11906:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11891:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11891:18:18"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11911:8:18",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11884:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11884:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11884:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11929:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11941:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11952:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11937:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11937:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11929:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11711:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11725:4:18",
														"type": ""
													}
												],
												"src": "11560:402:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12019:116:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12078:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12080:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12080:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12080:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12050:1:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "12043:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12043:9:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12036:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12036:17:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "12058:1:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12069:1:18",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "12065:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12065:6:18"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12073:1:18"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "12061:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12061:14:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "12055:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12055:21:18"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12032:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12032:45:18"
															},
															"nodeType": "YulIf",
															"src": "12029:71:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12109:20:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12124:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12127:1:18"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "12120:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:9:18"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "12109:7:18"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11998:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12001:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "12007:7:18",
														"type": ""
													}
												],
												"src": "11967:168:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12186:171:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12217:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12238:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12245:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12250:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "12241:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12241:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12231:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12231:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12231:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12282:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12285:4:18",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12275:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12275:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12275:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12310:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12313:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12303:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12303:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12303:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12206:1:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12199:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12199:9:18"
															},
															"nodeType": "YulIf",
															"src": "12196:132:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12337:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12346:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12349:1:18"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "12342:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12342:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "12337:1:18"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12171:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12174:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "12180:1:18",
														"type": ""
													}
												],
												"src": "12140:217:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12394:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12411:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12418:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12423:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "12414:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12414:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12404:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12404:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12404:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12451:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12454:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12444:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12444:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12444:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12475:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12478:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12468:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12468:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12468:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "12362:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12526:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12543:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12550:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12555:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "12546:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12546:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12536:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12536:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12536:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12583:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12586:4:18",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12576:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12576:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12576:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12607:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12610:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12600:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12600:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12600:15:18"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "12494:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12673:89:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12700:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12702:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12702:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12702:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12693:5:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12686:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12686:13:18"
															},
															"nodeType": "YulIf",
															"src": "12683:39:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12731:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12742:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12753:1:18",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12749:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12749:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12738:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12738:18:18"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "12731:3:18"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12655:5:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "12665:3:18",
														"type": ""
													}
												],
												"src": "12626:136:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12941:182:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12958:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12969:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12951:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12951:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12951:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12992:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13003:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12988:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12988:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13008:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12981:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12981:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12981:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13031:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13042:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13027:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13027:18:18"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13047:34:18",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13020:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13020:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13020:62:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13091:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13103:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13114:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13099:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13099:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13091:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12918:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12932:4:18",
														"type": ""
													}
												],
												"src": "12767:356:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13302:236:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13319:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13330:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13312:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13312:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13312:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13353:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13364:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13349:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13349:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13369:2:18",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13342:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13342:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13342:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13392:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13403:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13388:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13388:18:18"
																	},
																	{
																		"hexValue": "4865726f204177616b656e20546f6b656e3a207468652073656e646572206861",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13408:34:18",
																		"type": "",
																		"value": "Hero Awaken Token: the sender ha"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13381:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13381:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13381:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13463:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13474:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13459:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13459:18:18"
																	},
																	{
																		"hexValue": "73206265656e20626c6f636b6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13479:16:18",
																		"type": "",
																		"value": "s been blocked"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13452:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13452:44:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13452:44:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13505:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13517:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13528:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13513:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13513:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13505:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13279:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13293:4:18",
														"type": ""
													}
												],
												"src": "13128:410:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13717:238:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13734:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13745:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13727:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13727:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13727:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13768:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13779:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13764:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13764:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13784:2:18",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13757:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13757:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13757:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13807:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13818:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13803:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13803:18:18"
																	},
																	{
																		"hexValue": "4865726f204177616b656e20546f6b656e3a2074686520726563656976657220",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13823:34:18",
																		"type": "",
																		"value": "Hero Awaken Token: the receiver "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13796:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13796:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13796:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13878:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13889:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13874:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13874:18:18"
																	},
																	{
																		"hexValue": "686173206265656e20626c6f636b6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13894:18:18",
																		"type": "",
																		"value": "has been blocked"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13867:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13867:46:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13867:46:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13922:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13934:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13945:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13930:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13930:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13922:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13694:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13708:4:18",
														"type": ""
													}
												],
												"src": "13543:412:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13992:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14009:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14016:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14021:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14012:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14012:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14002:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14002:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14002:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14049:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14052:4:18",
																		"type": "",
																		"value": "0x31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14042:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14042:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14042:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14073:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14076:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14066:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14066:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14066:15:18"
														}
													]
												},
												"name": "panic_error_0x31",
												"nodeType": "YulFunctionDefinition",
												"src": "13960:127:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_boolt_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_bool(add(headStart, 32))\n        value2 := abi_decode_bool(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6a89d7fbb95c9909be81b8b6d1b3f62aeadfedad713314ae6cba8802f9479cb0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"Hero Awaken Token: liquidity fee\")\n        mstore(add(headStart, 96), \" must between 0 and 1000\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC20Pausable: token transfer wh\")\n        mstore(add(headStart, 96), \"ile paused\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Hero Awaken Token: the sender ha\")\n        mstore(add(headStart, 96), \"s been blocked\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Hero Awaken Token: the receiver \")\n        mstore(add(headStart, 96), \"has been blocked\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061021c5760003560e01c80638bea933411610125578063a9059cbb116100ad578063dd62ed3e1161007c578063dd62ed3e1461048a578063e5962195146104c3578063e63ab1e914610517578063eefb9be21461053e578063f2fde38b1461055157600080fd5b8063a9059cbb1461042a578063ca15c8731461043d578063d539139314610450578063d547741f1461047757600080fd5b806395d89b41116100f457806395d89b41146103ec57806398118cb4146103f4578063a128471f146103fc578063a217fddf1461040f578063a457c2d71461041757600080fd5b80638bea9334146103b35780638da5cb5b1461039d5780639010d07c146103c657806391d14854146103d957600080fd5b806336568abe116101a857806370a082311161017757806370a0823114610334578063715018a61461035d57806379cc6790146103655780637f257c3e14610378578063893d20e81461039d57600080fd5b806336568abe146102f0578063395093511461030357806342966c68146103165780635c975abb1461032957600080fd5b806323b872dd116101ef57806323b872dd14610283578063248a9ca3146102965780632f2ff15d146102b9578063313ce567146102ce578063357bf15c146102dd57600080fd5b806301ffc9a71461022157806306fdde0314610249578063095ea7b31461025e57806318160ddd14610271575b600080fd5b61023461022f3660046117c2565b610564565b60405190151581526020015b60405180910390f35b61025161058f565b6040516102409190611818565b61023461026c366004611867565b610621565b6004545b604051908152602001610240565b610234610291366004611891565b610639565b6102756102a43660046118cd565b60009081526020819052604090206001015490565b6102cc6102c73660046118e6565b61065d565b005b60405160128152602001610240565b6102cc6102eb3660046118cd565b610688565b6102cc6102fe3660046118e6565b61073e565b610234610311366004611867565b6107bc565b6102cc6103243660046118cd565b6107fb565b60075460ff16610234565b610275610342366004611912565b6001600160a01b031660009081526002602052604090205490565b6102cc610808565b6102cc610373366004611867565b610844565b6009546001600160a01b03165b6040516001600160a01b039091168152602001610240565b60075461010090046001600160a01b0316610385565b6102cc6103c136600461193d565b610859565b6103856103d4366004611980565b6108cb565b6102346103e73660046118e6565b6108ea565b610251610913565b600854610275565b6102cc61040a366004611912565b610922565b610275600081565b610234610425366004611867565b610974565b610234610438366004611867565b610a06565b61027561044b3660046118cd565b610a14565b6102757f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102cc6104853660046118e6565b610a2b565b6102756104983660046119a2565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6105006104d1366004611912565b6001600160a01b03166000908152600a6020908152604080832054600b9092529091205460ff91821692911690565b604080519215158352901515602083015201610240565b6102757f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6102cc61054c366004611912565b610a51565b6102cc61055f366004611912565b610aa5565b60006001600160e01b03198216635a05180f60e01b1480610589575061058982610c42565b92915050565b60606005805461059e906119cc565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca906119cc565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050905090565b60003361062f818585610c77565b5060019392505050565b600033610647858285610d9b565b610652858585610e2d565b506001949350505050565b6000828152602081905260409020600101546106798133610ed0565b6106838383610f34565b505050565b6007546001600160a01b036101009091041633146106c15760405162461bcd60e51b81526004016106b890611a06565b60405180910390fd5b6103e88111156107395760405162461bcd60e51b815260206004820152603860248201527f4865726f204177616b656e20546f6b656e3a206c69717569646974792066656560448201527f206d757374206265747765656e203020616e642031303030000000000000000060648201526084016106b8565b600855565b6001600160a01b03811633146107ae5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b8565b6107b88282610f56565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061062f90829086906107f6908790611a51565b610c77565b6108053382610f78565b50565b6007546001600160a01b036101009091041633146108385760405162461bcd60e51b81526004016106b890611a06565b61084260006110d2565b565b61084f823383610d9b565b6107b88282610f78565b6007546001600160a01b036101009091041633146108895760405162461bcd60e51b81526004016106b890611a06565b6001600160a01b039092166000908152600a60209081526040808320805494151560ff19958616179055600b9091529020805492151592909116919091179055565b60008281526001602052604081206108e3908361112c565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606006805461059e906119cc565b6007546001600160a01b036101009091041633146109525760405162461bcd60e51b81526004016106b890611a06565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156109f95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106b8565b6106528286868403610c77565b60003361062f818585610e2d565b600081815260016020526040812061058990611138565b600082815260208190526040902060010154610a478133610ed0565b6106838383610f56565b6007546001600160a01b03610100909104163314610a815760405162461bcd60e51b81526004016106b890611a06565b6001600160a01b03166000908152600c60205260409020805460ff19166001179055565b6007546001600160a01b03610100909104163314610ad55760405162461bcd60e51b81526004016106b890611a06565b6001600160a01b038116610b3a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b8565b610805816110d2565b610b4d82826108ea565b6107b8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006108e3836001600160a01b038416611142565b60075460ff16156106835760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016106b8565b60006001600160e01b03198216637965db0b60e01b148061058957506301ffc9a760e01b6001600160e01b0319831614610589565b6001600160a01b038316610cd95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106b8565b6001600160a01b038216610d3a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106b8565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600360209081526040808320938616835292905220546000198114610e275781811015610e1a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106b8565b610e278484848403610c77565b50505050565b6001600160a01b0383166000908152600c602052604090205460ff1680610e6c57506001600160a01b0382166000908152600c602052604090205460ff165b15610e7c57610e7c838383611191565b6000610e9f6103e8610e996008548561136a90919063ffffffff16565b90611376565b9050610eab8183611a69565b9150610eb8848484611191565b600954610e279085906001600160a01b031683611191565b610eda82826108ea565b6107b857610ef2816001600160a01b03166014611382565b610efd836020611382565b604051602001610f0e929190611a80565b60408051601f198184030181529082905262461bcd60e51b82526106b891600401611818565b610f3e8282610b43565b60008281526001602052604090206106839082610bc7565b610f60828261151e565b60008281526001602052604090206106839082611583565b6001600160a01b038216610fd85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106b8565b610fe482600083611598565b6001600160a01b038216600090815260026020526040902054818110156110585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106b8565b6001600160a01b0383166000908152600260205260408120838303905560048054849290611087908490611a69565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108e383836116a5565b6000610589825490565b600081815260018301602052604081205461118957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610589565b506000610589565b6001600160a01b0383166111f55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106b8565b6001600160a01b0382166112575760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106b8565b611262838383611598565b6001600160a01b038316600090815260026020526040902054818110156112da5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106b8565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611311908490611a51565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161135d91815260200190565b60405180910390a3610e27565b60006108e38284611af5565b60006108e38284611b14565b60606000611391836002611af5565b61139c906002611a51565b67ffffffffffffffff8111156113b4576113b4611b36565b6040519080825280601f01601f1916602001820160405280156113de576020820181803683370190505b509050600360fc1b816000815181106113f9576113f9611b4c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061142857611428611b4c565b60200101906001600160f81b031916908160001a905350600061144c846002611af5565b611457906001611a51565b90505b60018111156114cf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061148b5761148b611b4c565b1a60f81b8282815181106114a1576114a1611b4c565b60200101906001600160f81b031916908160001a90535060049490941c936114c881611b62565b905061145a565b5083156108e35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b8565b61152882826108ea565b156107b8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108e3836001600160a01b0384166116cf565b6001600160a01b0383166000908152600a602052604090205460ff16156116185760405162461bcd60e51b815260206004820152602e60248201527f4865726f204177616b656e20546f6b656e3a207468652073656e64657220686160448201526d1cc81899595b88189b1bd8dad95960921b60648201526084016106b8565b6001600160a01b0382166000908152600b602052604090205460ff161561169a5760405162461bcd60e51b815260206004820152603060248201527f4865726f204177616b656e20546f6b656e3a207468652072656365697665722060448201526f1a185cc81899595b88189b1bd8dad95960821b60648201526084016106b8565b610683838383610bdc565b60008260000182815481106116bc576116bc611b4c565b9060005260206000200154905092915050565b600081815260018301602052604081205480156117b85760006116f3600183611a69565b855490915060009061170790600190611a69565b905081811461176c57600086600001828154811061172757611727611b4c565b906000526020600020015490508087600001848154811061174a5761174a611b4c565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061177d5761177d611b79565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610589565b6000915050610589565b6000602082840312156117d457600080fd5b81356001600160e01b0319811681146108e357600080fd5b60005b838110156118075781810151838201526020016117ef565b83811115610e275750506000910152565b60208152600082518060208401526118378160408501602087016117ec565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461186257600080fd5b919050565b6000806040838503121561187a57600080fd5b6118838361184b565b946020939093013593505050565b6000806000606084860312156118a657600080fd5b6118af8461184b565b92506118bd6020850161184b565b9150604084013590509250925092565b6000602082840312156118df57600080fd5b5035919050565b600080604083850312156118f957600080fd5b823591506119096020840161184b565b90509250929050565b60006020828403121561192457600080fd5b6108e38261184b565b8035801515811461186257600080fd5b60008060006060848603121561195257600080fd5b61195b8461184b565b92506119696020850161192d565b91506119776040850161192d565b90509250925092565b6000806040838503121561199357600080fd5b50508035926020909101359150565b600080604083850312156119b557600080fd5b6119be8361184b565b91506119096020840161184b565b600181811c908216806119e057607f821691505b602082108103611a0057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611a6457611a64611a3b565b500190565b600082821015611a7b57611a7b611a3b565b500390565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ab88160178501602088016117ec565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611ae98160288401602088016117ec565b01602801949350505050565b6000816000190483118215151615611b0f57611b0f611a3b565b500290565b600082611b3157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611b7157611b71611a3b565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208c07753cef65e25fc61f05f734b08d9500ff824f6de0adeec0d63e93eef198d664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BEA9334 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0xE5962195 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xEEFB9BE2 EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x98118CB4 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0xA128471F EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BEA9334 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x7F257C3E EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x357BF15C EQ PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x271 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x234 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x17C2 JUMP JUMPDEST PUSH2 0x564 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x1818 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x73E JUMP JUMPDEST PUSH2 0x234 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x324 CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x234 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x808 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x844 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x385 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x193D JUMP JUMPDEST PUSH2 0x859 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1980 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST PUSH2 0x234 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x251 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x275 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST PUSH2 0x275 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x974 JUMP JUMPDEST PUSH2 0x234 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0xA06 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x18CD JUMP JUMPDEST PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x275 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x275 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x500 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x275 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0xA51 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x55F CALLDATASIZE PUSH1 0x4 PUSH2 0x1912 JUMP JUMPDEST PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x589 JUMPI POP PUSH2 0x589 DUP3 PUSH2 0xC42 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x59E SWAP1 PUSH2 0x19CC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5CA SWAP1 PUSH2 0x19CC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x617 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5EC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x617 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5FA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x62F DUP2 DUP6 DUP6 PUSH2 0xC77 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x647 DUP6 DUP3 DUP6 PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x652 DUP6 DUP6 DUP6 PUSH2 0xE2D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x679 DUP2 CALLER PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 PUSH2 0xF34 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A206C697175696469747920666565 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D757374206265747765656E203020616E6420313030300000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x7AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x7B8 DUP3 DUP3 PUSH2 0xF56 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x62F SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x7F6 SWAP1 DUP8 SWAP1 PUSH2 0x1A51 JUMP JUMPDEST PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x805 CALLER DUP3 PUSH2 0xF78 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x838 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH2 0x842 PUSH1 0x0 PUSH2 0x10D2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x84F DUP3 CALLER DUP4 PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x7B8 DUP3 DUP3 PUSH2 0xF78 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP5 ISZERO ISZERO PUSH1 0xFF NOT SWAP6 DUP7 AND OR SWAP1 SSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x8E3 SWAP1 DUP4 PUSH2 0x112C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x59E SWAP1 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x952 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x652 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x62F DUP2 DUP6 DUP6 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x589 SWAP1 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA47 DUP2 CALLER PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xA81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xAD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B8 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x805 DUP2 PUSH2 0x10D2 JUMP JUMPDEST PUSH2 0xB4D DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB83 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1142 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x683 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1A5B19481C185D5CD959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x589 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE27 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xE27 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC77 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0xE6C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0xE7C JUMPI PUSH2 0xE7C DUP4 DUP4 DUP4 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9F PUSH2 0x3E8 PUSH2 0xE99 PUSH1 0x8 SLOAD DUP6 PUSH2 0x136A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1376 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAB DUP2 DUP4 PUSH2 0x1A69 JUMP JUMPDEST SWAP2 POP PUSH2 0xEB8 DUP5 DUP5 DUP5 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0xE27 SWAP1 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1191 JUMP JUMPDEST PUSH2 0xEDA DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x7B8 JUMPI PUSH2 0xEF2 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x1382 JUMP JUMPDEST PUSH2 0xEFD DUP4 PUSH1 0x20 PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF0E SWAP3 SWAP2 SWAP1 PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6B8 SWAP2 PUSH1 0x4 ADD PUSH2 0x1818 JUMP JUMPDEST PUSH2 0xF3E DUP3 DUP3 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x683 SWAP1 DUP3 PUSH2 0xBC7 JUMP JUMPDEST PUSH2 0xF60 DUP3 DUP3 PUSH2 0x151E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x683 SWAP1 DUP3 PUSH2 0x1583 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xFE4 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1087 SWAP1 DUP5 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 DUP4 PUSH2 0x16A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x589 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1189 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x589 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x11F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x1262 DUP4 DUP4 DUP4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1311 SWAP1 DUP5 SWAP1 PUSH2 0x1A51 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x135D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP3 DUP5 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP3 DUP5 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1391 DUP4 PUSH1 0x2 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x139C SWAP1 PUSH1 0x2 PUSH2 0x1A51 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13B4 JUMPI PUSH2 0x13B4 PUSH2 0x1B36 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13DE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13F9 JUMPI PUSH2 0x13F9 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1428 JUMPI PUSH2 0x1428 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x144C DUP5 PUSH1 0x2 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x1457 SWAP1 PUSH1 0x1 PUSH2 0x1A51 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x14CF JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1B4C JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14A1 JUMPI PUSH2 0x14A1 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x14C8 DUP2 PUSH2 0x1B62 JUMP JUMPDEST SWAP1 POP PUSH2 0x145A JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x1528 DUP3 DUP3 PUSH2 0x8EA JUMP JUMPDEST ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1618 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A207468652073656E646572206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1CC81899595B88189B1BD8DAD959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x169A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4865726F204177616B656E20546F6B656E3A2074686520726563656976657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1A185CC81899595B88189B1BD8DAD959 PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x683 DUP4 DUP4 DUP4 PUSH2 0xBDC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16BC JUMPI PUSH2 0x16BC PUSH2 0x1B4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x17B8 JUMPI PUSH1 0x0 PUSH2 0x16F3 PUSH1 0x1 DUP4 PUSH2 0x1A69 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1707 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x176C JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1727 JUMPI PUSH2 0x1727 PUSH2 0x1B4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x174A JUMPI PUSH2 0x174A PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x177D JUMPI PUSH2 0x177D PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1807 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17EF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE27 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1837 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x17EC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1883 DUP4 PUSH2 0x184B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18AF DUP5 PUSH2 0x184B JUMP JUMPDEST SWAP3 POP PUSH2 0x18BD PUSH1 0x20 DUP6 ADD PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1909 PUSH1 0x20 DUP5 ADD PUSH2 0x184B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8E3 DUP3 PUSH2 0x184B JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x195B DUP5 PUSH2 0x184B JUMP JUMPDEST SWAP3 POP PUSH2 0x1969 PUSH1 0x20 DUP6 ADD PUSH2 0x192D JUMP JUMPDEST SWAP2 POP PUSH2 0x1977 PUSH1 0x40 DUP6 ADD PUSH2 0x192D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1993 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19BE DUP4 PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH2 0x1909 PUSH1 0x20 DUP5 ADD PUSH2 0x184B JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x19E0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A00 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1A64 JUMPI PUSH2 0x1A64 PUSH2 0x1A3B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1A7B JUMPI PUSH2 0x1A7B PUSH2 0x1A3B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1AB8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17EC JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1AE9 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17EC JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1B0F JUMPI PUSH2 0x1B0F PUSH2 0x1A3B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B31 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1B71 JUMPI PUSH2 0x1B71 PUSH2 0x1A3B JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 SMOD PUSH22 0x3CEF65E25FC61F05F734B08D9500FF824F6DE0ADEEC0 0xD6 RETURNDATACOPY SWAP4 0xEE CALL SWAP9 0xD6 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "510:3530:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;634:212:1;;;;;;:::i;:::-;;:::i;:::-;;;470:14:18;;463:22;445:41;;433:2;418:18;634:212:1;;;;;;;;2156:98:6;;;:::i;:::-;;;;;;;:::i;4433:197::-;;;;;;:::i;:::-;;:::i;3244:106::-;3331:12;;3244:106;;;1731:25:18;;;1719:2;1704:18;3244:106:6;1585:177:18;5192:286:6;;;;;;:::i;:::-;;:::i;4008:129:0:-;;;;;;:::i;:::-;4082:7;4108:12;;;;;;;;;;:22;;;;4008:129;4387:145;;;;;;:::i;:::-;;:::i;:::-;;3093:91:6;;;3175:2;2868:36:18;;2856:2;2841:18;3093:91:6;2726:184:18;2656:235:17;;;;;;:::i;:::-;;:::i;5404:214:0:-;;;;;;:::i;:::-;;:::i;5873:236:6:-;;;;;;:::i;:::-;;:::i;578:89:8:-;;;;;;:::i;:::-;;:::i;1098:84:5:-;1168:7;;;;1098:84;;3408:125:6;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:6;3482:7;3508:18;;;:9;:18;;;;;;;3408:125;1668:101:4;;;:::i;973:161:8:-;;;;;;:::i;:::-;;:::i;2183:101:17:-;2260:16;;-1:-1:-1;;;;;2260:16:17;2183:101;;;-1:-1:-1;;;;;3455:32:18;;;3437:51;;3425:2;3410:18;2183:101:17;3291:203:18;1987:85:17;1108:6:4;;;;;-1:-1:-1;;;;;1108:6:4;1987:85:17;;2436:212;;;;;;:::i;:::-;;:::i;1431:151:1:-;;;;;;:::i;:::-;;:::i;2909:145:0:-;;;;;;:::i;:::-;;:::i;2367:102:6:-;;;:::i;2080:95:17:-;2154:13;;2080:95;;2899:105;;;;;;:::i;:::-;;:::i;2027:49:0:-;;2072:4;2027:49;;6596:429:6;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;1750:140:1:-;;;;;;:::i;:::-;;:::i;647:62:17:-;;685:24;647:62;;4766:147:0;;;;;;:::i;:::-;;:::i;3976:149:6:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4091:18:6;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149;2292:136:17;;;;;;:::i;:::-;-1:-1:-1;;;;;2377:19:17;2346:4;2377:19;;;:13;:19;;;;;;;;;2398:15;:21;;;;;;;2377:19;;;;;2398:21;;;2292:136;;;;;4696:14:18;;4689:22;4671:41;;4755:14;;4748:22;4743:2;4728:18;;4721:50;4644:18;2292:136:17;4509:268:18;716:62:17;;754:24;716:62;;3012:104;;;;;;:::i;:::-;;:::i;1918:198:4:-;;;;;;:::i;:::-;;:::i;634:212:1:-;719:4;-1:-1:-1;;;;;;742:57:1;;-1:-1:-1;;;742:57:1;;:97;;;803:36;827:11;803:23;:36::i;:::-;735:104;634:212;-1:-1:-1;;634:212:1:o;2156:98:6:-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:11;4570:32:6;719:10:11;4586:7:6;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:6;;4433:197;-1:-1:-1;;;4433:197:6:o;5192:286::-;5319:4;719:10:11;5375:38:6;5391:4;719:10:11;5406:6:6;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:6;;5192:286;-1:-1:-1;;;;5192:286:6:o;4387:145:0:-;4082:7;4108:12;;;;;;;;;;:22;;;2505:30;2516:4;719:10:11;2505::0;:30::i;:::-;4500:25:::1;4511:4;4517:7;4500:10;:25::i;:::-;4387:145:::0;;;:::o;2656:235:17:-;1108:6:4;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;;;;;;;;;2763:4:17::1;2756:3;:11;;2722:129;;;::::0;-1:-1:-1;;;2722:129:17;;5730:2:18;2722:129:17::1;::::0;::::1;5712:21:18::0;5769:2;5749:18;;;5742:30;5808:34;5788:18;;;5781:62;5879:26;5859:18;;;5852:54;5923:19;;2722:129:17::1;5528:420:18::0;2722:129:17::1;2864:13;:19:::0;2656:235::o;5404:214:0:-;-1:-1:-1;;;;;5499:23:0;;719:10:11;5499:23:0;5491:83;;;;-1:-1:-1;;;5491:83:0;;6155:2:18;5491:83:0;;;6137:21:18;6194:2;6174:18;;;6167:30;6233:34;6213:18;;;6206:62;-1:-1:-1;;;6284:18:18;;;6277:45;6339:19;;5491:83:0;5953:411:18;5491:83:0;5585:26;5597:4;5603:7;5585:11;:26::i;:::-;5404:214;;:::o;5873:236:6:-;719:10:11;5961:4:6;6040:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6040:27:6;;;;;;;;;;5961:4;;719:10:11;6015:66:6;;719:10:11;;6040:27:6;;:40;;6070:10;;6040:40;:::i;:::-;6015:8;:66::i;578:89:8:-;633:27;719:10:11;653:6:8;633:5;:27::i;:::-;578:89;:::o;1668:101:4:-;1108:6;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;973:161:8:-;1049:46;1065:7;719:10:11;1088:6:8;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;2436:212:17:-;1108:6:4;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;2564:19:17;;::::1;;::::0;;;:13:::1;:19;::::0;;;;;;;:30;;;::::1;;-1:-1:-1::0;;2564:30:17;;::::1;;::::0;;2605:15:::1;:21:::0;;;;;:35;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;2436:212::o;1431:151:1:-;1521:7;1547:18;;;:12;:18;;;;;:28;;1569:5;1547:21;:28::i;:::-;1540:35;1431:151;-1:-1:-1;;;1431:151:1:o;2909:145:0:-;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:0;;;;;;;;;;;;;;;2909:145::o;2367:102:6:-;2423:13;2455:7;2448:14;;;;;:::i;2899:105:17:-;1108:6:4;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;2971:16:17::1;:25:::0;;-1:-1:-1;;;;;;2971:25:17::1;-1:-1:-1::0;;;;;2971:25:17;;;::::1;::::0;;;::::1;::::0;;2899:105::o;6596:429:6:-;719:10:11;6689:4:6;6770:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6770:27:6;;;;;;;;;;6689:4;;719:10:11;6815:35:6;;;;6807:85;;;;-1:-1:-1;;;6807:85:6;;6836:2:18;6807:85:6;;;6818:21:18;6875:2;6855:18;;;6848:30;6914:34;6894:18;;;6887:62;-1:-1:-1;;;6965:18:18;;;6958:35;7010:19;;6807:85:6;6634:401:18;6807:85:6;6926:60;6935:5;6942:7;6970:15;6951:16;:34;6926:8;:60::i;3729:189::-;3808:4;719:10:11;3862:28:6;719:10:11;3879:2:6;3883:6;3862:9;:28::i;1750:140:1:-;1830:7;1856:18;;;:12;:18;;;;;:27;;:25;:27::i;4766:147:0:-;4082:7;4108:12;;;;;;;;;;:22;;;2505:30;2516:4;719:10:11;2505::0;:30::i;:::-;4880:26:::1;4892:4;4898:7;4880:11;:26::i;3012:104:17:-:0;1108:6:4;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;3080:21:17::1;;::::0;;;:15:::1;:21;::::0;;;;:28;;-1:-1:-1;;3080:28:17::1;3104:4;3080:28;::::0;;3012:104::o;1918:198:4:-;1108:6;;-1:-1:-1;;;;;1108:6:4;;;;;719:10:11;1248:23:4;1240:68;;;;-1:-1:-1;;;1240:68:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:4;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:4;;7242:2:18;1998:73:4::1;::::0;::::1;7224:21:18::0;7281:2;7261:18;;;7254:30;7320:34;7300:18;;;7293:62;-1:-1:-1;;;7371:18:18;;;7364:36;7417:19;;1998:73:4::1;7040:402:18::0;1998:73:4::1;2081:28;2100:8;2081:18;:28::i;6861:233:0:-:0;6944:22;6952:4;6958:7;6944;:22::i;:::-;6939:149;;6982:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6982:29:0;;;;;;;;;:36;;-1:-1:-1;;6982:36:0;7014:4;6982:36;;;7064:12;719:10:11;;640:96;7064:12:0;-1:-1:-1;;;;;7037:40:0;7055:7;-1:-1:-1;;;;;7037:40:0;7049:4;7037:40;;;;;;;;;;6861:233;;:::o;7612:150:16:-;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:16;;7705:4;:50::i;665:264:9:-;1168:7:5;;;;866:9:9;858:64;;;;-1:-1:-1;;;858:64:9;;7649:2:18;858:64:9;;;7631:21:18;7688:2;7668:18;;;7661:30;7727:34;7707:18;;;7700:62;-1:-1:-1;;;7778:18:18;;;7771:40;7828:19;;858:64:9;7447:406:18;2620:202:0;2705:4;-1:-1:-1;;;;;;2728:47:0;;-1:-1:-1;;;2728:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:13;;;2779:36:0;829:155:13;10123:370:6;-1:-1:-1;;;;;10254:19:6;;10246:68;;;;-1:-1:-1;;;10246:68:6;;8060:2:18;10246:68:6;;;8042:21:18;8099:2;8079:18;;;8072:30;8138:34;8118:18;;;8111:62;-1:-1:-1;;;8189:18:18;;;8182:34;8233:19;;10246:68:6;7858:400:18;10246:68:6;-1:-1:-1;;;;;10332:21:6;;10324:68;;;;-1:-1:-1;;;10324:68:6;;8465:2:18;10324:68:6;;;8447:21:18;8504:2;8484:18;;;8477:30;8543:34;8523:18;;;8516:62;-1:-1:-1;;;8594:18:18;;;8587:32;8636:19;;10324:68:6;8263:398:18;10324:68:6;-1:-1:-1;;;;;10403:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10454:32;;1731:25:18;;;10454:32:6;;1704:18:18;10454:32:6;;;;;;;10123:370;;;:::o;10770:441::-;-1:-1:-1;;;;;4091:18:6;;;10900:24;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10966:37:6;;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:6;;8868:2:18;11019:68:6;;;8850:21:18;8907:2;8887:18;;;8880:30;8946:31;8926:18;;;8919:59;8995:18;;11019:68:6;8666:353:18;11019:68:6;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10890:321;10770:441;;;:::o;3595:442:17:-;-1:-1:-1;;;;;3723:21:17;;;;;;:15;:21;;;;;;;;;:44;;-1:-1:-1;;;;;;3748:19:17;;;;;;:15;:19;;;;;;;;3723:44;3719:120;;;3784:33;3800:4;3806:2;3810:6;3784:15;:33::i;:::-;3855:11;3869:35;3899:4;3869:25;3880:13;;3869:6;:10;;:25;;;;:::i;:::-;:29;;:35::i;:::-;3855:49;-1:-1:-1;3915:13:17;3855:49;3915:13;;:::i;:::-;;;3941:33;3957:4;3963:2;3967:6;3941:15;:33::i;:::-;4007:16;;3985:44;;4001:4;;-1:-1:-1;;;;;4007:16:17;4025:3;3985:15;:44::i;3335:492:0:-;3423:22;3431:4;3437:7;3423;:22::i;:::-;3418:403;;3606:41;3634:7;-1:-1:-1;;;;;3606:41:0;3644:2;3606:19;:41::i;:::-;3718:38;3746:4;3753:2;3718:19;:38::i;:::-;3513:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3513:265:0;;;;;;;;;;-1:-1:-1;;;3461:349:0;;;;;;;:::i;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;2233:171::-;2321:32;2339:4;2345:7;2321:17;:32::i;:::-;2363:18;;;;:12;:18;;;;;:34;;2389:7;2363:25;:34::i;9124:576:6:-;-1:-1:-1;;;;;9207:21:6;;9199:67;;;;-1:-1:-1;;;9199:67:6;;10147:2:18;9199:67:6;;;10129:21:18;10186:2;10166:18;;;10159:30;10225:34;10205:18;;;10198:62;-1:-1:-1;;;10276:18:18;;;10269:31;10317:19;;9199:67:6;9945:397:18;9199:67:6;9277:49;9298:7;9315:1;9319:6;9277:20;:49::i;:::-;-1:-1:-1;;;;;9362:18:6;;9337:22;9362:18;;;:9;:18;;;;;;9398:24;;;;9390:71;;;;-1:-1:-1;;;9390:71:6;;10549:2:18;9390:71:6;;;10531:21:18;10588:2;10568:18;;;10561:30;10627:34;10607:18;;;10600:62;-1:-1:-1;;;10678:18:18;;;10671:32;10720:19;;9390:71:6;10347:398:18;9390:71:6;-1:-1:-1;;;;;9495:18:6;;;;;;:9;:18;;;;;9516:23;;;9495:44;;9559:12;:22;;9533:6;;9495:18;9559:22;;9533:6;;9559:22;:::i;:::-;;;;-1:-1:-1;;9597:37:6;;1731:25:18;;;9623:1:6;;-1:-1:-1;;;;;9597:37:6;;;;;1719:2:18;1704:18;9597:37:6;;;;;;;4387:145:0;;;:::o;2270:187:4:-;2362:6;;;-1:-1:-1;;;;;2378:17:4;;;2362:6;2378:17;;;-1:-1:-1;;;;;;2378:17:4;;;;;;2410:40;;2362:6;;;;;;;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;8870:156:16:-;8944:7;8994:22;8998:3;9010:5;8994:3;:22::i;8413:115::-;8476:7;8502:19;8510:3;4028:18;;3946:107;1697:404;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:16;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:16;2072:12;;7488:651:6;-1:-1:-1;;;;;7614:18:6;;7606:68;;;;-1:-1:-1;;;7606:68:6;;10952:2:18;7606:68:6;;;10934:21:18;10991:2;10971:18;;;10964:30;11030:34;11010:18;;;11003:62;-1:-1:-1;;;11081:18:18;;;11074:35;11126:19;;7606:68:6;10750:401:18;7606:68:6;-1:-1:-1;;;;;7692:16:6;;7684:64;;;;-1:-1:-1;;;7684:64:6;;11358:2:18;7684:64:6;;;11340:21:18;11397:2;11377:18;;;11370:30;11436:34;11416:18;;;11409:62;-1:-1:-1;;;11487:18:18;;;11480:33;11530:19;;7684:64:6;11156:399:18;7684:64:6;7759:38;7780:4;7786:2;7790:6;7759:20;:38::i;:::-;-1:-1:-1;;;;;7830:15:6;;7808:19;7830:15;;;:9;:15;;;;;;7863:21;;;;7855:72;;;;-1:-1:-1;;;7855:72:6;;11762:2:18;7855:72:6;;;11744:21:18;11801:2;11781:18;;;11774:30;11840:34;11820:18;;;11813:62;-1:-1:-1;;;11891:18:18;;;11884:36;11937:19;;7855:72:6;11560:402:18;7855:72:6;-1:-1:-1;;;;;7961:15:6;;;;;;;:9;:15;;;;;;7979:20;;;7961:38;;8019:13;;;;;;;;:23;;7993:6;;7961:15;8019:23;;7993:6;;8019:23;:::i;:::-;;;;;;;;8073:2;-1:-1:-1;;;;;8058:26:6;8067:4;-1:-1:-1;;;;;8058:26:6;;8077:6;8058:26;;;;1731:25:18;;1719:2;1704:18;;1585:177;8058:26:6;;;;;;;;8095:37;4387:145:0;3451:96:15;3509:7;3535:5;3539:1;3535;:5;:::i;3836:96::-;3894:7;3920:5;3924:1;3920;:5;:::i;1588:441:12:-;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:12;;1688:47;;-1:-1:-1;;;1745:6:12;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:12;;;;;;;;;-1:-1:-1;;;1770:6:12;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:12;;;;;;;;-1:-1:-1;1800:9:12;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:12;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:12;;;;;;;;-1:-1:-1;1915:1:12;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:12;;1936:55;;;;-1:-1:-1;;;1936:55:12;;12969:2:18;1936:55:12;;;12951:21:18;;;12988:18;;;12981:30;13047:34;13027:18;;;13020:62;13099:18;;1936:55:12;12767:356:18;7219:234:0;7302:22;7310:4;7316:7;7302;:22::i;:::-;7298:149;;;7372:5;7340:12;;;;;;;;;;;-1:-1:-1;;;;;7340:29:0;;;;;;;;;;:37;;-1:-1:-1;;7340:37:0;;;7396:40;719:10:11;;7340:12:0;;7396:40;;7372:5;7396:40;7219:234;;:::o;7930:156:16:-;8003:4;8026:53;8034:3;-1:-1:-1;;;;;8054:23:16;;8026:7;:53::i;1444:475:17:-;-1:-1:-1;;;;;1632:19:17;;;;;;:13;:19;;;;;;;;1631:20;1609:116;;;;-1:-1:-1;;;1609:116:17;;13330:2:18;1609:116:17;;;13312:21:18;13369:2;13349:18;;;13342:30;13408:34;13388:18;;;13381:62;-1:-1:-1;;;13459:18:18;;;13452:44;13513:19;;1609:116:17;13128:410:18;1609:116:17;-1:-1:-1;;;;;1759:19:17;;;;;;:15;:19;;;;;;;;1758:20;1736:118;;;;-1:-1:-1;;;1736:118:17;;13745:2:18;1736:118:17;;;13727:21:18;13784:2;13764:18;;;13757:30;13823:34;13803:18;;;13796:62;-1:-1:-1;;;13874:18:18;;;13867:46;13930:19;;1736:118:17;13543:412:18;1736:118:17;1867:44;1894:4;1900:2;1904:6;1867:26;:44::i;4395:118:16:-;4462:7;4488:3;:11;;4500:5;4488:18;;;;;;;;:::i;:::-;;;;;;;;;4481:25;;4395:118;;;;:::o;2269:1388::-;2335:4;2472:19;;;:12;;;:19;;;;;;2506:15;;2502:1149;;2875:21;2899:14;2912:1;2899:10;:14;:::i;:::-;2947:18;;2875:38;;-1:-1:-1;2927:17:16;;2947:22;;2968:1;;2947:22;:::i;:::-;2927:42;;3001:13;2988:9;:26;2984:398;;3034:17;3054:3;:11;;3066:9;3054:22;;;;;;;;:::i;:::-;;;;;;;;;3034:42;;3205:9;3176:3;:11;;3188:13;3176:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3288:23;;;:12;;;:23;;;;;:36;;;2984:398;3460:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3552:3;:12;;:19;3565:5;3552:19;;;;;;;;;;;3545:26;;;3593:4;3586:11;;;;;;;2502:1149;3635:5;3628:12;;;;;14:286:18;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:18;;209:43;;199:71;;266:1;263;256:12;497:258;569:1;579:113;593:6;590:1;587:13;579:113;;;669:11;;;663:18;650:11;;;643:39;615:2;608:10;579:113;;;710:6;707:1;704:13;701:48;;;-1:-1:-1;;745:1:18;727:16;;720:27;497:258::o;760:383::-;909:2;898:9;891:21;872:4;941:6;935:13;984:6;979:2;968:9;964:18;957:34;1000:66;1059:6;1054:2;1043:9;1039:18;1034:2;1026:6;1022:15;1000:66;:::i;:::-;1127:2;1106:15;-1:-1:-1;;1102:29:18;1087:45;;;;1134:2;1083:54;;760:383;-1:-1:-1;;760:383:18:o;1148:173::-;1216:20;;-1:-1:-1;;;;;1265:31:18;;1255:42;;1245:70;;1311:1;1308;1301:12;1245:70;1148:173;;;:::o;1326:254::-;1394:6;1402;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;1494:29;1513:9;1494:29;:::i;:::-;1484:39;1570:2;1555:18;;;;1542:32;;-1:-1:-1;;;1326:254:18:o;1767:328::-;1844:6;1852;1860;1913:2;1901:9;1892:7;1888:23;1884:32;1881:52;;;1929:1;1926;1919:12;1881:52;1952:29;1971:9;1952:29;:::i;:::-;1942:39;;2000:38;2034:2;2023:9;2019:18;2000:38;:::i;:::-;1990:48;;2085:2;2074:9;2070:18;2057:32;2047:42;;1767:328;;;;;:::o;2100:180::-;2159:6;2212:2;2200:9;2191:7;2187:23;2183:32;2180:52;;;2228:1;2225;2218:12;2180:52;-1:-1:-1;2251:23:18;;2100:180;-1:-1:-1;2100:180:18:o;2467:254::-;2535:6;2543;2596:2;2584:9;2575:7;2571:23;2567:32;2564:52;;;2612:1;2609;2602:12;2564:52;2648:9;2635:23;2625:33;;2677:38;2711:2;2700:9;2696:18;2677:38;:::i;:::-;2667:48;;2467:254;;;;;:::o;3100:186::-;3159:6;3212:2;3200:9;3191:7;3187:23;3183:32;3180:52;;;3228:1;3225;3218:12;3180:52;3251:29;3270:9;3251:29;:::i;3499:160::-;3564:20;;3620:13;;3613:21;3603:32;;3593:60;;3649:1;3646;3639:12;3664:322;3735:6;3743;3751;3804:2;3792:9;3783:7;3779:23;3775:32;3772:52;;;3820:1;3817;3810:12;3772:52;3843:29;3862:9;3843:29;:::i;:::-;3833:39;;3891:35;3922:2;3911:9;3907:18;3891:35;:::i;:::-;3881:45;;3945:35;3976:2;3965:9;3961:18;3945:35;:::i;:::-;3935:45;;3664:322;;;;;:::o;3991:248::-;4059:6;4067;4120:2;4108:9;4099:7;4095:23;4091:32;4088:52;;;4136:1;4133;4126:12;4088:52;-1:-1:-1;;4159:23:18;;;4229:2;4214:18;;;4201:32;;-1:-1:-1;3991:248:18:o;4244:260::-;4312:6;4320;4373:2;4361:9;4352:7;4348:23;4344:32;4341:52;;;4389:1;4386;4379:12;4341:52;4412:29;4431:9;4412:29;:::i;:::-;4402:39;;4460:38;4494:2;4483:9;4479:18;4460:38;:::i;4782:380::-;4861:1;4857:12;;;;4904;;;4925:61;;4979:4;4971:6;4967:17;4957:27;;4925:61;5032:2;5024:6;5021:14;5001:18;4998:38;4995:161;;5078:10;5073:3;5069:20;5066:1;5059:31;5113:4;5110:1;5103:15;5141:4;5138:1;5131:15;4995:161;;4782:380;;;:::o;5167:356::-;5369:2;5351:21;;;5388:18;;;5381:30;5447:34;5442:2;5427:18;;5420:62;5514:2;5499:18;;5167:356::o;6369:127::-;6430:10;6425:3;6421:20;6418:1;6411:31;6461:4;6458:1;6451:15;6485:4;6482:1;6475:15;6501:128;6541:3;6572:1;6568:6;6565:1;6562:13;6559:39;;;6578:18;;:::i;:::-;-1:-1:-1;6614:9:18;;6501:128::o;9024:125::-;9064:4;9092:1;9089;9086:8;9083:34;;;9097:18;;:::i;:::-;-1:-1:-1;9134:9:18;;9024:125::o;9154:786::-;9565:25;9560:3;9553:38;9535:3;9620:6;9614:13;9636:62;9691:6;9686:2;9681:3;9677:12;9670:4;9662:6;9658:17;9636:62;:::i;:::-;-1:-1:-1;;;9757:2:18;9717:16;;;9749:11;;;9742:40;9807:13;;9829:63;9807:13;9878:2;9870:11;;9863:4;9851:17;;9829:63;:::i;:::-;9912:17;9931:2;9908:26;;9154:786;-1:-1:-1;;;;9154:786:18:o;11967:168::-;12007:7;12073:1;12069;12065:6;12061:14;12058:1;12055:21;12050:1;12043:9;12036:17;12032:45;12029:71;;;12080:18;;:::i;:::-;-1:-1:-1;12120:9:18;;11967:168::o;12140:217::-;12180:1;12206;12196:132;;12250:10;12245:3;12241:20;12238:1;12231:31;12285:4;12282:1;12275:15;12313:4;12310:1;12303:15;12196:132;-1:-1:-1;12342:9:18;;12140:217::o;12362:127::-;12423:10;12418:3;12414:20;12411:1;12404:31;12454:4;12451:1;12444:15;12478:4;12475:1;12468:15;12494:127;12555:10;12550:3;12546:20;12543:1;12536:31;12586:4;12583:1;12576:15;12610:4;12607:1;12600:15;12626:136;12665:3;12693:5;12683:39;;12702:18;;:::i;:::-;-1:-1:-1;;;12738:18:18;;12626:136::o;13960:127::-;14021:10;14016:3;14012:20;14009:1;14002:31;14052:4;14049:1;14042:15;14076:4;14073:1;14066:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1421800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "306",
								"MINTER_ROLE()": "284",
								"PAUSER_ROLE()": "283",
								"addLiquidityFree(address)": "26874",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24681",
								"balanceOf(address)": "2582",
								"blockUser(address,bool,bool)": "infinite",
								"blocked(address)": "4823",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "289",
								"decreaseAllowance(address,uint256)": "27022",
								"getOwner()": "2475",
								"getRoleAdmin(bytes32)": "2515",
								"getRoleMember(bytes32,uint256)": "infinite",
								"getRoleMemberCount(bytes32)": "infinite",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "2763",
								"increaseAllowance(address,uint256)": "27002",
								"liquidityFee()": "2359",
								"liquidityKeeper()": "2431",
								"name()": "infinite",
								"owner()": "2410",
								"paused()": "2405",
								"renounceOwnership()": "28217",
								"renounceRole(bytes32,address)": "infinite",
								"revokeRole(bytes32,address)": "infinite",
								"setLiquidityFee(uint256)": "24638",
								"setLiquidityKeeper(address)": "26814",
								"supportsInterface(bytes4)": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2394",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28477"
							},
							"internal": {
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "CALLVALUE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSHSIZE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "CODESIZE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSHSIZE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "2"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "3"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "tag",
									"source": 17,
									"value": "2"
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1150,
									"end": 1154,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 1150,
									"end": 1154,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1156,
									"end": 1162,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 1156,
									"end": 1162,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "PUSH",
									"source": 6,
									"value": "5"
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "tag",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 981,
									"end": 988,
									"name": "PUSH",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 981,
									"end": 996,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 981,
									"end": 996,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 981,
									"end": 996,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 981,
									"end": 996,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 981,
									"end": 996,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "17"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 4,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "19"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 1175,
									"end": 1185,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "tag",
									"source": 17,
									"value": "19"
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1232,
									"end": 1269,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 685,
									"end": 709,
									"name": "PUSH",
									"source": 17,
									"value": "9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 1175,
									"end": 1185,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 1232,
									"end": 1269,
									"name": "tag",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 1232,
									"end": 1269,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1280,
									"end": 1317,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 754,
									"end": 778,
									"name": "PUSH",
									"source": 17,
									"value": "65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 1175,
									"end": 1185,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 1175,
									"end": 1219,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 1280,
									"end": 1317,
									"name": "tag",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 1280,
									"end": 1317,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1346,
									"end": 1348,
									"name": "PUSH",
									"source": 17,
									"value": "32"
								},
								{
									"begin": 1330,
									"end": 1343,
									"name": "PUSH",
									"source": 17,
									"value": "8"
								},
								{
									"begin": 1330,
									"end": 1348,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1378,
									"end": 1385,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "PUSH",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1036,
									"end": 1121,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1378,
									"end": 1385,
									"name": "tag",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 1378,
									"end": 1385,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1375,
									"name": "PUSH",
									"source": 17,
									"value": "9"
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "AND",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1359,
									"end": 1385,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "PUSH",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1398,
									"end": 1428,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "28"
								},
								{
									"begin": 1398,
									"end": 1428,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": 1108,
									"end": 1114,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1413,
									"end": 1427,
									"name": "PUSH",
									"source": 17,
									"value": "33B2E3C9FD0803CE8000000"
								},
								{
									"begin": 1398,
									"end": 1403,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "30"
								},
								{
									"begin": 1398,
									"end": 1428,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 1398,
									"end": 1428,
									"name": "tag",
									"source": 17,
									"value": "28"
								},
								{
									"begin": 1398,
									"end": 1428,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1090,
									"end": 1436,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "105"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 4,
									"value": "17"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "100"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP6",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP5",
									"source": 4
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP4",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 4,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 4
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 4,
									"value": "[out]"
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "tag",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 6335,
									"end": 6360,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 6346,
									"end": 6350,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6352,
									"end": 6359,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6335,
									"end": 6345,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 6335,
									"end": 6360,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 6335,
									"end": 6360,
									"name": "tag",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 6335,
									"end": 6360,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 8415,
									"end": 8804,
									"name": "tag",
									"source": 6,
									"value": "30"
								},
								{
									"begin": 8415,
									"end": 8804,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8498,
									"end": 8519,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8498,
									"end": 8519,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "39"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1805,
									"end": 1807,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1787,
									"end": 1808,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1844,
									"end": 1846,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 1824,
									"end": 1842,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 1824,
									"end": 1842,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1824,
									"end": 1842,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1817,
									"end": 1847,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1883,
									"end": 1916,
									"name": "PUSH",
									"source": 18,
									"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
								},
								{
									"begin": 1863,
									"end": 1881,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 1863,
									"end": 1881,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1863,
									"end": 1881,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1856,
									"end": 1917,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1934,
									"end": 1952,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 1934,
									"end": 1952,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "tag",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "tag",
									"source": 6,
									"value": "39"
								},
								{
									"begin": 8490,
									"end": 8555,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8566,
									"end": 8615,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "42"
								},
								{
									"begin": 8595,
									"end": 8596,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8599,
									"end": 8606,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 8608,
									"end": 8614,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 8566,
									"end": 8586,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "43"
								},
								{
									"begin": 8566,
									"end": 8615,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 8566,
									"end": 8615,
									"name": "tag",
									"source": 6,
									"value": "42"
								},
								{
									"begin": 8566,
									"end": 8615,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8642,
									"end": 8648,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8638,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 8626,
									"end": 8638,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "tag",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 8626,
									"end": 8648,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8667,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 8680,
									"end": 8686,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 8680,
									"end": 8686,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8676,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "46"
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8680,
									"end": 8686,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 8680,
									"end": 8686,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "tag",
									"source": 6,
									"value": "46"
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 8658,
									"end": 8686,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 2339,
									"end": 2364,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2339,
									"end": 2364,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2339,
									"end": 2364,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8718,
									"end": 8719,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8718,
									"end": 8719,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "PUSH",
									"source": 6,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2327,
									"end": 2329,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 2312,
									"end": 2330,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 8701,
									"end": 8738,
									"name": "LOG3",
									"source": 6
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6257,
									"end": 6367,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 1978,
									"end": 2144,
									"name": "tag",
									"source": 1,
									"value": "36"
								},
								{
									"begin": 1978,
									"end": 2144,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "52"
								},
								{
									"begin": 2082,
									"end": 2086,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2088,
									"end": 2095,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "53"
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18446744073709551799"
								},
								{
									"begin": 2065,
									"end": 2081,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "tag",
									"source": 1,
									"value": "52"
								},
								{
									"begin": 2065,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2118,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2124,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "54"
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2129,
									"end": 2136,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2129,
									"end": 2136,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2128,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18446744073709551800"
								},
								{
									"begin": 2106,
									"end": 2128,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "55"
								},
								{
									"begin": 2106,
									"end": 2128,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2128,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2128,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "tag",
									"source": 1,
									"value": "54"
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2106,
									"end": 2137,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2144,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2144,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1978,
									"end": 2144,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 1444,
									"end": 1919,
									"name": "tag",
									"source": 17,
									"value": "43"
								},
								{
									"begin": 1444,
									"end": 1919,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1645,
									"name": "PUSH",
									"source": 17,
									"value": "A"
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "PUSH",
									"source": 17,
									"value": "FF"
								},
								{
									"begin": 1632,
									"end": 1651,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1631,
									"end": 1651,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "57"
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 2577,
									"end": 2579,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 2559,
									"end": 2580,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2616,
									"end": 2618,
									"name": "PUSH",
									"source": 18,
									"value": "2E"
								},
								{
									"begin": 2596,
									"end": 2614,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 2596,
									"end": 2614,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2596,
									"end": 2614,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2589,
									"end": 2619,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2655,
									"end": 2689,
									"name": "PUSH",
									"source": 18,
									"value": "4865726F204177616B656E20546F6B656E3A207468652073656E646572206861"
								},
								{
									"begin": 2635,
									"end": 2653,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 2635,
									"end": 2653,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2635,
									"end": 2653,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2628,
									"end": 2690,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1CC81899595B88189B1BD8DAD959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "92"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2706,
									"end": 2724,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 2706,
									"end": 2724,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2706,
									"end": 2724,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2699,
									"end": 2743,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2760,
									"end": 2779,
									"name": "PUSH",
									"source": 18,
									"value": "84"
								},
								{
									"begin": 2760,
									"end": 2779,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 2375,
									"end": 2785,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "tag",
									"source": 17,
									"value": "57"
								},
								{
									"begin": 1609,
									"end": 1725,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1774,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "PUSH",
									"source": 17,
									"value": "FF"
								},
								{
									"begin": 1759,
									"end": 1778,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1758,
									"end": 1778,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "60"
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 2992,
									"end": 2994,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 2974,
									"end": 2995,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3031,
									"end": 3033,
									"name": "PUSH",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 3011,
									"end": 3029,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 3011,
									"end": 3029,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3011,
									"end": 3029,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3004,
									"end": 3034,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3070,
									"end": 3104,
									"name": "PUSH",
									"source": 18,
									"value": "4865726F204177616B656E20546F6B656E3A2074686520726563656976657220"
								},
								{
									"begin": 3050,
									"end": 3068,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 3050,
									"end": 3068,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3050,
									"end": 3068,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3043,
									"end": 3105,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1A185CC81899595B88189B1BD8DAD959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "82"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3121,
									"end": 3139,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 3121,
									"end": 3139,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3121,
									"end": 3139,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3114,
									"end": 3160,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3177,
									"end": 3196,
									"name": "PUSH",
									"source": 18,
									"value": "84"
								},
								{
									"begin": 3177,
									"end": 3196,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 2790,
									"end": 3202,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "tag",
									"source": 17,
									"value": "60"
								},
								{
									"begin": 1736,
									"end": 1854,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1867,
									"end": 1911,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "54"
								},
								{
									"begin": 1894,
									"end": 1898,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1900,
									"end": 1902,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1904,
									"end": 1910,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1867,
									"end": 1893,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "64"
								},
								{
									"begin": 1867,
									"end": 1893,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 1867,
									"end": 1893,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 1867,
									"end": 1893,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "18446744073709551801"
								},
								{
									"begin": 1867,
									"end": 1893,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 1867,
									"end": 1911,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 1867,
									"end": 1911,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 1867,
									"end": 1911,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 6861,
									"end": 7094,
									"name": "tag",
									"source": 0,
									"value": "53"
								},
								{
									"begin": 6861,
									"end": 7094,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2995,
									"end": 2999,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3030,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 3018,
									"end": 3047,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 6939,
									"end": 7088,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 6939,
									"end": 7088,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6988,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 6994,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7011,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7014,
									"end": 7018,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6982,
									"end": 7018,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 7064,
									"end": 7076,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "70"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7064,
									"end": 7076,
									"name": "tag",
									"source": 0,
									"value": "70"
								},
								{
									"begin": 7064,
									"end": 7076,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7055,
									"end": 7062,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 7049,
									"end": 7053,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "PUSH",
									"source": 0,
									"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 7037,
									"end": 7077,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 6861,
									"end": 7094,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6861,
									"end": 7094,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 6861,
									"end": 7094,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "tag",
									"source": 16,
									"value": "55"
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 7682,
									"end": 7686,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 7705,
									"end": 7755,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "72"
								},
								{
									"begin": 7710,
									"end": 7713,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7730,
									"end": 7753,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 7730,
									"end": 7753,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 7705,
									"end": 7709,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 7705,
									"end": 7755,
									"name": "JUMP",
									"source": 16,
									"value": "[in]"
								},
								{
									"begin": 7705,
									"end": 7755,
									"name": "tag",
									"source": 16,
									"value": "72"
								},
								{
									"begin": 7705,
									"end": 7755,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 7698,
									"end": 7755,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 7698,
									"end": 7755,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "tag",
									"source": 16,
									"value": "71"
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 7612,
									"end": 7762,
									"name": "JUMP",
									"source": 16,
									"value": "[out]"
								},
								{
									"begin": 665,
									"end": 929,
									"name": "tag",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 665,
									"end": 929,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 803,
									"end": 847,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 830,
									"end": 834,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 836,
									"end": 838,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 840,
									"end": 846,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 803,
									"end": 829,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "54"
								},
								{
									"begin": 803,
									"end": 829,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 803,
									"end": 829,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 803,
									"end": 829,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "18446744073709551833"
								},
								{
									"begin": 803,
									"end": 829,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 803,
									"end": 847,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 803,
									"end": 847,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 803,
									"end": 847,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 803,
									"end": 847,
									"name": "tag",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 803,
									"end": 847,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1168,
									"end": 1175,
									"name": "PUSH",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1168,
									"end": 1175,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 1168,
									"end": 1175,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 1168,
									"end": 1175,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 866,
									"end": 875,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 858,
									"end": 922,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "54"
								},
								{
									"begin": 858,
									"end": 922,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 858,
									"end": 922,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 858,
									"end": 922,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 858,
									"end": 922,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 858,
									"end": 922,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3409,
									"end": 3411,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 858,
									"end": 922,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 858,
									"end": 922,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 858,
									"end": 922,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3391,
									"end": 3412,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3448,
									"end": 3450,
									"name": "PUSH",
									"source": 18,
									"value": "2A"
								},
								{
									"begin": 3428,
									"end": 3446,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 3428,
									"end": 3446,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3428,
									"end": 3446,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3421,
									"end": 3451,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3487,
									"end": 3521,
									"name": "PUSH",
									"source": 18,
									"value": "45524332305061757361626C653A20746F6B656E207472616E73666572207768"
								},
								{
									"begin": 3467,
									"end": 3485,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 3467,
									"end": 3485,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3467,
									"end": 3485,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3460,
									"end": 3522,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1A5B19481C185D5CD959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "B2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3538,
									"end": 3556,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 3538,
									"end": 3556,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3538,
									"end": 3556,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3531,
									"end": 3571,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3588,
									"end": 3607,
									"name": "PUSH",
									"source": 18,
									"value": "84"
								},
								{
									"begin": 3588,
									"end": 3607,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 858,
									"end": 922,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 3207,
									"end": 3613,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1697,
									"end": 2101,
									"name": "tag",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 1697,
									"end": 2101,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 1760,
									"end": 1764,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3846,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 3834,
									"end": 3846,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3846,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 3834,
									"end": 3853,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 1776,
									"end": 2095,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "86"
								},
								{
									"begin": 1776,
									"end": 2095,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "PUSH",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1829,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1818,
									"end": 1841,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 1998,
									"end": 2016,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 1998,
									"end": 2016,
									"name": "SLOAD",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "DUP5",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1988,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1988,
									"name": "DUP7",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1988,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "SWAP4",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 1995,
									"name": "KECCAK256",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 2016,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 2016,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 2016,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 1976,
									"end": 2016,
									"name": "SSTORE",
									"source": 16
								},
								{
									"begin": 2030,
									"end": 2041,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "71"
								},
								{
									"begin": 2030,
									"end": 2041,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 1776,
									"end": 2095,
									"name": "tag",
									"source": 16,
									"value": "86"
								},
								{
									"begin": 1776,
									"end": 2095,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2079,
									"end": 2084,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 2072,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "71"
								},
								{
									"begin": 2072,
									"end": 2084,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "92"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "93"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "92"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DIV",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "95"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "98"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "95"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "96"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "FF"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "98"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "96"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "98"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "97"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "98"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "97"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "98"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "99"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "99"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17,
									"value": "[out]"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "tag",
									"source": 17,
									"value": "101"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "99"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "101"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 18,
									"value": "103"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 18,
									"value": "104"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "108"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 18,
									"value": "108"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "110"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "110"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "103"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 18,
									"value": "110"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 18,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "112"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "112"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "103"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 18,
									"value": "112"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "113"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 18,
									"value": "113"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "114"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "116"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "114"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "116"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "117"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 18,
									"value": "117"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "119"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 18,
									"value": "119"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "121"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "104"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 18,
									"value": "121"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "122"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 18,
									"value": "122"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "123"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "104"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 18,
									"value": "123"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1963,
									"end": 2188,
									"name": "tag",
									"source": 18,
									"value": "45"
								},
								{
									"begin": 1963,
									"end": 2188,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2003,
									"end": 2006,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2034,
									"end": 2035,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2030,
									"end": 2036,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 2027,
									"end": 2028,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2024,
									"end": 2037,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 2021,
									"end": 2157,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2021,
									"end": 2157,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "126"
								},
								{
									"begin": 2021,
									"end": 2157,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2079,
									"end": 2089,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 2074,
									"end": 2077,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 2070,
									"end": 2090,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 2067,
									"end": 2068,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2060,
									"end": 2091,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2114,
									"end": 2118,
									"name": "PUSH",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 2111,
									"end": 2112,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 2104,
									"end": 2119,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2142,
									"end": 2146,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 2139,
									"end": 2140,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2132,
									"end": 2147,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 2021,
									"end": 2157,
									"name": "tag",
									"source": 18,
									"value": "126"
								},
								{
									"begin": 2021,
									"end": 2157,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2173,
									"end": 2182,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2173,
									"end": 2182,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1963,
									"end": 2188,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "tag",
									"source": 18,
									"value": "93"
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3697,
									"end": 3698,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3693,
									"end": 3705,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3693,
									"end": 3705,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3693,
									"end": 3705,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 3693,
									"end": 3705,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3740,
									"end": 3752,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3740,
									"end": 3752,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3740,
									"end": 3752,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3761,
									"end": 3822,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "132"
								},
								{
									"begin": 3761,
									"end": 3822,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3815,
									"end": 3819,
									"name": "PUSH",
									"source": 18,
									"value": "7F"
								},
								{
									"begin": 3807,
									"end": 3813,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3803,
									"end": 3820,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3793,
									"end": 3820,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3793,
									"end": 3820,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3761,
									"end": 3822,
									"name": "tag",
									"source": 18,
									"value": "132"
								},
								{
									"begin": 3761,
									"end": 3822,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3868,
									"end": 3870,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3860,
									"end": 3866,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3857,
									"end": 3871,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 3837,
									"end": 3855,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3834,
									"end": 3872,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 3831,
									"end": 3992,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "133"
								},
								{
									"begin": 3831,
									"end": 3992,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3914,
									"end": 3924,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 3909,
									"end": 3912,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 3905,
									"end": 3925,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 3902,
									"end": 3903,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3895,
									"end": 3926,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3949,
									"end": 3953,
									"name": "PUSH",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 3946,
									"end": 3947,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 3939,
									"end": 3954,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3977,
									"end": 3981,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 3974,
									"end": 3975,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3967,
									"end": 3982,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 3831,
									"end": 3992,
									"name": "tag",
									"source": 18,
									"value": "133"
								},
								{
									"begin": 3831,
									"end": 3992,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3831,
									"end": 3992,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "tag",
									"source": 18,
									"value": "105"
								},
								{
									"begin": 3618,
									"end": 3998,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 510,
									"end": 4040,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208c07753cef65e25fc61f05f734b08d9500ff824f6de0adeec0d63e93eef198d664736f6c634300080d0033",
									".code": [
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "8BEA9334"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "DD62ED3E"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "DD62ED3E"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "34"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "E5962195"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "E63AB1E9"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "EEFB9BE2"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "F2FDE38B"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "38"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "30"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "CA15C873"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "D5391393"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "32"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "D547741F"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "33"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "95D89B41"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "42"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "95D89B41"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "98118CB4"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "A128471F"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "A217FDDF"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "28"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "A457C2D7"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "29"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "42"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "8BEA9334"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "21"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "8DA5CB5B"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "9010D07C"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "23"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "91D14854"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "36568ABE"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "43"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "715018A6"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "79CC6790"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "7F257C3E"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "893D20E8"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "36568ABE"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "39509351"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "13"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "42966C68"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "14"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "5C975ABB"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "43"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "45"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "248A9CA3"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "2F2FF15D"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "313CE567"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "10"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "357BF15C"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "45"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "1FFC9A7"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "6FDDE03"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "95EA7B3"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "18160DDD"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "tag",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 510,
											"end": 4040,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 634,
											"end": 846,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 470,
											"end": 484,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 470,
											"end": 484,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 463,
											"end": 485,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 445,
											"end": 486,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 445,
											"end": 486,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 436,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 634,
											"end": 846,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4082,
											"end": 4089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4008,
											"end": 4137,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2868,
											"end": 2904,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2856,
											"end": 2858,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2841,
											"end": 2859,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 2726,
											"end": 2910,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "tag",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "72"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "tag",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "87"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 1098,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1098,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 1098,
											"end": 1182,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3482,
											"end": 3489,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3517,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "tag",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2260,
											"end": 2276,
											"name": "PUSH",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 2260,
											"end": 2276,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2260,
											"end": 2276,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "tag",
											"source": 17,
											"value": "111"
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3455,
											"end": 3487,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3455,
											"end": 3487,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3455,
											"end": 3487,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3488,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3488,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3425,
											"end": 3427,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3410,
											"end": 3428,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2183,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "50"
										},
										{
											"begin": 3291,
											"end": 3494,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1987,
											"end": 2072,
											"name": "tag",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1987,
											"end": 2072,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1987,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "111"
										},
										{
											"begin": 1987,
											"end": 2072,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "tag",
											"source": 17,
											"value": "21"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "119"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "120"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "tag",
											"source": 17,
											"value": "119"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "121"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2080,
											"end": 2175,
											"name": "tag",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 2080,
											"end": 2175,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2154,
											"end": 2167,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 2154,
											"end": 2167,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2080,
											"end": 2175,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "61"
										},
										{
											"begin": 2080,
											"end": 2175,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "tag",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "141"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "tag",
											"source": 17,
											"value": "141"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "142"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "tag",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 647,
											"end": 709,
											"name": "tag",
											"source": 17,
											"value": "32"
										},
										{
											"begin": 647,
											"end": 709,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 647,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "61"
										},
										{
											"begin": 685,
											"end": 709,
											"name": "PUSH",
											"source": 17,
											"value": "9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
										},
										{
											"begin": 647,
											"end": 709,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 647,
											"end": 709,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4065,
											"end": 4072,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "tag",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "169"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "170"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "tag",
											"source": 17,
											"value": "170"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2346,
											"end": 2350,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2390,
											"name": "PUSH",
											"source": 17,
											"value": "A"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2413,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2398,
											"end": 2419,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "tag",
											"source": 17,
											"value": "169"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4696,
											"end": 4710,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4696,
											"end": 4710,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4689,
											"end": 4711,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4671,
											"end": 4712,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4671,
											"end": 4712,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4755,
											"end": 4769,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4755,
											"end": 4769,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4748,
											"end": 4770,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4743,
											"end": 4745,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4728,
											"end": 4746,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4728,
											"end": 4746,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4721,
											"end": 4771,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4644,
											"end": 4662,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2292,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "50"
										},
										{
											"begin": 4509,
											"end": 4777,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 716,
											"end": 778,
											"name": "tag",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 716,
											"end": 778,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 716,
											"end": 778,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "61"
										},
										{
											"begin": 754,
											"end": 778,
											"name": "PUSH",
											"source": 17,
											"value": "65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A"
										},
										{
											"begin": 716,
											"end": 778,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 716,
											"end": 778,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "178"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "tag",
											"source": 17,
											"value": "178"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "179"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "103"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 719,
											"end": 723,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 742,
											"end": 799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 742,
											"end": 799,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A05180F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 742,
											"end": 799,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 742,
											"end": 799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 742,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 742,
											"end": 839,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 742,
											"end": 839,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 803,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 827,
											"end": 838,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 803,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "190"
										},
										{
											"begin": 803,
											"end": 839,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 803,
											"end": 839,
											"name": "tag",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 803,
											"end": 839,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 735,
											"end": 839,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 634,
											"end": 846,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2210,
											"end": 2223,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2242,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4516,
											"end": 4520,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4586,
											"end": 4593,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4595,
											"end": 4601,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4570,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5319,
											"end": 5323,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 5391,
											"end": 5395,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5406,
											"end": 5412,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5375,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "tag",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5433,
											"end": 5437,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5439,
											"end": 5441,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5443,
											"end": 5449,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5423,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4082,
											"end": 4089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4500,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 4511,
											"end": 4515,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4517,
											"end": 4524,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4500,
											"end": 4510,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 4500,
											"end": 4525,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4500,
											"end": 4525,
											"name": "tag",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 4500,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "tag",
											"source": 17,
											"value": "87"
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "223"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "223"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2763,
											"end": 2767,
											"name": "PUSH",
											"source": 17,
											"value": "3E8"
										},
										{
											"begin": 2756,
											"end": 2759,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2756,
											"end": 2767,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 2756,
											"end": 2767,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5730,
											"end": 5732,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5712,
											"end": 5733,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5769,
											"end": 5771,
											"name": "PUSH",
											"source": 18,
											"value": "38"
										},
										{
											"begin": 5749,
											"end": 5767,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5749,
											"end": 5767,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5749,
											"end": 5767,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5742,
											"end": 5772,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5808,
											"end": 5842,
											"name": "PUSH",
											"source": 18,
											"value": "4865726F204177616B656E20546F6B656E3A206C697175696469747920666565"
										},
										{
											"begin": 5788,
											"end": 5806,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5788,
											"end": 5806,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5788,
											"end": 5806,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5781,
											"end": 5843,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5879,
											"end": 5905,
											"name": "PUSH",
											"source": 18,
											"value": "206D757374206265747765656E203020616E6420313030300000000000000000"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5859,
											"end": 5877,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5852,
											"end": 5906,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5923,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5923,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "224"
										},
										{
											"begin": 5528,
											"end": 5948,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "tag",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 2722,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2864,
											"end": 2877,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 2864,
											"end": 2883,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 2656,
											"end": 2891,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5499,
											"end": 5522,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5499,
											"end": 5522,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5499,
											"end": 5522,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6157,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6194,
											"end": 6196,
											"name": "PUSH",
											"source": 18,
											"value": "2F"
										},
										{
											"begin": 6174,
											"end": 6192,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6174,
											"end": 6192,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6174,
											"end": 6192,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6167,
											"end": 6197,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6233,
											"end": 6267,
											"name": "PUSH",
											"source": 18,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 6213,
											"end": 6231,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 6213,
											"end": 6231,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6213,
											"end": 6231,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6206,
											"end": 6268,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937B632B9903337B91039B2B633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6284,
											"end": 6302,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 6284,
											"end": 6302,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6284,
											"end": 6302,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6277,
											"end": 6322,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6339,
											"end": 6358,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 6339,
											"end": 6358,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 5953,
											"end": 6364,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 5491,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5585,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 5597,
											"end": 5601,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5603,
											"end": 5610,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5585,
											"end": 5596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 5585,
											"end": 5611,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5585,
											"end": 5611,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 5585,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5404,
											"end": 5618,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 5873,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6051,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6058,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6067,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6070,
											"end": 6080,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6070,
											"end": 6080,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "tag",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 6040,
											"end": 6080,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6015,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 6015,
											"end": 6081,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 633,
											"end": 660,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 653,
											"end": 659,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 633,
											"end": 638,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 633,
											"end": 660,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 633,
											"end": 660,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 633,
											"end": 660,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 578,
											"end": 667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 1065,
											"end": 1072,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1088,
											"end": 1094,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1049,
											"end": 1064,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 1111,
											"end": 1118,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1105,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 1105,
											"end": 1127,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "tag",
											"source": 17,
											"value": "121"
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "267"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "267"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2577,
											"name": "PUSH",
											"source": 17,
											"value": "A"
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2583,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2564,
											"end": 2594,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2620,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 2605,
											"end": 2626,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2626,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2626,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2626,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2626,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2605,
											"end": 2640,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 2436,
											"end": 2648,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1521,
											"end": 1528,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1559,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1565,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1575,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "272"
										},
										{
											"begin": 1547,
											"end": 1575,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1569,
											"end": 1574,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1568,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "273"
										},
										{
											"begin": 1547,
											"end": 1575,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1547,
											"end": 1575,
											"name": "tag",
											"source": 1,
											"value": "272"
										},
										{
											"begin": 1547,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1540,
											"end": 1575,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1431,
											"end": 1582,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2995,
											"end": 2999,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3030,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3018,
											"end": 3047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 3054,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2423,
											"end": 2436,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "tag",
											"source": 17,
											"value": "142"
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2971,
											"end": 2987,
											"name": "PUSH",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "AND",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2971,
											"end": 2996,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 2899,
											"end": 3004,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 6596,
											"end": 7025,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6781,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6788,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6770,
											"end": 6797,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6689,
											"end": 6693,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6850,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6836,
											"end": 6838,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6818,
											"end": 6839,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6875,
											"end": 6877,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6848,
											"end": 6878,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6914,
											"end": 6948,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6887,
											"end": 6949,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6965,
											"end": 6983,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 6965,
											"end": 6983,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6965,
											"end": 6983,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6958,
											"end": 6993,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7010,
											"end": 7029,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 7010,
											"end": 7029,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6634,
											"end": 7035,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "tag",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 6807,
											"end": 6892,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6926,
											"end": 6986,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 6935,
											"end": 6940,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6970,
											"end": 6985,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6967,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6951,
											"end": 6985,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6926,
											"end": 6934,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 6926,
											"end": 6986,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3808,
											"end": 3812,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3879,
											"end": 3881,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3862,
											"end": 3871,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "tag",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 1750,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1830,
											"end": 1837,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1868,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1874,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 1856,
											"end": 1883,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1856,
											"end": 1881,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "299"
										},
										{
											"begin": 1856,
											"end": 1883,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 4766,
											"end": 4913,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4082,
											"end": 4089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4120,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4108,
											"end": 4130,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "tag",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 2505,
											"end": 2535,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4880,
											"end": 4906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 4892,
											"end": 4896,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4898,
											"end": 4905,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4880,
											"end": 4891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 4880,
											"end": 4906,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "tag",
											"source": 17,
											"value": "179"
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3095,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3101,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3104,
											"end": 3108,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3080,
											"end": 3108,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 3012,
											"end": 3116,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "317"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 4,
											"value": "317"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "320"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7242,
											"end": 7244,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7224,
											"end": 7245,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7281,
											"end": 7283,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 7261,
											"end": 7279,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7261,
											"end": 7279,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7261,
											"end": 7279,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7254,
											"end": 7284,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7320,
											"end": 7354,
											"name": "PUSH",
											"source": 18,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 7300,
											"end": 7318,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7300,
											"end": 7318,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7300,
											"end": 7318,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7293,
											"end": 7355,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7371,
											"end": 7389,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7371,
											"end": 7389,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7371,
											"end": 7389,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7364,
											"end": 7400,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7417,
											"end": 7436,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 7417,
											"end": 7436,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 7040,
											"end": 7442,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 4,
											"value": "320"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6861,
											"end": 7094,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 6861,
											"end": 7094,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6944,
											"end": 6966,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 6952,
											"end": 6956,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6958,
											"end": 6965,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6944,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 6944,
											"end": 6966,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6944,
											"end": 6966,
											"name": "tag",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 6944,
											"end": 6966,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6939,
											"end": 7088,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 6939,
											"end": 7088,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 6994,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7011,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7014,
											"end": 7018,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6982,
											"end": 7018,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7064,
											"end": 7076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7076,
											"name": "tag",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 7064,
											"end": 7076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7055,
											"end": 7062,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7049,
											"end": 7053,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7037,
											"end": 7077,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 6861,
											"end": 7094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6861,
											"end": 7094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6861,
											"end": 7094,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7612,
											"end": 7762,
											"name": "tag",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 7612,
											"end": 7762,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7682,
											"end": 7686,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7705,
											"end": 7755,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 7710,
											"end": 7713,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7730,
											"end": 7753,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 7730,
											"end": 7753,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 7705,
											"end": 7709,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "330"
										},
										{
											"begin": 7705,
											"end": 7755,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 665,
											"end": 929,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 665,
											"end": 929,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1168,
											"end": 1175,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 866,
											"end": 875,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 858,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 858,
											"end": 922,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 858,
											"end": 922,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 858,
											"end": 922,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 858,
											"end": 922,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 858,
											"end": 922,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7649,
											"end": 7651,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 858,
											"end": 922,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 858,
											"end": 922,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 858,
											"end": 922,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7631,
											"end": 7652,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7688,
											"end": 7690,
											"name": "PUSH",
											"source": 18,
											"value": "2A"
										},
										{
											"begin": 7668,
											"end": 7686,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7668,
											"end": 7686,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7668,
											"end": 7686,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7661,
											"end": 7691,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7727,
											"end": 7761,
											"name": "PUSH",
											"source": 18,
											"value": "45524332305061757361626C653A20746F6B656E207472616E73666572207768"
										},
										{
											"begin": 7707,
											"end": 7725,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7707,
											"end": 7725,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7707,
											"end": 7725,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7700,
											"end": 7762,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A5B19481C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7778,
											"end": 7796,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7778,
											"end": 7796,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7778,
											"end": 7796,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7771,
											"end": 7811,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7828,
											"end": 7847,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 7828,
											"end": 7847,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 858,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 7447,
											"end": 7853,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2620,
											"end": 2822,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2620,
											"end": 2822,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2728,
											"end": 2775,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2775,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2728,
											"end": 2775,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2775,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 2728,
											"end": 2815,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2779,
											"end": 2815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10273,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10254,
											"end": 10273,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "344"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8060,
											"end": 8062,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8042,
											"end": 8063,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8099,
											"end": 8101,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8079,
											"end": 8097,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 8079,
											"end": 8097,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8079,
											"end": 8097,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8072,
											"end": 8102,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8138,
											"end": 8172,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 8118,
											"end": 8136,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 8118,
											"end": 8136,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8118,
											"end": 8136,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8111,
											"end": 8173,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8189,
											"end": 8207,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 8189,
											"end": 8207,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8189,
											"end": 8207,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8182,
											"end": 8216,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8233,
											"end": 8252,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 8233,
											"end": 8252,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 7858,
											"end": 8258,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "tag",
											"source": 6,
											"value": "344"
										},
										{
											"begin": 10246,
											"end": 10314,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10332,
											"end": 10353,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10332,
											"end": 10353,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "347"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8465,
											"end": 8467,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8447,
											"end": 8468,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8504,
											"end": 8506,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 8484,
											"end": 8502,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8484,
											"end": 8502,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8484,
											"end": 8502,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8477,
											"end": 8507,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8543,
											"end": 8577,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 8523,
											"end": 8541,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 8523,
											"end": 8541,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8523,
											"end": 8541,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8516,
											"end": 8578,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8594,
											"end": 8612,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 8594,
											"end": 8612,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8594,
											"end": 8612,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8587,
											"end": 8619,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8636,
											"end": 8655,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 8636,
											"end": 8655,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 8263,
											"end": 8661,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "tag",
											"source": 6,
											"value": "347"
										},
										{
											"begin": 10324,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10414,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10430,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10403,
											"end": 10439,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "PUSH",
											"source": 6,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10454,
											"end": 10486,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10123,
											"end": 10493,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10900,
											"end": 10924,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10966,
											"end": 11003,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11003,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11047,
											"end": 11053,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11043,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "354"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8868,
											"end": 8870,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8850,
											"end": 8871,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8907,
											"end": 8909,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 8887,
											"end": 8905,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8887,
											"end": 8905,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8887,
											"end": 8905,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8880,
											"end": 8910,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8946,
											"end": 8977,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 8926,
											"end": 8944,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 8926,
											"end": 8944,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8926,
											"end": 8944,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8919,
											"end": 8978,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8995,
											"end": 9013,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 8995,
											"end": 9013,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 8666,
											"end": 9019,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "tag",
											"source": 6,
											"value": "354"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 11138,
											"end": 11143,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11145,
											"end": 11152,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11173,
											"end": 11179,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11154,
											"end": 11170,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11154,
											"end": 11179,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11129,
											"end": 11137,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "tag",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10890,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3595,
											"end": 4037,
											"name": "tag",
											"source": 17,
											"value": "209"
										},
										{
											"begin": 3595,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3738,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3744,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "359"
										},
										{
											"begin": 3723,
											"end": 3767,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3763,
											"name": "PUSH",
											"source": 17,
											"value": "C"
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 3748,
											"end": 3767,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3723,
											"end": 3767,
											"name": "tag",
											"source": 17,
											"value": "359"
										},
										{
											"begin": 3723,
											"end": 3767,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3719,
											"end": 3839,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3719,
											"end": 3839,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "361"
										},
										{
											"begin": 3719,
											"end": 3839,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3784,
											"end": 3817,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "361"
										},
										{
											"begin": 3800,
											"end": 3804,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3806,
											"end": 3808,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3810,
											"end": 3816,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3784,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "362"
										},
										{
											"begin": 3784,
											"end": 3817,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3784,
											"end": 3817,
											"name": "tag",
											"source": 17,
											"value": "361"
										},
										{
											"begin": 3784,
											"end": 3817,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3855,
											"end": 3866,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3869,
											"end": 3904,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "364"
										},
										{
											"begin": 3899,
											"end": 3903,
											"name": "PUSH",
											"source": 17,
											"value": "3E8"
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "365"
										},
										{
											"begin": 3880,
											"end": 3893,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 3880,
											"end": 3893,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3875,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3879,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "366"
										},
										{
											"begin": 3869,
											"end": 3879,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "tag",
											"source": 17,
											"value": "365"
										},
										{
											"begin": 3869,
											"end": 3894,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3898,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3869,
											"end": 3898,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "367"
										},
										{
											"begin": 3869,
											"end": 3904,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3869,
											"end": 3904,
											"name": "tag",
											"source": 17,
											"value": "364"
										},
										{
											"begin": 3869,
											"end": 3904,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3855,
											"end": 3904,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "368"
										},
										{
											"begin": 3855,
											"end": 3904,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "369"
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "tag",
											"source": 17,
											"value": "368"
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3915,
											"end": 3928,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3941,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "370"
										},
										{
											"begin": 3957,
											"end": 3961,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3963,
											"end": 3965,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3967,
											"end": 3973,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3941,
											"end": 3956,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "362"
										},
										{
											"begin": 3941,
											"end": 3974,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3941,
											"end": 3974,
											"name": "tag",
											"source": 17,
											"value": "370"
										},
										{
											"begin": 3941,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4007,
											"end": 4023,
											"name": "PUSH",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 4007,
											"end": 4023,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 3985,
											"end": 4029,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "357"
										},
										{
											"begin": 3985,
											"end": 4029,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4001,
											"end": 4005,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 4001,
											"end": 4005,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4023,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 4025,
											"end": 4028,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3985,
											"end": 4000,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "362"
										},
										{
											"begin": 3985,
											"end": 4029,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3335,
											"end": 3827,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 3335,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3423,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "373"
										},
										{
											"begin": 3431,
											"end": 3435,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3437,
											"end": 3444,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3423,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 3423,
											"end": 3445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3423,
											"end": 3445,
											"name": "tag",
											"source": 0,
											"value": "373"
										},
										{
											"begin": 3423,
											"end": 3445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3418,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 3418,
											"end": 3821,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3606,
											"end": 3647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 3634,
											"end": 3641,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3606,
											"end": 3647,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3644,
											"end": 3646,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3606,
											"end": 3625,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 3606,
											"end": 3647,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3606,
											"end": 3647,
											"name": "tag",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 3606,
											"end": 3647,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3718,
											"end": 3756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "377"
										},
										{
											"begin": 3746,
											"end": 3750,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3753,
											"end": 3755,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3718,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 3718,
											"end": 3756,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3718,
											"end": 3756,
											"name": "tag",
											"source": 0,
											"value": "377"
										},
										{
											"begin": 3718,
											"end": 3756,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "378"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "379"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "tag",
											"source": 0,
											"value": "378"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3778,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3461,
											"end": 3810,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1978,
											"end": 2144,
											"name": "tag",
											"source": 1,
											"value": "218"
										},
										{
											"begin": 1978,
											"end": 2144,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2065,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "382"
										},
										{
											"begin": 2082,
											"end": 2086,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2088,
											"end": 2095,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2065,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 2065,
											"end": 2096,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2065,
											"end": 2096,
											"name": "tag",
											"source": 1,
											"value": "382"
										},
										{
											"begin": 2065,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2118,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2124,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "217"
										},
										{
											"begin": 2106,
											"end": 2137,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2129,
											"end": 2136,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2106,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "184"
										},
										{
											"begin": 2106,
											"end": 2137,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2404,
											"name": "tag",
											"source": 1,
											"value": "237"
										},
										{
											"begin": 2233,
											"end": 2404,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 2339,
											"end": 2343,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2345,
											"end": 2352,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2321,
											"end": 2338,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "tag",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2375,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2381,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2397,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "217"
										},
										{
											"begin": 2363,
											"end": 2397,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2389,
											"end": 2396,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2363,
											"end": 2388,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "388"
										},
										{
											"begin": 2363,
											"end": 2397,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9124,
											"end": 9700,
											"name": "tag",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 9124,
											"end": 9700,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9207,
											"end": 9228,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9207,
											"end": 9228,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "390"
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10147,
											"end": 10149,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10129,
											"end": 10150,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10186,
											"end": 10188,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 10166,
											"end": 10184,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 10166,
											"end": 10184,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10166,
											"end": 10184,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10159,
											"end": 10189,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10225,
											"end": 10259,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 10205,
											"end": 10223,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 10205,
											"end": 10223,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10205,
											"end": 10223,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10198,
											"end": 10260,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10276,
											"end": 10294,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 10276,
											"end": 10294,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10276,
											"end": 10294,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10269,
											"end": 10300,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10317,
											"end": 10336,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 10317,
											"end": 10336,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 9945,
											"end": 10342,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "tag",
											"source": 6,
											"value": "390"
										},
										{
											"begin": 9199,
											"end": 9266,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9277,
											"end": 9326,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "393"
										},
										{
											"begin": 9298,
											"end": 9305,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9315,
											"end": 9316,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9319,
											"end": 9325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9277,
											"end": 9297,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "394"
										},
										{
											"begin": 9277,
											"end": 9326,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9277,
											"end": 9326,
											"name": "tag",
											"source": 6,
											"value": "393"
										},
										{
											"begin": 9277,
											"end": 9326,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9337,
											"end": 9359,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9371,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9362,
											"end": 9380,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9398,
											"end": 9422,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9398,
											"end": 9422,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9398,
											"end": 9422,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 9398,
											"end": 9422,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10549,
											"end": 10551,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10531,
											"end": 10552,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10588,
											"end": 10590,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 10568,
											"end": 10586,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 10568,
											"end": 10586,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10568,
											"end": 10586,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10561,
											"end": 10591,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10627,
											"end": 10661,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 10607,
											"end": 10625,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 10607,
											"end": 10625,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10607,
											"end": 10625,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10600,
											"end": 10662,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10678,
											"end": 10696,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 10678,
											"end": 10696,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10678,
											"end": 10696,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10671,
											"end": 10703,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10720,
											"end": 10739,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 10720,
											"end": 10739,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 10347,
											"end": 10745,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "tag",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 9390,
											"end": 9461,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9504,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9539,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9539,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9539,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9539,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9539,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9571,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9533,
											"end": 9539,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9533,
											"end": 9539,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9495,
											"end": 9513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9533,
											"end": 9539,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9533,
											"end": 9539,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "369"
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "tag",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9559,
											"end": 9581,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9623,
											"end": 9624,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9623,
											"end": 9624,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "PUSH",
											"source": 6,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9597,
											"end": 9634,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "100"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 4,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 8870,
											"end": 9026,
											"name": "tag",
											"source": 16,
											"value": "273"
										},
										{
											"begin": 8870,
											"end": 9026,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8944,
											"end": 8951,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8994,
											"end": 9016,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 8998,
											"end": 9001,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 9010,
											"end": 9015,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8994,
											"end": 8997,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "405"
										},
										{
											"begin": 8994,
											"end": 9016,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 8413,
											"end": 8528,
											"name": "tag",
											"source": 16,
											"value": "299"
										},
										{
											"begin": 8413,
											"end": 8528,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8476,
											"end": 8483,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8502,
											"end": 8521,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 8510,
											"end": 8513,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4028,
											"end": 4046,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 4028,
											"end": 4046,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3946,
											"end": 4053,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1697,
											"end": 2101,
											"name": "tag",
											"source": 16,
											"value": "330"
										},
										{
											"begin": 1697,
											"end": 2101,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1760,
											"end": 1764,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3846,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 3834,
											"end": 3846,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3846,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3834,
											"end": 3853,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1776,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1776,
											"end": 2095,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1829,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1818,
											"end": 1841,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1988,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1988,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1988,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 1995,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 2016,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 2016,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 2016,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1976,
											"end": 2016,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 2030,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 2030,
											"end": 2041,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1776,
											"end": 2095,
											"name": "tag",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1776,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2079,
											"end": 2084,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2072,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 2072,
											"end": 2084,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7488,
											"end": 8139,
											"name": "tag",
											"source": 6,
											"value": "362"
										},
										{
											"begin": 7488,
											"end": 8139,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7614,
											"end": 7632,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7614,
											"end": 7632,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "417"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10952,
											"end": 10954,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10934,
											"end": 10955,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10991,
											"end": 10993,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 10971,
											"end": 10989,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 10971,
											"end": 10989,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10971,
											"end": 10989,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10964,
											"end": 10994,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11030,
											"end": 11064,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 11010,
											"end": 11028,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11010,
											"end": 11028,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11010,
											"end": 11028,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11003,
											"end": 11065,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11081,
											"end": 11099,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 11081,
											"end": 11099,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11081,
											"end": 11099,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11074,
											"end": 11109,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11126,
											"end": 11145,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 11126,
											"end": 11145,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 10750,
											"end": 11151,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "tag",
											"source": 6,
											"value": "417"
										},
										{
											"begin": 7606,
											"end": 7674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7692,
											"end": 7708,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7692,
											"end": 7708,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "420"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11358,
											"end": 11360,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11340,
											"end": 11361,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11397,
											"end": 11399,
											"name": "PUSH",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 11377,
											"end": 11395,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 11377,
											"end": 11395,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11377,
											"end": 11395,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11370,
											"end": 11400,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11436,
											"end": 11470,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11416,
											"end": 11434,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11416,
											"end": 11434,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11416,
											"end": 11434,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11409,
											"end": 11471,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11487,
											"end": 11505,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 11487,
											"end": 11505,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11487,
											"end": 11505,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11480,
											"end": 11513,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11530,
											"end": 11549,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 11530,
											"end": 11549,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 11156,
											"end": 11555,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "tag",
											"source": 6,
											"value": "420"
										},
										{
											"begin": 7684,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7759,
											"end": 7797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "423"
										},
										{
											"begin": 7780,
											"end": 7784,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7786,
											"end": 7788,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7790,
											"end": 7796,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7759,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "394"
										},
										{
											"begin": 7759,
											"end": 7797,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7759,
											"end": 7797,
											"name": "tag",
											"source": 6,
											"value": "423"
										},
										{
											"begin": 7759,
											"end": 7797,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7808,
											"end": 7827,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7839,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7830,
											"end": 7845,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 7863,
											"end": 7884,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "424"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11762,
											"end": 11764,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11744,
											"end": 11765,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11801,
											"end": 11803,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11774,
											"end": 11804,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11840,
											"end": 11874,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 11820,
											"end": 11838,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11820,
											"end": 11838,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11820,
											"end": 11838,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11813,
											"end": 11875,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11891,
											"end": 11909,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 11891,
											"end": 11909,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11891,
											"end": 11909,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11884,
											"end": 11920,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11937,
											"end": 11956,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 11937,
											"end": 11956,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 11560,
											"end": 11962,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "tag",
											"source": 6,
											"value": "424"
										},
										{
											"begin": 7855,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7970,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7979,
											"end": 7999,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7999,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7999,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8032,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7976,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "427"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7993,
											"end": 7999,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "tag",
											"source": 6,
											"value": "427"
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8019,
											"end": 8042,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8073,
											"end": 8075,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8067,
											"end": 8071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8077,
											"end": 8083,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "428"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "tag",
											"source": 6,
											"value": "428"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8058,
											"end": 8084,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 8095,
											"end": 8132,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 4387,
											"end": 4532,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "tag",
											"source": 15,
											"value": "366"
										},
										{
											"begin": 3451,
											"end": 3547,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3509,
											"end": 3516,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "272"
										},
										{
											"begin": 3539,
											"end": 3540,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3535,
											"end": 3536,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "432"
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "tag",
											"source": 15,
											"value": "367"
										},
										{
											"begin": 3836,
											"end": 3932,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "272"
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3920,
											"end": 3921,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "435"
										},
										{
											"begin": 3920,
											"end": 3925,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "tag",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1663,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 1688,
											"end": 1707,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "tag",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1733,
											"end": 1734,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "tag",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1751,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1752,
											"end": 1753,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "BYTE",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "MSTORE8",
											"source": 12
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "POP",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1776,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "tag",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "BYTE",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "MSTORE8",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1809,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 1816,
											"end": 1822,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1812,
											"end": 1813,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "tag",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1825,
											"end": 1826,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "tag",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1832,
											"end": 1833,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1828,
											"end": 1833,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1879,
											"end": 1884,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 12,
											"value": "F"
										},
										{
											"begin": 1879,
											"end": 1890,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "tag",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "BYTE",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 12,
											"value": "F8"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1861,
											"end": 1862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "tag",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "BYTE",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "MSTORE8",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "tag",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12969,
											"end": 12971,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12951,
											"end": 12972,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 12951,
											"end": 12972,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 12951,
											"end": 12972,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12988,
											"end": 13006,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12988,
											"end": 13006,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12988,
											"end": 13006,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12981,
											"end": 13011,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13047,
											"end": 13081,
											"name": "PUSH",
											"source": 18,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 13027,
											"end": 13045,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 13027,
											"end": 13045,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13027,
											"end": 13045,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13020,
											"end": 13082,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13099,
											"end": 13117,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 13099,
											"end": 13117,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 12767,
											"end": 13123,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7219,
											"end": 7453,
											"name": "tag",
											"source": 0,
											"value": "386"
										},
										{
											"begin": 7219,
											"end": 7453,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7302,
											"end": 7324,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "463"
										},
										{
											"begin": 7310,
											"end": 7314,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7316,
											"end": 7323,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7302,
											"end": 7309,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 7302,
											"end": 7324,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7302,
											"end": 7324,
											"name": "tag",
											"source": 0,
											"value": "463"
										},
										{
											"begin": 7302,
											"end": 7324,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7298,
											"end": 7447,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7298,
											"end": 7447,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 7298,
											"end": 7447,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7372,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7369,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7377,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7340,
											"end": 7377,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7377,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7377,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7396,
											"end": 7436,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7396,
											"end": 7436,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 7396,
											"end": 7436,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7372,
											"end": 7377,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7396,
											"end": 7436,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7219,
											"end": 7453,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7219,
											"end": 7453,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7219,
											"end": 7453,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7930,
											"end": 8086,
											"name": "tag",
											"source": 16,
											"value": "388"
										},
										{
											"begin": 7930,
											"end": 8086,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8003,
											"end": 8007,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8026,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 8034,
											"end": 8037,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8054,
											"end": 8077,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 8054,
											"end": 8077,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 8026,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "468"
										},
										{
											"begin": 8026,
											"end": 8079,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1444,
											"end": 1919,
											"name": "tag",
											"source": 17,
											"value": "394"
										},
										{
											"begin": 1444,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1645,
											"name": "PUSH",
											"source": 17,
											"value": "A"
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 1632,
											"end": 1651,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1631,
											"end": 1651,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "470"
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 13330,
											"end": 13332,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 13312,
											"end": 13333,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13369,
											"end": 13371,
											"name": "PUSH",
											"source": 18,
											"value": "2E"
										},
										{
											"begin": 13349,
											"end": 13367,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 13349,
											"end": 13367,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13349,
											"end": 13367,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13342,
											"end": 13372,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13408,
											"end": 13442,
											"name": "PUSH",
											"source": 18,
											"value": "4865726F204177616B656E20546F6B656E3A207468652073656E646572206861"
										},
										{
											"begin": 13388,
											"end": 13406,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 13388,
											"end": 13406,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13388,
											"end": 13406,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13381,
											"end": 13443,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1CC81899595B88189B1BD8DAD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13459,
											"end": 13477,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 13459,
											"end": 13477,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13459,
											"end": 13477,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13452,
											"end": 13496,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13513,
											"end": 13532,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 13513,
											"end": 13532,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "224"
										},
										{
											"begin": 13128,
											"end": 13538,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "tag",
											"source": 17,
											"value": "470"
										},
										{
											"begin": 1609,
											"end": 1725,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1774,
											"name": "PUSH",
											"source": 17,
											"value": "B"
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 1759,
											"end": 1778,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1758,
											"end": 1778,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "473"
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 13745,
											"end": 13747,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 13727,
											"end": 13748,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13784,
											"end": 13786,
											"name": "PUSH",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 13764,
											"end": 13782,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 13764,
											"end": 13782,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13764,
											"end": 13782,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13757,
											"end": 13787,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13823,
											"end": 13857,
											"name": "PUSH",
											"source": 18,
											"value": "4865726F204177616B656E20546F6B656E3A2074686520726563656976657220"
										},
										{
											"begin": 13803,
											"end": 13821,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 13803,
											"end": 13821,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13803,
											"end": 13821,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13796,
											"end": 13858,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A185CC81899595B88189B1BD8DAD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13874,
											"end": 13892,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 13874,
											"end": 13892,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13874,
											"end": 13892,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13867,
											"end": 13913,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13930,
											"end": 13949,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 13930,
											"end": 13949,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "224"
										},
										{
											"begin": 13543,
											"end": 13955,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "tag",
											"source": 17,
											"value": "473"
										},
										{
											"begin": 1736,
											"end": 1854,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1867,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "217"
										},
										{
											"begin": 1894,
											"end": 1898,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1900,
											"end": 1902,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1904,
											"end": 1910,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1867,
											"end": 1893,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "185"
										},
										{
											"begin": 1867,
											"end": 1911,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "tag",
											"source": 16,
											"value": "405"
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4462,
											"end": 4469,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4488,
											"end": 4491,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4499,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4488,
											"end": 4499,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4500,
											"end": 4505,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "480"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "480"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "tag",
											"source": 16,
											"value": "480"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4488,
											"end": 4506,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 4481,
											"end": 4506,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4481,
											"end": 4506,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4395,
											"end": 4513,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2269,
											"end": 3657,
											"name": "tag",
											"source": 16,
											"value": "468"
										},
										{
											"begin": 2269,
											"end": 3657,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2335,
											"end": 2339,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2484,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2472,
											"end": 2484,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2484,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 2472,
											"end": 2491,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 2506,
											"end": 2521,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2506,
											"end": 2521,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2502,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 2502,
											"end": 3651,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2875,
											"end": 2896,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 2912,
											"end": 2913,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2899,
											"end": 2909,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "369"
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "tag",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2947,
											"end": 2965,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2947,
											"end": 2965,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 2875,
											"end": 2913,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2875,
											"end": 2913,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2927,
											"end": 2944,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2927,
											"end": 2944,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "487"
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2968,
											"end": 2969,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2968,
											"end": 2969,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "369"
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "tag",
											"source": 16,
											"value": "487"
										},
										{
											"begin": 2947,
											"end": 2969,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2927,
											"end": 2969,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2927,
											"end": 2969,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3001,
											"end": 3014,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2988,
											"end": 2997,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2988,
											"end": 3014,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 2984,
											"end": 3382,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "488"
										},
										{
											"begin": 2984,
											"end": 3382,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3034,
											"end": 3051,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3057,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3065,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3065,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3066,
											"end": 3075,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "490"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "490"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "tag",
											"source": 16,
											"value": "490"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3054,
											"end": 3076,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 3034,
											"end": 3076,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3034,
											"end": 3076,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3205,
											"end": 3214,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3179,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3187,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3176,
											"end": 3187,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3188,
											"end": 3201,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "493"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "493"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "tag",
											"source": 16,
											"value": "493"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3202,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3214,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3214,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3214,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3176,
											"end": 3214,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3300,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 3288,
											"end": 3300,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3300,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3311,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3324,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3324,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3288,
											"end": 3324,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 2984,
											"end": 3382,
											"name": "tag",
											"source": 16,
											"value": "488"
										},
										{
											"begin": 2984,
											"end": 3382,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SLOAD",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3463,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3463,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "496"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "496"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "497"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "tag",
											"source": 16,
											"value": "496"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3460,
											"end": 3477,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3555,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3564,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 3552,
											"end": 3564,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3570,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3552,
											"end": 3571,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3545,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3545,
											"end": 3571,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3545,
											"end": 3571,
											"name": "SSTORE",
											"source": 16
										},
										{
											"begin": 3593,
											"end": 3597,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 3586,
											"end": 3597,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2502,
											"end": 3651,
											"name": "tag",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 2502,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3635,
											"end": 3640,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 14,
											"end": 300,
											"name": "tag",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 14,
											"end": 300,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 72,
											"end": 78,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 127,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 113,
											"end": 122,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 104,
											"end": 111,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 100,
											"end": 123,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 96,
											"end": 128,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 93,
											"end": 145,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 93,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "506"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 141,
											"end": 142,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 139,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 131,
											"end": 143,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 93,
											"end": 145,
											"name": "tag",
											"source": 18,
											"value": "506"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 167,
											"end": 190,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 167,
											"end": 190,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 219,
											"end": 251,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 219,
											"end": 251,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 209,
											"end": 252,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 209,
											"end": 252,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 199,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "272"
										},
										{
											"begin": 199,
											"end": 270,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 266,
											"end": 267,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 264,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 256,
											"end": 268,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 497,
											"end": 755,
											"name": "tag",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 497,
											"end": 755,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 569,
											"end": 570,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "tag",
											"source": 18,
											"value": "510"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 593,
											"end": 599,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 590,
											"end": 591,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 587,
											"end": 600,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 579,
											"end": 692,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 579,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "512"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 669,
											"end": 680,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 669,
											"end": 680,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 669,
											"end": 680,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 663,
											"end": 681,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 650,
											"end": 661,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 650,
											"end": 661,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 650,
											"end": 661,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 643,
											"end": 682,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 615,
											"end": 617,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 608,
											"end": 618,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 579,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "510"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 579,
											"end": 692,
											"name": "tag",
											"source": 18,
											"value": "512"
										},
										{
											"begin": 579,
											"end": 692,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 710,
											"end": 716,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 707,
											"end": 708,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 704,
											"end": 717,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 701,
											"end": 749,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 701,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "357"
										},
										{
											"begin": 701,
											"end": 749,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 746,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 743,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 727,
											"end": 743,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 720,
											"end": 747,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 497,
											"end": 755,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "tag",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 909,
											"end": 911,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 891,
											"end": 912,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 872,
											"end": 876,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 941,
											"end": 947,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 935,
											"end": 948,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 984,
											"end": 990,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 979,
											"end": 981,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 964,
											"end": 982,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 957,
											"end": 991,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "515"
										},
										{
											"begin": 1059,
											"end": 1065,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1054,
											"end": 1056,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1043,
											"end": 1052,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1039,
											"end": 1057,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1034,
											"end": 1036,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1026,
											"end": 1032,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1022,
											"end": 1037,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "tag",
											"source": 18,
											"value": "515"
										},
										{
											"begin": 1000,
											"end": 1066,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1127,
											"end": 1129,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 1106,
											"end": 1121,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1102,
											"end": 1131,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1087,
											"end": 1132,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1134,
											"end": 1136,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1083,
											"end": 1137,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1083,
											"end": 1137,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 760,
											"end": 1143,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "tag",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1216,
											"end": 1236,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1216,
											"end": 1236,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1265,
											"end": 1296,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1265,
											"end": 1296,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1255,
											"end": 1297,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1255,
											"end": 1297,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "517"
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1311,
											"end": 1312,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1308,
											"end": 1309,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "tag",
											"source": 18,
											"value": "517"
										},
										{
											"begin": 1245,
											"end": 1315,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1148,
											"end": 1321,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "tag",
											"source": 18,
											"value": "58"
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1394,
											"end": 1400,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "519"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 18,
											"value": "519"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "520"
										},
										{
											"begin": 1513,
											"end": 1522,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "tag",
											"source": 18,
											"value": "520"
										},
										{
											"begin": 1494,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1484,
											"end": 1523,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1570,
											"end": 1572,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1555,
											"end": 1573,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1574,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1574,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1326,
											"end": 1580,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "tag",
											"source": 18,
											"value": "67"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1844,
											"end": 1850,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1858,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1860,
											"end": 1866,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1913,
											"end": 1915,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1901,
											"end": 1910,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1892,
											"end": 1899,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1888,
											"end": 1911,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1916,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "523"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1929,
											"end": 1930,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1926,
											"end": 1927,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "tag",
											"source": 18,
											"value": "523"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "524"
										},
										{
											"begin": 1971,
											"end": 1980,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "tag",
											"source": 18,
											"value": "524"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "525"
										},
										{
											"begin": 2034,
											"end": 2036,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2023,
											"end": 2032,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2019,
											"end": 2037,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "tag",
											"source": 18,
											"value": "525"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2085,
											"end": 2087,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2083,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2057,
											"end": 2089,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "tag",
											"source": 18,
											"value": "72"
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2159,
											"end": 2165,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2214,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2200,
											"end": 2209,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2191,
											"end": 2198,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2187,
											"end": 2210,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2183,
											"end": 2215,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "527"
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2229,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2225,
											"end": 2226,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2218,
											"end": 2230,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "tag",
											"source": 18,
											"value": "527"
										},
										{
											"begin": 2180,
											"end": 2232,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2251,
											"end": 2274,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2251,
											"end": 2274,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2100,
											"end": 2280,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2535,
											"end": 2541,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2543,
											"end": 2549,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2596,
											"end": 2598,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2584,
											"end": 2593,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2575,
											"end": 2582,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2571,
											"end": 2594,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2567,
											"end": 2599,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "530"
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2612,
											"end": 2613,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2610,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2602,
											"end": 2614,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "tag",
											"source": 18,
											"value": "530"
										},
										{
											"begin": 2564,
											"end": 2616,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2648,
											"end": 2657,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2635,
											"end": 2658,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2625,
											"end": 2658,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2625,
											"end": 2658,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "531"
										},
										{
											"begin": 2711,
											"end": 2713,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2700,
											"end": 2709,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2696,
											"end": 2714,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "tag",
											"source": 18,
											"value": "531"
										},
										{
											"begin": 2677,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2667,
											"end": 2715,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2667,
											"end": 2715,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2467,
											"end": 2721,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3100,
											"end": 3286,
											"name": "tag",
											"source": 18,
											"value": "103"
										},
										{
											"begin": 3100,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3159,
											"end": 3165,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3214,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3200,
											"end": 3209,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3191,
											"end": 3198,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3187,
											"end": 3210,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3183,
											"end": 3215,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "536"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3228,
											"end": 3229,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3225,
											"end": 3226,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3218,
											"end": 3230,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "tag",
											"source": 18,
											"value": "536"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "272"
										},
										{
											"begin": 3270,
											"end": 3279,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3499,
											"end": 3659,
											"name": "tag",
											"source": 18,
											"value": "502"
										},
										{
											"begin": 3499,
											"end": 3659,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3564,
											"end": 3584,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3564,
											"end": 3584,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 3620,
											"end": 3633,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3620,
											"end": 3633,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3613,
											"end": 3634,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3603,
											"end": 3635,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3603,
											"end": 3635,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3593,
											"end": 3653,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "517"
										},
										{
											"begin": 3593,
											"end": 3653,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3649,
											"end": 3650,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3646,
											"end": 3647,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3639,
											"end": 3651,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "tag",
											"source": 18,
											"value": "120"
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3735,
											"end": 3741,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3749,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3751,
											"end": 3757,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3804,
											"end": 3806,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 3792,
											"end": 3801,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3783,
											"end": 3790,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3779,
											"end": 3802,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3775,
											"end": 3807,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3772,
											"end": 3824,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3772,
											"end": 3824,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "542"
										},
										{
											"begin": 3772,
											"end": 3824,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3820,
											"end": 3821,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3817,
											"end": 3818,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3810,
											"end": 3822,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3772,
											"end": 3824,
											"name": "tag",
											"source": 18,
											"value": "542"
										},
										{
											"begin": 3772,
											"end": 3824,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3843,
											"end": 3872,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "543"
										},
										{
											"begin": 3862,
											"end": 3871,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3843,
											"end": 3872,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 3843,
											"end": 3872,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3843,
											"end": 3872,
											"name": "tag",
											"source": 18,
											"value": "543"
										},
										{
											"begin": 3843,
											"end": 3872,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3833,
											"end": 3872,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3833,
											"end": 3872,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3891,
											"end": 3926,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "544"
										},
										{
											"begin": 3922,
											"end": 3924,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3911,
											"end": 3920,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3907,
											"end": 3925,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3891,
											"end": 3926,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "502"
										},
										{
											"begin": 3891,
											"end": 3926,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3891,
											"end": 3926,
											"name": "tag",
											"source": 18,
											"value": "544"
										},
										{
											"begin": 3891,
											"end": 3926,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3881,
											"end": 3926,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3881,
											"end": 3926,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3945,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "545"
										},
										{
											"begin": 3976,
											"end": 3978,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 3965,
											"end": 3974,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3961,
											"end": 3979,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3945,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "502"
										},
										{
											"begin": 3945,
											"end": 3980,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3945,
											"end": 3980,
											"name": "tag",
											"source": 18,
											"value": "545"
										},
										{
											"begin": 3945,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3935,
											"end": 3980,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3935,
											"end": 3980,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3664,
											"end": 3986,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3991,
											"end": 4239,
											"name": "tag",
											"source": 18,
											"value": "127"
										},
										{
											"begin": 3991,
											"end": 4239,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4067,
											"end": 4073,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4120,
											"end": 4122,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4108,
											"end": 4117,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4099,
											"end": 4106,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4095,
											"end": 4118,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4091,
											"end": 4123,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 4088,
											"end": 4140,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4088,
											"end": 4140,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "547"
										},
										{
											"begin": 4088,
											"end": 4140,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4136,
											"end": 4137,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4133,
											"end": 4134,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4126,
											"end": 4138,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4088,
											"end": 4140,
											"name": "tag",
											"source": 18,
											"value": "547"
										},
										{
											"begin": 4088,
											"end": 4140,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4159,
											"end": 4182,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4159,
											"end": 4182,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4159,
											"end": 4182,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4229,
											"end": 4231,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4214,
											"end": 4232,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4214,
											"end": 4232,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4214,
											"end": 4232,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4201,
											"end": 4233,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4201,
											"end": 4233,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3991,
											"end": 4239,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4244,
											"end": 4504,
											"name": "tag",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 4244,
											"end": 4504,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4312,
											"end": 4318,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4320,
											"end": 4326,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4373,
											"end": 4375,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4361,
											"end": 4370,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4352,
											"end": 4359,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4348,
											"end": 4371,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4344,
											"end": 4376,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 4341,
											"end": 4393,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4341,
											"end": 4393,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "549"
										},
										{
											"begin": 4341,
											"end": 4393,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4389,
											"end": 4390,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4386,
											"end": 4387,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4379,
											"end": 4391,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4341,
											"end": 4393,
											"name": "tag",
											"source": 18,
											"value": "549"
										},
										{
											"begin": 4341,
											"end": 4393,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4412,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "550"
										},
										{
											"begin": 4431,
											"end": 4440,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4412,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 4412,
											"end": 4441,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 4412,
											"end": 4441,
											"name": "tag",
											"source": 18,
											"value": "550"
										},
										{
											"begin": 4412,
											"end": 4441,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4402,
											"end": 4441,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4402,
											"end": 4441,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4460,
											"end": 4498,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "531"
										},
										{
											"begin": 4494,
											"end": 4496,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4483,
											"end": 4492,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4479,
											"end": 4497,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4460,
											"end": 4498,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 4460,
											"end": 4498,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "tag",
											"source": 18,
											"value": "193"
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4861,
											"end": 4862,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 4857,
											"end": 4869,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4857,
											"end": 4869,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4857,
											"end": 4869,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 4857,
											"end": 4869,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4904,
											"end": 4916,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4904,
											"end": 4916,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4904,
											"end": 4916,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4925,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "554"
										},
										{
											"begin": 4925,
											"end": 4986,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4979,
											"end": 4983,
											"name": "PUSH",
											"source": 18,
											"value": "7F"
										},
										{
											"begin": 4971,
											"end": 4977,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4967,
											"end": 4984,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4957,
											"end": 4984,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4957,
											"end": 4984,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4925,
											"end": 4986,
											"name": "tag",
											"source": 18,
											"value": "554"
										},
										{
											"begin": 4925,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5032,
											"end": 5034,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5024,
											"end": 5030,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5021,
											"end": 5035,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 5001,
											"end": 5019,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4998,
											"end": 5036,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4995,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "555"
										},
										{
											"begin": 4995,
											"end": 5156,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5078,
											"end": 5088,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 5073,
											"end": 5076,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 5069,
											"end": 5089,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5059,
											"end": 5090,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5113,
											"end": 5117,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 5110,
											"end": 5111,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5103,
											"end": 5118,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5141,
											"end": 5145,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5138,
											"end": 5139,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5131,
											"end": 5146,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4995,
											"end": 5156,
											"name": "tag",
											"source": 18,
											"value": "555"
										},
										{
											"begin": 4995,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4995,
											"end": 5156,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4782,
											"end": 5162,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5167,
											"end": 5523,
											"name": "tag",
											"source": 18,
											"value": "225"
										},
										{
											"begin": 5167,
											"end": 5523,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5369,
											"end": 5371,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5351,
											"end": 5372,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5351,
											"end": 5372,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5351,
											"end": 5372,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5388,
											"end": 5406,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5388,
											"end": 5406,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5388,
											"end": 5406,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5381,
											"end": 5411,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5447,
											"end": 5481,
											"name": "PUSH",
											"source": 18,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5442,
											"end": 5444,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5427,
											"end": 5445,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5427,
											"end": 5445,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5420,
											"end": 5482,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5514,
											"end": 5516,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 5499,
											"end": 5517,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5499,
											"end": 5517,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5167,
											"end": 5523,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6369,
											"end": 6496,
											"name": "tag",
											"source": 18,
											"value": "503"
										},
										{
											"begin": 6369,
											"end": 6496,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6430,
											"end": 6440,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 6425,
											"end": 6428,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 6421,
											"end": 6441,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 6418,
											"end": 6419,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6411,
											"end": 6442,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6461,
											"end": 6465,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 6458,
											"end": 6459,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 6451,
											"end": 6466,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6485,
											"end": 6489,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6482,
											"end": 6483,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 6501,
											"end": 6629,
											"name": "tag",
											"source": 18,
											"value": "242"
										},
										{
											"begin": 6501,
											"end": 6629,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6541,
											"end": 6544,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6572,
											"end": 6573,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6568,
											"end": 6574,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 6565,
											"end": 6566,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6562,
											"end": 6575,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 6559,
											"end": 6598,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6559,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "562"
										},
										{
											"begin": 6559,
											"end": 6598,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6578,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "562"
										},
										{
											"begin": 6578,
											"end": 6596,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "503"
										},
										{
											"begin": 6578,
											"end": 6596,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 6578,
											"end": 6596,
											"name": "tag",
											"source": 18,
											"value": "562"
										},
										{
											"begin": 6578,
											"end": 6596,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6614,
											"end": 6623,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6614,
											"end": 6623,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6501,
											"end": 6629,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 9024,
											"end": 9149,
											"name": "tag",
											"source": 18,
											"value": "369"
										},
										{
											"begin": 9024,
											"end": 9149,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9064,
											"end": 9068,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 9092,
											"end": 9093,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9089,
											"end": 9090,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9086,
											"end": 9094,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 9083,
											"end": 9117,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 9083,
											"end": 9117,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "571"
										},
										{
											"begin": 9083,
											"end": 9117,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "571"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "503"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "tag",
											"source": 18,
											"value": "571"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9134,
											"end": 9143,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 9134,
											"end": 9143,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 9024,
											"end": 9149,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 9154,
											"end": 9940,
											"name": "tag",
											"source": 18,
											"value": "379"
										},
										{
											"begin": 9154,
											"end": 9940,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9565,
											"end": 9590,
											"name": "PUSH",
											"source": 18,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 9560,
											"end": 9563,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 9553,
											"end": 9591,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9535,
											"end": 9538,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 9620,
											"end": 9626,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 9614,
											"end": 9627,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 9636,
											"end": 9698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "573"
										},
										{
											"begin": 9691,
											"end": 9697,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 9686,
											"end": 9688,
											"name": "PUSH",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 9681,
											"end": 9684,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 9677,
											"end": 9689,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9670,
											"end": 9674,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9662,
											"end": 9668,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 9658,
											"end": 9675,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9636,
											"end": 9698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 9636,
											"end": 9698,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 9636,
											"end": 9698,
											"name": "tag",
											"source": 18,
											"value": "573"
										},
										{
											"begin": 9636,
											"end": 9698,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B99036B4B9B9B4B733903937B6329"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9757,
											"end": 9759,
											"name": "PUSH",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 9717,
											"end": 9733,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 9717,
											"end": 9733,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 9717,
											"end": 9733,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9749,
											"end": 9760,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 9749,
											"end": 9760,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9749,
											"end": 9760,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9742,
											"end": 9782,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9807,
											"end": 9820,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 9807,
											"end": 9820,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 9829,
											"end": 9892,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "574"
										},
										{
											"begin": 9807,
											"end": 9820,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 9878,
											"end": 9880,
											"name": "PUSH",
											"source": 18,
											"value": "28"
										},
										{
											"begin": 9870,
											"end": 9881,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 9870,
											"end": 9881,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9863,
											"end": 9867,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9851,
											"end": 9868,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 9851,
											"end": 9868,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9829,
											"end": 9892,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 9829,
											"end": 9892,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 9829,
											"end": 9892,
											"name": "tag",
											"source": 18,
											"value": "574"
										},
										{
											"begin": 9829,
											"end": 9892,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9912,
											"end": 9929,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9931,
											"end": 9933,
											"name": "PUSH",
											"source": 18,
											"value": "28"
										},
										{
											"begin": 9908,
											"end": 9934,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9908,
											"end": 9934,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 9154,
											"end": 9940,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9154,
											"end": 9940,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 11967,
											"end": 12135,
											"name": "tag",
											"source": 18,
											"value": "432"
										},
										{
											"begin": 11967,
											"end": 12135,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 12007,
											"end": 12014,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12073,
											"end": 12074,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 12069,
											"end": 12070,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12065,
											"end": 12071,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 12061,
											"end": 12075,
											"name": "DIV",
											"source": 18
										},
										{
											"begin": 12058,
											"end": 12059,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 12055,
											"end": 12076,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 12050,
											"end": 12051,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12043,
											"end": 12052,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 12036,
											"end": 12053,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 12032,
											"end": 12077,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 12029,
											"end": 12100,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 12029,
											"end": 12100,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "582"
										},
										{
											"begin": 12029,
											"end": 12100,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "582"
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "503"
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "tag",
											"source": 18,
											"value": "582"
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12120,
											"end": 12129,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 12120,
											"end": 12129,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 11967,
											"end": 12135,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 12140,
											"end": 12357,
											"name": "tag",
											"source": 18,
											"value": "435"
										},
										{
											"begin": 12140,
											"end": 12357,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 12180,
											"end": 12181,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12206,
											"end": 12207,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12196,
											"end": 12328,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "584"
										},
										{
											"begin": 12196,
											"end": 12328,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 12250,
											"end": 12260,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 12245,
											"end": 12248,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 12241,
											"end": 12261,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 12238,
											"end": 12239,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12231,
											"end": 12262,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12285,
											"end": 12289,
											"name": "PUSH",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 12282,
											"end": 12283,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 12275,
											"end": 12290,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12313,
											"end": 12317,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12310,
											"end": 12311,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12303,
											"end": 12318,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 12196,
											"end": 12328,
											"name": "tag",
											"source": 18,
											"value": "584"
										},
										{
											"begin": 12196,
											"end": 12328,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12342,
											"end": 12351,
											"name": "DIV",
											"source": 18
										},
										{
											"begin": 12342,
											"end": 12351,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 12140,
											"end": 12357,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 12362,
											"end": 12489,
											"name": "tag",
											"source": 18,
											"value": "441"
										},
										{
											"begin": 12362,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 12423,
											"end": 12433,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 12418,
											"end": 12421,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 12414,
											"end": 12434,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 12411,
											"end": 12412,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12404,
											"end": 12435,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12454,
											"end": 12458,
											"name": "PUSH",
											"source": 18,
											"value": "41"
										},
										{
											"begin": 12451,
											"end": 12452,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 12444,
											"end": 12459,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12478,
											"end": 12482,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12475,
											"end": 12476,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12468,
											"end": 12483,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 12494,
											"end": 12621,
											"name": "tag",
											"source": 18,
											"value": "445"
										},
										{
											"begin": 12494,
											"end": 12621,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 12555,
											"end": 12565,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 12550,
											"end": 12553,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 12546,
											"end": 12566,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 12543,
											"end": 12544,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12536,
											"end": 12567,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12586,
											"end": 12590,
											"name": "PUSH",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 12583,
											"end": 12584,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 12576,
											"end": 12591,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12610,
											"end": 12614,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12607,
											"end": 12608,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12600,
											"end": 12615,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 12626,
											"end": 12762,
											"name": "tag",
											"source": 18,
											"value": "458"
										},
										{
											"begin": 12626,
											"end": 12762,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 12665,
											"end": 12668,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 12693,
											"end": 12698,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 12683,
											"end": 12722,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "589"
										},
										{
											"begin": 12683,
											"end": 12722,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 12702,
											"end": 12720,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "589"
										},
										{
											"begin": 12702,
											"end": 12720,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "503"
										},
										{
											"begin": 12702,
											"end": 12720,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 12702,
											"end": 12720,
											"name": "tag",
											"source": 18,
											"value": "589"
										},
										{
											"begin": 12702,
											"end": 12720,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12738,
											"end": 12756,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12738,
											"end": 12756,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 12626,
											"end": 12762,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 13960,
											"end": 14087,
											"name": "tag",
											"source": 18,
											"value": "497"
										},
										{
											"begin": 13960,
											"end": 14087,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 14021,
											"end": 14031,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 14016,
											"end": 14019,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 14012,
											"end": 14032,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 14009,
											"end": 14010,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 14002,
											"end": 14033,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14052,
											"end": 14056,
											"name": "PUSH",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 14049,
											"end": 14050,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 14042,
											"end": 14057,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14076,
											"end": 14080,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 14073,
											"end": 14074,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 14066,
											"end": 14081,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"MINTER_ROLE()": "d5391393",
							"PAUSER_ROLE()": "e63ab1e9",
							"addLiquidityFree(address)": "eefb9be2",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"blockUser(address,bool,bool)": "8bea9334",
							"blocked(address)": "e5962195",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getOwner()": "893d20e8",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getRoleMember(bytes32,uint256)": "9010d07c",
							"getRoleMemberCount(bytes32)": "ca15c873",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"increaseAllowance(address,uint256)": "39509351",
							"liquidityFee()": "98118cb4",
							"liquidityKeeper()": "7f257c3e",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"setLiquidityFee(uint256)": "357bf15c",
							"setLiquidityKeeper(address)": "a128471f",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addLiquidityFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"can_send\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"can_receive\",\"type\":\"bool\"}],\"name\":\"blockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityKeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"setLiquidityKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"details\":\"Set liquidity fee and keeper See {ERC20-constructor}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HatTokenV2.sol\":\"HatTokenV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bda1319db846d6d6f92d8a57a9bdee8bde1dc39aa7546165791692c24dd6f30a\",\"dweb:/ipfs/Qma5oZ7DmbdAjd8mpiW7mx896PDtwsQtCQ2hj9Upf7b7JK\"]},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ee05f28f549a5d6515e152580716b87636ed4bfab9812499a6e3803df88288b\",\"dweb:/ipfs/QmeEnhdwY1t5Y3YU5a4ffzgXuToydH2PNdNxV9W7dEPRQJ\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276\",\"dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d491a2ca79dbf44bc02e876e21a5847a2cbcc011188532ad8662cdc1c134a4e\",\"dweb:/ipfs/QmUQXhSV8ZvHLzfdG89ZNSh1nLrAYyjnNBLznJGwGcwVk8\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12af4ac016f9fdf3be5d15824f4292272aa11f6b2e0192a0f7320f5ad49bbbf0\",\"dweb:/ipfs/QmRXMpdqCgA3TYuYxBodqs5p9jGbnMW6xa2gvjppvq4TWk\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c0f62d3d5bef22b5ca00cc3903e7de6152cb68d2d22401a463f373cda54c00f\",\"dweb:/ipfs/QmSfzjZux7LC7NW2f7rjCXTHeFMUCWERqDkhpCTBy7kxTe\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1414cb92779420b50d3e796b47bad6ea800ef1805bc6f9bf35a3ccb4e17db3dc\",\"dweb:/ipfs/QmaMzwYqLiivfaWSgqeaAPboBtJjVD1hSrH48p7ExJZ7DG\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]},\"contracts/HatTokenV2.sol\":{\"keccak256\":\"0x30d771d8c47f84ac3d0a0161f0c314cb33c9d79596c4e586f13f071ec05a5d56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a58319bddef54f598f2cbd0fc533cb31acf73f70f8b42ff9908b05eabce51547\",\"dweb:/ipfs/QmefdHkRbAz9VWzmQQQgy9khxHgVZNy2jRzN5BhZ41VHr6\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							308
						],
						"Context": [
							1522
						],
						"ERC165": [
							1749
						],
						"IAccessControl": [
							506
						],
						"IERC165": [
							1761
						],
						"Strings": [
							1725
						]
					},
					"id": 309,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 309,
							"sourceUnit": 507,
							"src": "133:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 309,
							"sourceUnit": 1523,
							"src": "164:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../utils/Strings.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 309,
							"sourceUnit": 1726,
							"src": "195:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 309,
							"sourceUnit": 1750,
							"src": "226:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "1841:7:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1841:7:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 506,
										"src": "1850:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1850:14:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1749,
										"src": "1866:6:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1866:6:0"
								}
							],
							"canonicalName": "AccessControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "271:1534:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."
							},
							"fullyImplemented": true,
							"id": 308,
							"linearizedBaseContracts": [
								308,
								1749,
								1761,
								506,
								1522
							],
							"name": "AccessControl",
							"nameLocation": "1824:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 19,
									"members": [
										{
											"constant": false,
											"id": 16,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "1930:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1905:32:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 15,
												"keyType": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1905:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 14,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1924:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "1955:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1947:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 17,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1947:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "1886:8:0",
									"nodeType": "StructDefinition",
									"scope": 308,
									"src": "1879:92:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2014:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 308,
									"src": "1977:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 23,
										"keyType": {
											"id": 20,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1985:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1977:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueType": {
											"id": 22,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 21,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "1996:8:0"
											},
											"referencedDeclaration": 19,
											"src": "1996:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$19_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 27,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2051:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 308,
									"src": "2027:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 25,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2027:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 26,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2072:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "2495:58:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 33,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "2516:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 34,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "2522:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2522:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 32,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "2505:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "2505:30:0"
											},
											{
												"id": 38,
												"nodeType": "PlaceholderStatement",
												"src": "2545:1:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "2083:375:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 40,
									"name": "onlyRole",
									"nameLocation": "2472:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2489:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2481:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 29,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:14:0"
									},
									"src": "2463:90:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1748
									],
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "2711:111:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 54,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 49,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 43,
															"src": "2728:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 51,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 506,
																		"src": "2748:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$506_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$506_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 50,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2743:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2743:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$506",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2743:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2728:47:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 57,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 43,
																"src": "2803:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 55,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2779:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$308_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1748,
															"src": "2779:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2779:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2728:87:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 48,
												"id": 60,
												"nodeType": "Return",
												"src": "2721:94:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "2559:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2629:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 45,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2687:8:0"
									},
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2654:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "2647:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 42,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2647:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2646:20:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "2705:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 46,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:0"
									},
									"scope": 308,
									"src": "2620:202:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										473
									],
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "3001:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 73,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "3018:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 75,
															"indexExpression": {
																"id": 74,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "3025:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3018:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 76,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 16,
														"src": "3018:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 78,
													"indexExpression": {
														"id": 77,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "3039:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3018:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 72,
												"id": 79,
												"nodeType": "Return",
												"src": "3011:36:0"
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "2828:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2918:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 69,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2977:8:0"
									},
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2934:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2926:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 64,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2926:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2948:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2940:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2925:31:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2995:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 70,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2995:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2994:6:0"
									},
									"scope": 308,
									"src": "2909:145:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 123,
										"nodeType": "Block",
										"src": "3408:419:0",
										"statements": [
											{
												"condition": {
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3422:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 90,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 84,
																"src": "3431:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 91,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "3437:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 89,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "3423:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 92,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3423:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 122,
												"nodeType": "IfStatement",
												"src": "3418:403:0",
												"trueBody": {
													"id": 121,
													"nodeType": "Block",
													"src": "3447:374:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 99,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3555:25:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 104,
																										"name": "account",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 86,
																										"src": "3634:7:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 103,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "3626:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint160_$",
																										"typeString": "type(uint160)"
																									},
																									"typeName": {
																										"id": 102,
																										"name": "uint160",
																										"nodeType": "ElementaryTypeName",
																										"src": "3626:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 105,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "3626:16:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								}
																							},
																							{
																								"hexValue": "3230",
																								"id": 106,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "3644:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								},
																								"value": "20"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								},
																								{
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								}
																							],
																							"expression": {
																								"id": 100,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1725,
																								"src": "3606:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$1725_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 101,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1724,
																							"src": "3606:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 107,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3606:41:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 108,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3673:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 113,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 84,
																										"src": "3746:4:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 112,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "3738:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 111,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "3738:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 114,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "3738:13:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 115,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "3753:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 109,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1725,
																								"src": "3718:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$1725_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 110,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1724,
																							"src": "3718:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 116,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3718:38:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 97,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "3513:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 98,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "3513:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 117,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3513:265:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 96,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3485:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 95,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "3485:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3485:311:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 94,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3461:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3461:349:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 120,
															"nodeType": "ExpressionStatement",
															"src": "3461:349:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "3060:270:0",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3344:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3363:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "3355:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 83,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3355:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3377:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "3369:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3369:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3354:31:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3408:0:0"
									},
									"scope": 308,
									"src": "3335:492:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										481
									],
									"body": {
										"id": 138,
										"nodeType": "Block",
										"src": "4091:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 133,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "4108:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 135,
														"indexExpression": {
															"id": 134,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "4115:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4108:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$19_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 18,
													"src": "4108:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 132,
												"id": 137,
												"nodeType": "Return",
												"src": "4101:29:0"
											}
										]
									},
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "3833:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4017:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 129,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4064:8:0"
									},
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4038:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "4030:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 126,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4030:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4029:14:0"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "4082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 130,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4082:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4081:9:0"
									},
									"scope": 308,
									"src": "4008:129:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										489
									],
									"body": {
										"id": 158,
										"nodeType": "Block",
										"src": "4490:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 154,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "4511:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 155,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "4517:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 153,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "4500:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4500:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 157,
												"nodeType": "ExpressionStatement",
												"src": "4500:25:0"
											}
										]
									},
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "4143:239:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 159,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 149,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "4483:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 148,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "4470:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4470:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 151,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 147,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "4461:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4461:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "4396:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 146,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4452:8:0"
									},
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4414:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "4406:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4406:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4428:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "4420:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4405:31:0"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4490:0:0"
									},
									"scope": 308,
									"src": "4387:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										497
									],
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "4870:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 174,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 162,
															"src": "4892:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 175,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "4898:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 173,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "4880:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4880:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "4880:26:0"
											}
										]
									},
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "4538:223:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 169,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 162,
															"src": "4863:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 168,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "4850:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4850:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 171,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 167,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "4841:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4841:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "4775:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 166,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4832:8:0"
									},
									"parameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4794:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "4786:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 161,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4786:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4808:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "4800:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4800:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4785:31:0"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4870:0:0"
									},
									"scope": 308,
									"src": "4766:147:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										505
									],
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "5481:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 189,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 184,
																"src": "5499:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 190,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1512,
																	"src": "5510:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5510:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5499:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5524:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 188,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5491:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5491:83:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5491:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 197,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 182,
															"src": "5597:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 198,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "5603:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 196,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "5585:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5585:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "5585:26:0"
											}
										]
									},
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "4919:480:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5413:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 186,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5472:8:0"
									},
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5434:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "5426:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 181,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5448:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "5440:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5440:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5425:31:0"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5481:0:0"
									},
									"scope": 308,
									"src": "5404:214:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 215,
										"nodeType": "Block",
										"src": "6325:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 211,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "6346:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 212,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "6352:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 210,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "6335:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6335:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 214,
												"nodeType": "ExpressionStatement",
												"src": "6335:25:0"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "5624:628:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "6266:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6285:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "6277:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 204,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "6291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6276:31:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6325:0:0"
									},
									"scope": 308,
									"src": "6257:110:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 243,
										"nodeType": "Block",
										"src": "6565:174:0",
										"statements": [
											{
												"assignments": [
													225
												],
												"declarations": [
													{
														"constant": false,
														"id": 225,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "6583:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 243,
														"src": "6575:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 224,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6575:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 229,
												"initialValue": {
													"arguments": [
														{
															"id": 227,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "6616:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 226,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "6603:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6603:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6575:46:0"
											},
											{
												"expression": {
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 230,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "6631:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 232,
															"indexExpression": {
																"id": 231,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 219,
																"src": "6638:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6631:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 233,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 18,
														"src": "6631:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 234,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 221,
														"src": "6656:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "6631:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "6631:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 238,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "6697:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 239,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 225,
															"src": "6703:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 240,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "6722:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 237,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "6680:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6680:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "EmitStatement",
												"src": "6675:57:0"
											}
										]
									},
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "6373:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "6501:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6523:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "6515:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 218,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6515:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "6537:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "6529:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 220,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6529:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6514:33:0"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6565:0:0"
									},
									"scope": 308,
									"src": "6492:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 275,
										"nodeType": "Block",
										"src": "6929:165:0",
										"statements": [
											{
												"condition": {
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "6943:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 253,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 247,
																"src": "6952:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 254,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 249,
																"src": "6958:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 252,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "6944:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6944:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 274,
												"nodeType": "IfStatement",
												"src": "6939:149:0",
												"trueBody": {
													"id": 273,
													"nodeType": "Block",
													"src": "6968:120:0",
													"statements": [
														{
															"expression": {
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 257,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "6982:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 259,
																			"indexExpression": {
																				"id": 258,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 247,
																				"src": "6989:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6982:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 260,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "6982:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 262,
																	"indexExpression": {
																		"id": 261,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 249,
																		"src": "7003:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6982:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7014:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "6982:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 265,
															"nodeType": "ExpressionStatement",
															"src": "6982:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 267,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 247,
																		"src": "7049:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 268,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 249,
																		"src": "7055:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 269,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1512,
																			"src": "7064:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7064:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 266,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 454,
																	"src": "7037:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7037:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 272,
															"nodeType": "EmitStatement",
															"src": "7032:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "6745:111:0",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction."
									},
									"id": 276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "6870:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6889:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6881:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 246,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6881:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6903:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6895:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6895:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6880:31:0"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6929:0:0"
									},
									"scope": 308,
									"src": "6861:233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 306,
										"nodeType": "Block",
										"src": "7288:165:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 285,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "7310:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 286,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "7316:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 284,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "7302:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7302:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 305,
												"nodeType": "IfStatement",
												"src": "7298:149:0",
												"trueBody": {
													"id": 304,
													"nodeType": "Block",
													"src": "7326:121:0",
													"statements": [
														{
															"expression": {
																"id": 295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 288,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7340:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 290,
																			"indexExpression": {
																				"id": 289,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 279,
																				"src": "7347:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7340:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 291,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7340:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 293,
																	"indexExpression": {
																		"id": 292,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 281,
																		"src": "7361:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7340:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7372:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "7340:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 296,
															"nodeType": "ExpressionStatement",
															"src": "7340:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 298,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 279,
																		"src": "7408:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 299,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 281,
																		"src": "7414:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 300,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1512,
																			"src": "7423:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7423:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 297,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 463,
																	"src": "7396:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7396:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 303,
															"nodeType": "EmitStatement",
															"src": "7391:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "7100:114:0",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction."
									},
									"id": 307,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "7228:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7248:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "7240:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 278,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7240:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7262:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "7254:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7254:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7239:31:0"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7288:0:0"
									},
									"scope": 308,
									"src": "7219:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 309,
							"src": "1806:5649:0",
							"usedErrors": []
						}
					],
					"src": "108:7348:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
					"exportedSymbols": {
						"AccessControl": [
							308
						],
						"AccessControlEnumerable": [
							433
						],
						"Context": [
							1522
						],
						"ERC165": [
							1749
						],
						"EnumerableSet": [
							2672
						],
						"IAccessControl": [
							506
						],
						"IAccessControlEnumerable": [
							531
						],
						"IERC165": [
							1761
						],
						"Strings": [
							1725
						]
					},
					"id": 434,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 310,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol",
							"file": "./IAccessControlEnumerable.sol",
							"id": 311,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 434,
							"sourceUnit": 532,
							"src": "143:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
							"file": "./AccessControl.sol",
							"id": 312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 434,
							"sourceUnit": 309,
							"src": "184:29:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"file": "../utils/structs/EnumerableSet.sol",
							"id": 313,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 434,
							"sourceUnit": 2673,
							"src": "214:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 315,
										"name": "IAccessControlEnumerable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 531,
										"src": "400:24:1"
									},
									"id": 316,
									"nodeType": "InheritanceSpecifier",
									"src": "400:24:1"
								},
								{
									"baseName": {
										"id": 317,
										"name": "AccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 308,
										"src": "426:13:1"
									},
									"id": 318,
									"nodeType": "InheritanceSpecifier",
									"src": "426:13:1"
								}
							],
							"canonicalName": "AccessControlEnumerable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 314,
								"nodeType": "StructuredDocumentation",
								"src": "260:94:1",
								"text": " @dev Extension of {AccessControl} that allows enumerating the members of each role."
							},
							"fullyImplemented": true,
							"id": 433,
							"linearizedBaseContracts": [
								433,
								308,
								1749,
								1761,
								531,
								506,
								1522
							],
							"name": "AccessControlEnumerable",
							"nameLocation": "373:23:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 322,
									"libraryName": {
										"id": 319,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2672,
										"src": "452:13:1"
									},
									"nodeType": "UsingForDirective",
									"src": "446:49:1",
									"typeName": {
										"id": 321,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 320,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 2385,
											"src": "470:24:1"
										},
										"referencedDeclaration": 2385,
										"src": "470:24:1",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"constant": false,
									"id": 327,
									"mutability": "mutable",
									"name": "_roleMembers",
									"nameLocation": "554:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 433,
									"src": "501:65:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
										"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
									},
									"typeName": {
										"id": 326,
										"keyType": {
											"id": 323,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "509:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "501:44:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
											"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
										},
										"valueType": {
											"id": 325,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 324,
												"name": "EnumerableSet.AddressSet",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2385,
												"src": "520:24:1"
											},
											"referencedDeclaration": 2385,
											"src": "520:24:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
												"typeString": "struct EnumerableSet.AddressSet"
											}
										}
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										62
									],
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "725:121:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 336,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "742:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 338,
																		"name": "IAccessControlEnumerable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 531,
																		"src": "762:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControlEnumerable_$531_$",
																			"typeString": "type(contract IAccessControlEnumerable)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControlEnumerable_$531_$",
																			"typeString": "type(contract IAccessControlEnumerable)"
																		}
																	],
																	"id": 337,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "757:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "757:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControlEnumerable_$531",
																	"typeString": "type(contract IAccessControlEnumerable)"
																}
															},
															"id": 340,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "757:42:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "742:57:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 344,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 330,
																"src": "827:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 342,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "803:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControlEnumerable_$433_$",
																	"typeString": "type(contract super AccessControlEnumerable)"
																}
															},
															"id": 343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 62,
															"src": "803:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "803:36:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "742:97:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 335,
												"id": 347,
												"nodeType": "Return",
												"src": "735:104:1"
											}
										]
									},
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "573:56:1",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "643:17:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 332,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "701:8:1"
									},
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "668:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "661:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 329,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "661:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:20:1"
									},
									"returnParameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "719:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 333,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "719:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "718:6:1"
									},
									"scope": 433,
									"src": "634:212:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										522
									],
									"body": {
										"id": 367,
										"nodeType": "Block",
										"src": "1530:52:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 364,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 354,
															"src": "1569:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 360,
																"name": "_roleMembers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "1547:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
																	"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"
																}
															},
															"id": 362,
															"indexExpression": {
																"id": 361,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "1560:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1547:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$2385_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "at",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2508,
														"src": "1547:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$2385_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$2385_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"
														}
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1547:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 359,
												"id": 366,
												"nodeType": "Return",
												"src": "1540:35:1"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "852:574:1",
										"text": " @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."
									},
									"functionSelector": "9010d07c",
									"id": 368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleMember",
									"nameLocation": "1440:13:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 356,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1503:8:1"
									},
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1462:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1454:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 351,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1454:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "1476:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1468:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1468:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1453:29:1"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1521:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1521:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1520:9:1"
									},
									"scope": 433,
									"src": "1431:151:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										530
									],
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "1839:51:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 377,
																"name": "_roleMembers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "1856:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
																	"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"
																}
															},
															"id": 379,
															"indexExpression": {
																"id": 378,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "1869:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1856:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$2385_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 380,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2481,
														"src": "1856:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$2385_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$2385_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1856:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 376,
												"id": 382,
												"nodeType": "Return",
												"src": "1849:34:1"
											}
										]
									},
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "1588:157:1",
										"text": " @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."
									},
									"functionSelector": "ca15c873",
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleMemberCount",
									"nameLocation": "1759:18:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 373,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1812:8:1"
									},
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1786:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1778:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 370,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1778:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1777:14:1"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "1830:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1829:9:1"
									},
									"scope": 433,
									"src": "1750:140:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										276
									],
									"body": {
										"id": 407,
										"nodeType": "Block",
										"src": "2055:89:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 396,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "2082:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 397,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "2088:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 393,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2065:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_AccessControlEnumerable_$433_$",
																"typeString": "type(contract super AccessControlEnumerable)"
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_grantRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 276,
														"src": "2065:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2065:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 399,
												"nodeType": "ExpressionStatement",
												"src": "2065:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 404,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "2129:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 400,
																"name": "_roleMembers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "2106:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
																	"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"
																}
															},
															"id": 402,
															"indexExpression": {
																"id": 401,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "2119:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2106:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$2385_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 403,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2412,
														"src": "2106:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$2385_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$2385_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2106:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 406,
												"nodeType": "ExpressionStatement",
												"src": "2106:31:1"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "1896:77:1",
										"text": " @dev Overload {_grantRole} to track enumerable memberships"
									},
									"id": 408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "1987:10:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 391,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2046:8:1"
									},
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2006:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 408,
												"src": "1998:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 386,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1998:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 408,
												"src": "2012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2012:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1997:31:1"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2055:0:1"
									},
									"scope": 433,
									"src": "1978:166:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										307
									],
									"body": {
										"id": 431,
										"nodeType": "Block",
										"src": "2311:93:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 420,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "2339:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 421,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "2345:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 417,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2321:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_AccessControlEnumerable_$433_$",
																"typeString": "type(contract super AccessControlEnumerable)"
															}
														},
														"id": 419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_revokeRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 307,
														"src": "2321:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2321:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "2321:32:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 428,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "2389:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 424,
																"name": "_roleMembers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "2363:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_AddressSet_$2385_storage_$",
																	"typeString": "mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"
																}
															},
															"id": 426,
															"indexExpression": {
																"id": 425,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 411,
																"src": "2376:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2363:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$2385_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 427,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "remove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2439,
														"src": "2363:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$2385_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$2385_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2363:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "2363:34:1"
											}
										]
									},
									"documentation": {
										"id": 409,
										"nodeType": "StructuredDocumentation",
										"src": "2150:78:1",
										"text": " @dev Overload {_revokeRole} to track enumerable memberships"
									},
									"id": 432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "2242:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 415,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2302:8:1"
									},
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2262:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "2254:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 410,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2254:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2276:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "2268:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2268:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2253:31:1"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2311:0:1"
									},
									"scope": 433,
									"src": "2233:171:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 434,
							"src": "355:2051:1",
							"usedErrors": []
						}
					],
					"src": "118:2289:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							506
						]
					},
					"id": 507,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 435,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 436,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:2",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 506,
							"linearizedBaseContracts": [
								506
							],
							"name": "IAccessControl",
							"nameLocation": "219:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "240:292:2",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
									"id": 445,
									"name": "RoleAdminChanged",
									"nameLocation": "543:16:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "576:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "560:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 438,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "598:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "582:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 440,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "582:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "633:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "617:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 442,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:87:2"
									},
									"src": "537:110:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "653:212:2",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
									"id": 454,
									"name": "RoleGranted",
									"nameLocation": "876:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "904:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "888:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 447,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "888:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "926:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "910:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "951:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "935:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "887:71:2"
									},
									"src": "870:89:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 455,
										"nodeType": "StructuredDocumentation",
										"src": "965:275:2",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
									"id": 463,
									"name": "RoleRevoked",
									"nameLocation": "1251:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1279:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "1263:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 456,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1301:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "1285:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1326:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "1310:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1310:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:71:2"
									},
									"src": "1245:89:2"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "1340:76:2",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 473,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1430:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1446:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1438:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 465,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1460:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1452:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1437:31:2"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1492:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1492:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1491:6:2"
									},
									"scope": 506,
									"src": "1421:77:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "1504:184:2",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1702:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1723:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1715:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 475,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1715:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:14:2"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1752:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1752:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1751:9:2"
									},
									"scope": 506,
									"src": "1693:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 482,
										"nodeType": "StructuredDocumentation",
										"src": "1767:239:2",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 489,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2020:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2038:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "2030:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 483,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2052:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "2044:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:31:2"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2069:0:2"
									},
									"scope": 506,
									"src": "2011:59:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 490,
										"nodeType": "StructuredDocumentation",
										"src": "2076:223:2",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2313:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2332:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2324:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 491,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2346:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2338:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:31:2"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2363:0:2"
									},
									"scope": 506,
									"src": "2304:60:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "2370:480:2",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 505,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2864:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2885:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "2877:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 499,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2877:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2899:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "2891:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2891:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:31:2"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:0:2"
									},
									"scope": 506,
									"src": "2855:62:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 507,
							"src": "209:2710:2",
							"usedErrors": []
						}
					],
					"src": "94:2826:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol",
					"exportedSymbols": {
						"IAccessControl": [
							506
						],
						"IAccessControlEnumerable": [
							531
						]
					},
					"id": 532,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 508,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 509,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 532,
							"sourceUnit": 507,
							"src": "129:30:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 511,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 506,
										"src": "299:14:3"
									},
									"id": 512,
									"nodeType": "InheritanceSpecifier",
									"src": "299:14:3"
								}
							],
							"canonicalName": "IAccessControlEnumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 510,
								"nodeType": "StructuredDocumentation",
								"src": "161:99:3",
								"text": " @dev External interface of AccessControlEnumerable declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 531,
							"linearizedBaseContracts": [
								531,
								506
							],
							"name": "IAccessControlEnumerable",
							"nameLocation": "271:24:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 513,
										"nodeType": "StructuredDocumentation",
										"src": "320:574:3",
										"text": " @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."
									},
									"functionSelector": "9010d07c",
									"id": 522,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleMember",
									"nameLocation": "908:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "930:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "922:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 514,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "922:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "944:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "936:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "936:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "921:29:3"
									},
									"returnParameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "974:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:9:3"
									},
									"scope": 531,
									"src": "899:84:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "989:157:3",
										"text": " @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."
									},
									"functionSelector": "ca15c873",
									"id": 530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleMemberCount",
									"nameLocation": "1160:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1187:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "1179:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 524,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1179:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1178:14:3"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "1216:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1216:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1215:9:3"
									},
									"scope": 531,
									"src": "1151:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 532,
							"src": "261:966:3",
							"usedErrors": []
						}
					],
					"src": "104:1124:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1522
						],
						"Ownable": [
							636
						]
					},
					"id": 637,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 533,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 534,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 1523,
							"src": "112:30:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 536,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "668:7:4"
									},
									"id": 537,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:4"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 535,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:4",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 636,
							"linearizedBaseContracts": [
								636,
								1522
							],
							"name": "Ownable",
							"nameLocation": "657:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 539,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 636,
									"src": "682:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 538,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 545,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "738:29:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 543,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "769:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:4"
									},
									"src": "711:84:4"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "911:49:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 550,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "940:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 549,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "921:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 553,
												"nodeType": "ExpressionStatement",
												"src": "921:32:4"
											}
										]
									},
									"documentation": {
										"id": 546,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:4",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 555,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:4"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:4"
									},
									"scope": 636,
									"src": "897:63:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 563,
										"nodeType": "Block",
										"src": "1091:30:4",
										"statements": [
											{
												"expression": {
													"id": 561,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 539,
													"src": "1108:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 560,
												"id": 562,
												"nodeType": "Return",
												"src": "1101:13:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:4",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:4"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "1082:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:4"
									},
									"scope": 636,
									"src": "1036:85:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 577,
										"nodeType": "Block",
										"src": "1230:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 568,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 564,
																	"src": "1248:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 570,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1512,
																	"src": "1259:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 571,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 567,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:4"
											},
											{
												"id": 576,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:4"
											}
										]
									},
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:4",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 578,
									"name": "onlyOwner",
									"nameLocation": "1218:9:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:4"
									},
									"src": "1209:117:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 591,
										"nodeType": "Block",
										"src": "1722:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 587,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 586,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 585,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 584,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "1732:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:4"
											}
										]
									},
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:4",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 592,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 582,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 581,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "1712:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:4"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:4"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:4"
									},
									"scope": 636,
									"src": "1668:101:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 614,
										"nodeType": "Block",
										"src": "1988:128:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 601,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 595,
																"src": "2006:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 602,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 600,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 611,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "2100:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 610,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "2081:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 613,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:4"
											}
										]
									},
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 615,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 598,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 597,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "1978:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:4"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "1945:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:4"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:4"
									},
									"scope": 636,
									"src": "1918:198:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 634,
										"nodeType": "Block",
										"src": "2333:124:4",
										"statements": [
											{
												"assignments": [
													622
												],
												"declarations": [
													{
														"constant": false,
														"id": 622,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:4",
														"nodeType": "VariableDeclaration",
														"scope": 634,
														"src": "2343:16:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 621,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 624,
												"initialValue": {
													"id": 623,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 539,
													"src": "2362:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:4"
											},
											{
												"expression": {
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 625,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "2378:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 626,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "2387:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 628,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 630,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "2431:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 631,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "2441:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 629,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "2410:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 633,
												"nodeType": "EmitStatement",
												"src": "2405:45:4"
											}
										]
									},
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "2298:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:4"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:4"
									},
									"scope": 636,
									"src": "2270:187:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 637,
							"src": "639:1820:4",
							"usedErrors": []
						}
					],
					"src": "87:2373:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							1522
						],
						"Pausable": [
							728
						]
					},
					"id": 729,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 638,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "90:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 639,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 729,
							"sourceUnit": 1523,
							"src": "115:30:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 641,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "617:7:5"
									},
									"id": 642,
									"nodeType": "InheritanceSpecifier",
									"src": "617:7:5"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 640,
								"nodeType": "StructuredDocumentation",
								"src": "147:439:5",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 728,
							"linearizedBaseContracts": [
								728,
								1522
							],
							"name": "Pausable",
							"nameLocation": "605:8:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "631:73:5",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 647,
									"name": "Paused",
									"nameLocation": "715:6:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "730:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "722:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "721:17:5"
									},
									"src": "709:30:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "745:70:5",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 652,
									"name": "Unpaused",
									"nameLocation": "826:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "843:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "835:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "835:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "834:17:5"
									},
									"src": "820:32:5"
								},
								{
									"constant": false,
									"id": 654,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "871:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 728,
									"src": "858:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 653,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "858:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "971:32:5",
										"statements": [
											{
												"expression": {
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 658,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "981:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "991:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "981:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "981:15:5"
											}
										]
									},
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "885:67:5",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 663,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "968:2:5"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "971:0:5"
									},
									"scope": 728,
									"src": "957:46:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1151:31:5",
										"statements": [
											{
												"expression": {
													"id": 669,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 654,
													"src": "1168:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 668,
												"id": 670,
												"nodeType": "Return",
												"src": "1161:14:5"
											}
										]
									},
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "1009:84:5",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1107:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1113:2:5"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1145:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 666,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1145:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:6:5"
									},
									"scope": 728,
									"src": "1098:84:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 683,
										"nodeType": "Block",
										"src": "1393:66:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1411:9:5",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 676,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "1412:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 677,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1412:8:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1422:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 675,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1403:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1403:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 681,
												"nodeType": "ExpressionStatement",
												"src": "1403:38:5"
											},
											{
												"id": 682,
												"nodeType": "PlaceholderStatement",
												"src": "1451:1:5"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "1188:175:5",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 684,
									"name": "whenNotPaused",
									"nameLocation": "1377:13:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:2:5"
									},
									"src": "1368:91:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 694,
										"nodeType": "Block",
										"src": "1659:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 688,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "1677:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1677:8:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1687:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 687,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1669:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1669:41:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "1669:41:5"
											},
											{
												"id": 693,
												"nodeType": "PlaceholderStatement",
												"src": "1720:1:5"
											}
										]
									},
									"documentation": {
										"id": 685,
										"nodeType": "StructuredDocumentation",
										"src": "1465:167:5",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 695,
									"name": "whenPaused",
									"nameLocation": "1646:10:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1656:2:5"
									},
									"src": "1637:91:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 710,
										"nodeType": "Block",
										"src": "1912:66:5",
										"statements": [
											{
												"expression": {
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 701,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "1922:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 702,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1932:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1922:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "1922:14:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 706,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "1958:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1958:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 705,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "1951:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1951:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 709,
												"nodeType": "EmitStatement",
												"src": "1946:25:5"
											}
										]
									},
									"documentation": {
										"id": 696,
										"nodeType": "StructuredDocumentation",
										"src": "1734:124:5",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 711,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 699,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 698,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 684,
												"src": "1898:13:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1898:13:5"
										}
									],
									"name": "_pause",
									"nameLocation": "1872:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:2:5"
									},
									"returnParameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1912:0:5"
									},
									"scope": 728,
									"src": "1863:115:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 726,
										"nodeType": "Block",
										"src": "2158:69:5",
										"statements": [
											{
												"expression": {
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 717,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "2168:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 718,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2178:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2168:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 720,
												"nodeType": "ExpressionStatement",
												"src": "2168:15:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 722,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "2207:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2207:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 721,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 652,
														"src": "2198:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2198:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 725,
												"nodeType": "EmitStatement",
												"src": "2193:27:5"
											}
										]
									},
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "1984:121:5",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 727,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 715,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 714,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 695,
												"src": "2147:10:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2147:10:5"
										}
									],
									"name": "_unpause",
									"nameLocation": "2119:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2127:2:5"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2158:0:5"
									},
									"scope": 728,
									"src": "2110:117:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 729,
							"src": "587:1642:5",
							"usedErrors": []
						}
					],
					"src": "90:2140:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1522
						],
						"ERC20": [
							1316
						],
						"IERC20": [
							1394
						],
						"IERC20Metadata": [
							1500
						]
					},
					"id": 1317,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 730,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 731,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 1395,
							"src": "130:22:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 732,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 1501,
							"src": "153:41:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 733,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1317,
							"sourceUnit": 1523,
							"src": "195:33:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 735,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "1421:7:6"
									},
									"id": 736,
									"nodeType": "InheritanceSpecifier",
									"src": "1421:7:6"
								},
								{
									"baseName": {
										"id": 737,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1394,
										"src": "1430:6:6"
									},
									"id": 738,
									"nodeType": "InheritanceSpecifier",
									"src": "1430:6:6"
								},
								{
									"baseName": {
										"id": 739,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1500,
										"src": "1438:14:6"
									},
									"id": 740,
									"nodeType": "InheritanceSpecifier",
									"src": "1438:14:6"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 734,
								"nodeType": "StructuredDocumentation",
								"src": "230:1172:6",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1316,
							"linearizedBaseContracts": [
								1316,
								1500,
								1394,
								1522
							],
							"name": "ERC20",
							"nameLocation": "1412:5:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 744,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1495:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1459:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 743,
										"keyType": {
											"id": 741,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1467:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1459:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 742,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1478:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 750,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1567:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1511:67:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 749,
										"keyType": {
											"id": 745,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1519:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1511:47:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 748,
											"keyType": {
												"id": 746,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1538:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1530:27:6",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 747,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1549:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 752,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1601:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1585:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 751,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1585:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 754,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1635:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1620:20:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 753,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1620:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 756,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1661:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 1316,
									"src": "1646:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 755,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1646:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 772,
										"nodeType": "Block",
										"src": "2034:57:6",
										"statements": [
											{
												"expression": {
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 764,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "2044:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 765,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "2052:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2044:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 767,
												"nodeType": "ExpressionStatement",
												"src": "2044:13:6"
											},
											{
												"expression": {
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 768,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "2067:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 769,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "2077:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2067:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "2067:17:6"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "1675:298:6",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 773,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2004:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "1990:19:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 758,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1990:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2025:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "2011:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 760,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2011:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1989:44:6"
									},
									"returnParameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2034:0:6"
									},
									"scope": 1316,
									"src": "1978:113:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1487
									],
									"body": {
										"id": 782,
										"nodeType": "Block",
										"src": "2225:29:6",
										"statements": [
											{
												"expression": {
													"id": 780,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 754,
													"src": "2242:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 779,
												"id": 781,
												"nodeType": "Return",
												"src": "2235:12:6"
											}
										]
									},
									"documentation": {
										"id": 774,
										"nodeType": "StructuredDocumentation",
										"src": "2097:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2165:4:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 776,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2192:8:6"
									},
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2169:2:6"
									},
									"returnParameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "2210:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 777,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2210:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:15:6"
									},
									"scope": 1316,
									"src": "2156:98:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1493
									],
									"body": {
										"id": 792,
										"nodeType": "Block",
										"src": "2438:31:6",
										"statements": [
											{
												"expression": {
													"id": 790,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 756,
													"src": "2455:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 789,
												"id": 791,
												"nodeType": "Return",
												"src": "2448:14:6"
											}
										]
									},
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "2260:102:6",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 793,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2376:6:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 786,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2405:8:6"
									},
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2382:2:6"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 793,
												"src": "2423:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 787,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2423:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2422:15:6"
									},
									"scope": 1316,
									"src": "2367:102:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1499
									],
									"body": {
										"id": 802,
										"nodeType": "Block",
										"src": "3158:26:6",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3175:2:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 799,
												"id": 801,
												"nodeType": "Return",
												"src": "3168:9:6"
											}
										]
									},
									"documentation": {
										"id": 794,
										"nodeType": "StructuredDocumentation",
										"src": "2475:613:6",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3102:8:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 796,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3133:8:6"
									},
									"parameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3110:2:6"
									},
									"returnParameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "3151:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 797,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3151:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3150:7:6"
									},
									"scope": 1316,
									"src": "3093:91:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1325
									],
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "3314:36:6",
										"statements": [
											{
												"expression": {
													"id": 810,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 752,
													"src": "3331:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 809,
												"id": 811,
												"nodeType": "Return",
												"src": "3324:19:6"
											}
										]
									},
									"documentation": {
										"id": 804,
										"nodeType": "StructuredDocumentation",
										"src": "3190:49:6",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3253:11:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 806,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3287:8:6"
									},
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3264:2:6"
									},
									"returnParameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3305:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3305:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3304:9:6"
									},
									"scope": 1316,
									"src": "3244:106:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1333
									],
									"body": {
										"id": 826,
										"nodeType": "Block",
										"src": "3491:42:6",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 822,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "3508:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 824,
													"indexExpression": {
														"id": 823,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 816,
														"src": "3518:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3508:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 821,
												"id": 825,
												"nodeType": "Return",
												"src": "3501:25:6"
											}
										]
									},
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "3356:47:6",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3417:9:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 818,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3464:8:6"
									},
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3435:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "3427:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3427:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3426:17:6"
									},
									"returnParameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "3482:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 819,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3482:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3481:9:6"
									},
									"scope": 1316,
									"src": "3408:125:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1343
									],
									"body": {
										"id": 851,
										"nodeType": "Block",
										"src": "3814:104:6",
										"statements": [
											{
												"assignments": [
													839
												],
												"declarations": [
													{
														"constant": false,
														"id": 839,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3832:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 851,
														"src": "3824:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 838,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3824:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 842,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 840,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "3840:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3840:12:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3824:28:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 844,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "3872:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 845,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "3879:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 846,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "3883:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 843,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "3862:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3862:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "3862:28:6"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3907:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 837,
												"id": 850,
												"nodeType": "Return",
												"src": "3900:11:6"
											}
										]
									},
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "3539:185:6",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 852,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3738:8:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 834,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3790:8:6"
									},
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3755:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "3747:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3747:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3767:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "3759:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3746:28:6"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "3808:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 835,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3808:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3807:6:6"
									},
									"scope": 1316,
									"src": "3729:189:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1353
									],
									"body": {
										"id": 869,
										"nodeType": "Block",
										"src": "4074:51:6",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 863,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "4091:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 865,
														"indexExpression": {
															"id": 864,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 855,
															"src": "4103:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4091:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 867,
													"indexExpression": {
														"id": 866,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 857,
														"src": "4110:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4091:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 862,
												"id": 868,
												"nodeType": "Return",
												"src": "4084:34:6"
											}
										]
									},
									"documentation": {
										"id": 853,
										"nodeType": "StructuredDocumentation",
										"src": "3924:47:6",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 870,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3985:9:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 859,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4047:8:6"
									},
									"parameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4003:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "3995:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3995:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4018:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "4010:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3994:32:6"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "4065:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4065:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4064:9:6"
									},
									"scope": 1316,
									"src": "3976:149:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1363
									],
									"body": {
										"id": 894,
										"nodeType": "Block",
										"src": "4522:108:6",
										"statements": [
											{
												"assignments": [
													882
												],
												"declarations": [
													{
														"constant": false,
														"id": 882,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4540:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 894,
														"src": "4532:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 881,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4532:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 885,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 883,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "4548:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:12:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4532:28:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 887,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 882,
															"src": "4579:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 888,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "4586:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 889,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "4595:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 886,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1250,
														"src": "4570:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4570:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 891,
												"nodeType": "ExpressionStatement",
												"src": "4570:32:6"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 892,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4619:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 880,
												"id": 893,
												"nodeType": "Return",
												"src": "4612:11:6"
											}
										]
									},
									"documentation": {
										"id": 871,
										"nodeType": "StructuredDocumentation",
										"src": "4131:297:6",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 895,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4442:7:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 877,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4498:8:6"
									},
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4458:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "4450:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4475:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "4467:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4467:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:33:6"
									},
									"returnParameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "4516:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 878,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4516:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:6:6"
									},
									"scope": 1316,
									"src": "4433:197:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1375
									],
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "5325:153:6",
										"statements": [
											{
												"assignments": [
													909
												],
												"declarations": [
													{
														"constant": false,
														"id": 909,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5343:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "5335:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 908,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5335:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 912,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 910,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "5353:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5353:12:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5335:30:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 914,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 898,
															"src": "5391:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 915,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "5397:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 916,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "5406:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 913,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1293,
														"src": "5375:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5375:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "5375:38:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 920,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 898,
															"src": "5433:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 921,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "5439:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 922,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "5443:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 919,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "5423:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5423:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "5423:27:6"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5467:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 907,
												"id": 926,
												"nodeType": "Return",
												"src": "5460:11:6"
											}
										]
									},
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "4636:551:6",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5201:12:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 904,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5301:8:6"
									},
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5231:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "5223:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5223:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5253:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "5245:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5245:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5273:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "5265:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5265:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:72:6"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "5319:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 905,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5319:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:6:6"
									},
									"scope": 1316,
									"src": "5192:286:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "5967:142:6",
										"statements": [
											{
												"assignments": [
													939
												],
												"declarations": [
													{
														"constant": false,
														"id": 939,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5985:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 957,
														"src": "5977:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 938,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5977:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 942,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 940,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "5993:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5993:12:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5977:28:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 944,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "6024:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 945,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "6031:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 946,
																		"name": "_allowances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 750,
																		"src": "6040:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 948,
																	"indexExpression": {
																		"id": 947,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 939,
																		"src": "6052:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6040:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 950,
																"indexExpression": {
																	"id": 949,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 931,
																	"src": "6059:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6040:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 951,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "6070:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6040:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 943,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1250,
														"src": "6015:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6015:66:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 954,
												"nodeType": "ExpressionStatement",
												"src": "6015:66:6"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 955,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6098:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 937,
												"id": 956,
												"nodeType": "Return",
												"src": "6091:11:6"
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "5484:384:6",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5882:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5908:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "5900:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5925:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "5917:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5917:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5899:37:6"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "5961:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5961:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:6:6"
									},
									"scope": 1316,
									"src": "5873:236:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 999,
										"nodeType": "Block",
										"src": "6695:330:6",
										"statements": [
											{
												"assignments": [
													969
												],
												"declarations": [
													{
														"constant": false,
														"id": 969,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6713:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 999,
														"src": "6705:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 968,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6705:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 972,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 970,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "6721:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6721:12:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6705:28:6"
											},
											{
												"assignments": [
													974
												],
												"declarations": [
													{
														"constant": false,
														"id": 974,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6751:16:6",
														"nodeType": "VariableDeclaration",
														"scope": 999,
														"src": "6743:24:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 973,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6743:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 980,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 975,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "6770:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 977,
														"indexExpression": {
															"id": 976,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 969,
															"src": "6782:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6770:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 979,
													"indexExpression": {
														"id": 978,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "6789:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6770:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6743:54:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 984,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 982,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 974,
																"src": "6815:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 983,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 963,
																"src": "6835:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6815:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 985,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6852:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 981,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6807:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6807:85:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 987,
												"nodeType": "ExpressionStatement",
												"src": "6807:85:6"
											},
											{
												"id": 996,
												"nodeType": "UncheckedBlock",
												"src": "6902:95:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 989,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 969,
																	"src": "6935:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 990,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "6942:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 993,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 991,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 974,
																		"src": "6951:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 992,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 963,
																		"src": "6970:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6951:34:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 988,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1250,
																"src": "6926:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6926:60:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 995,
														"nodeType": "ExpressionStatement",
														"src": "6926:60:6"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7014:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 967,
												"id": 998,
												"nodeType": "Return",
												"src": "7007:11:6"
											}
										]
									},
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "6115:476:6",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6605:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6631:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "6623:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6623:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6648:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "6640:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6640:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6622:42:6"
									},
									"returnParameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "6689:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 965,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6689:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6688:6:6"
									},
									"scope": 1316,
									"src": "6596:429:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1076,
										"nodeType": "Block",
										"src": "7596:543:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1011,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1003,
																"src": "7614:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7630:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7622:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1012,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7622:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1015,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7622:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7614:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7634:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1010,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7606:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7606:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1019,
												"nodeType": "ExpressionStatement",
												"src": "7606:68:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1021,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1005,
																"src": "7692:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7706:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7698:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1022,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7698:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7698:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7692:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7710:37:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1020,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7684:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7684:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1029,
												"nodeType": "ExpressionStatement",
												"src": "7684:64:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1031,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "7780:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1032,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "7786:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1033,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "7790:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1030,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "7759:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7759:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1035,
												"nodeType": "ExpressionStatement",
												"src": "7759:38:6"
											},
											{
												"assignments": [
													1037
												],
												"declarations": [
													{
														"constant": false,
														"id": 1037,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7816:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 1076,
														"src": "7808:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1036,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7808:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"baseExpression": {
														"id": 1038,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "7830:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1040,
													"indexExpression": {
														"id": 1039,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1003,
														"src": "7840:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7830:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7808:37:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1043,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1037,
																"src": "7863:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1044,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1007,
																"src": "7878:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7863:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1046,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7886:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1042,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7855:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7855:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1048,
												"nodeType": "ExpressionStatement",
												"src": "7855:72:6"
											},
											{
												"id": 1057,
												"nodeType": "UncheckedBlock",
												"src": "7937:73:6",
												"statements": [
													{
														"expression": {
															"id": 1055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1049,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "7961:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1051,
																"indexExpression": {
																	"id": 1050,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1003,
																	"src": "7971:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7961:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1052,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1037,
																	"src": "7979:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1053,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1007,
																	"src": "7993:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7979:20:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7961:38:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1056,
														"nodeType": "ExpressionStatement",
														"src": "7961:38:6"
													}
												]
											},
											{
												"expression": {
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1058,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8019:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1060,
														"indexExpression": {
															"id": 1059,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "8029:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8019:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1061,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1007,
														"src": "8036:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8019:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1063,
												"nodeType": "ExpressionStatement",
												"src": "8019:23:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1065,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "8067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1066,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "8073:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1067,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "8077:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1064,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "8058:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8058:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1069,
												"nodeType": "EmitStatement",
												"src": "8053:31:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1071,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "8115:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1072,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "8121:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1073,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "8125:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1070,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "8095:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1074,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8095:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1075,
												"nodeType": "ExpressionStatement",
												"src": "8095:37:6"
											}
										]
									},
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "7031:452:6",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1077,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7497:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7524:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "7516:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7516:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7546:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "7538:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7538:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7566:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "7558:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7558:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7506:72:6"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7596:0:6"
									},
									"scope": 1316,
									"src": "7488:651:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1132,
										"nodeType": "Block",
										"src": "8480:324:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1086,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1080,
																"src": "8498:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1089,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8517:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1088,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8509:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1087,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8509:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8509:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8498:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8521:33:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1085,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8490:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8490:65:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1094,
												"nodeType": "ExpressionStatement",
												"src": "8490:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8595:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8587:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1096,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8587:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8587:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1100,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "8599:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1101,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "8608:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1095,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "8566:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8566:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1103,
												"nodeType": "ExpressionStatement",
												"src": "8566:49:6"
											},
											{
												"expression": {
													"id": 1106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1104,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "8626:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1105,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1082,
														"src": "8642:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8626:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1107,
												"nodeType": "ExpressionStatement",
												"src": "8626:22:6"
											},
											{
												"expression": {
													"id": 1112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1108,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8658:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1110,
														"indexExpression": {
															"id": 1109,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "8668:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8658:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1111,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1082,
														"src": "8680:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8658:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1113,
												"nodeType": "ExpressionStatement",
												"src": "8658:28:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8718:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8710:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1115,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8710:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8710:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1119,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "8722:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1120,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "8731:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1114,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "8701:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8701:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1122,
												"nodeType": "EmitStatement",
												"src": "8696:42:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8777:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8769:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1124,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8769:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8769:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1128,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "8781:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1129,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "8790:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1123,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "8749:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8749:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1131,
												"nodeType": "ExpressionStatement",
												"src": "8749:48:6"
											}
										]
									},
									"documentation": {
										"id": 1078,
										"nodeType": "StructuredDocumentation",
										"src": "8145:265:6",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8424:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8438:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "8430:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1079,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8430:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8455:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "8447:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1081,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8447:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8429:33:6"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8480:0:6"
									},
									"scope": 1316,
									"src": "8415:389:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1204,
										"nodeType": "Block",
										"src": "9189:511:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1142,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1136,
																"src": "9207:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1145,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9226:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9218:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1143,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9218:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9218:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9207:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9230:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1141,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9199:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9199:67:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1150,
												"nodeType": "ExpressionStatement",
												"src": "9199:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1152,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "9298:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9315:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1154,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9307:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1153,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9307:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1156,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9307:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1157,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "9319:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1151,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "9277:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9277:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1159,
												"nodeType": "ExpressionStatement",
												"src": "9277:49:6"
											},
											{
												"assignments": [
													1161
												],
												"declarations": [
													{
														"constant": false,
														"id": 1161,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9345:14:6",
														"nodeType": "VariableDeclaration",
														"scope": 1204,
														"src": "9337:22:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1160,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9337:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1165,
												"initialValue": {
													"baseExpression": {
														"id": 1162,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "9362:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1164,
													"indexExpression": {
														"id": 1163,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1136,
														"src": "9372:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9362:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9337:43:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1167,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1161,
																"src": "9398:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1168,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1138,
																"src": "9416:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9398:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9424:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1166,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9390:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9390:71:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1172,
												"nodeType": "ExpressionStatement",
												"src": "9390:71:6"
											},
											{
												"id": 1181,
												"nodeType": "UncheckedBlock",
												"src": "9471:79:6",
												"statements": [
													{
														"expression": {
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1173,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "9495:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1175,
																"indexExpression": {
																	"id": 1174,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1136,
																	"src": "9505:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9495:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1176,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "9516:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1177,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1138,
																	"src": "9533:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9516:23:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9495:44:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1180,
														"nodeType": "ExpressionStatement",
														"src": "9495:44:6"
													}
												]
											},
											{
												"expression": {
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1182,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "9559:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1183,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1138,
														"src": "9575:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9559:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1185,
												"nodeType": "ExpressionStatement",
												"src": "9559:22:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1187,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "9606:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9623:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9615:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1188,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9615:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9615:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1192,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "9627:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1186,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1384,
														"src": "9597:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9597:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1194,
												"nodeType": "EmitStatement",
												"src": "9592:42:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1196,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "9665:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1199,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9682:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9674:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1197,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9674:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9674:10:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1201,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "9686:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1195,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "9645:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9645:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "9645:48:6"
											}
										]
									},
									"documentation": {
										"id": 1134,
										"nodeType": "StructuredDocumentation",
										"src": "8810:309:6",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9133:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9147:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "9139:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9139:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9164:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "9156:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9156:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:33:6"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9189:0:6"
									},
									"scope": 1316,
									"src": "9124:576:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1249,
										"nodeType": "Block",
										"src": "10236:257:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1221,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1216,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1208,
																"src": "10254:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1219,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10271:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10263:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1217,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10263:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1220,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10263:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10254:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1222,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10275:38:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1215,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10246:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10246:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1224,
												"nodeType": "ExpressionStatement",
												"src": "10246:68:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1226,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "10332:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1229,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10351:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10343:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1227,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10343:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1230,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10343:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10332:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1232,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10355:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1225,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10324:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10324:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "10324:68:6"
											},
											{
												"expression": {
													"id": 1241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1235,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "10403:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1238,
															"indexExpression": {
																"id": 1236,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1208,
																"src": "10415:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10403:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1239,
														"indexExpression": {
															"id": 1237,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1210,
															"src": "10422:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10403:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1240,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1212,
														"src": "10433:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10403:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1242,
												"nodeType": "ExpressionStatement",
												"src": "10403:36:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1244,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "10463:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1245,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1210,
															"src": "10470:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1246,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1212,
															"src": "10479:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1243,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1393,
														"src": "10454:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10454:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1248,
												"nodeType": "EmitStatement",
												"src": "10449:37:6"
											}
										]
									},
									"documentation": {
										"id": 1206,
										"nodeType": "StructuredDocumentation",
										"src": "9706:412:6",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10132:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10158:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "10150:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10150:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10181:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "10173:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10173:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10206:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "10198:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10198:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10140:78:6"
									},
									"returnParameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10236:0:6"
									},
									"scope": 1316,
									"src": "10123:370:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1292,
										"nodeType": "Block",
										"src": "10890:321:6",
										"statements": [
											{
												"assignments": [
													1261
												],
												"declarations": [
													{
														"constant": false,
														"id": 1261,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10908:16:6",
														"nodeType": "VariableDeclaration",
														"scope": 1292,
														"src": "10900:24:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1260,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10900:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1266,
												"initialValue": {
													"arguments": [
														{
															"id": 1263,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1253,
															"src": "10937:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1264,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1255,
															"src": "10944:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1262,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 870,
														"src": "10927:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10927:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10900:52:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1267,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1261,
														"src": "10966:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10991:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1269,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10991:7:6",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1268,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10986:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1271,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10986:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1272,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10986:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10966:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1291,
												"nodeType": "IfStatement",
												"src": "10962:243:6",
												"trueBody": {
													"id": 1290,
													"nodeType": "Block",
													"src": "11005:200:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1275,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1261,
																			"src": "11027:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1276,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1257,
																			"src": "11047:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11027:26:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11055:31:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 1274,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11019:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11019:68:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1280,
															"nodeType": "ExpressionStatement",
															"src": "11019:68:6"
														},
														{
															"id": 1289,
															"nodeType": "UncheckedBlock",
															"src": "11101:94:6",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1282,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1253,
																				"src": "11138:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1283,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1255,
																				"src": "11145:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1284,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1261,
																					"src": "11154:16:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1285,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1257,
																					"src": "11173:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11154:25:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1281,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1250,
																			"src": "11129:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11129:51:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1288,
																	"nodeType": "ExpressionStatement",
																	"src": "11129:51:6"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1251,
										"nodeType": "StructuredDocumentation",
										"src": "10499:266:6",
										"text": " @dev Spend `amount` form the allowance of `owner` toward `spender`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10779:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10812:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "10804:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10804:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10835:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "10827:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10827:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10860:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "10852:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10852:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10794:78:6"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10890:0:6"
									},
									"scope": 1316,
									"src": "10770:441:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1303,
										"nodeType": "Block",
										"src": "11914:2:6",
										"statements": []
									},
									"documentation": {
										"id": 1294,
										"nodeType": "StructuredDocumentation",
										"src": "11217:573:6",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11804:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11842:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "11834:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11834:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11864:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "11856:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11856:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11884:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "11876:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11876:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11824:72:6"
									},
									"returnParameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11914:0:6"
									},
									"scope": 1316,
									"src": "11795:121:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1314,
										"nodeType": "Block",
										"src": "12622:2:6",
										"statements": []
									},
									"documentation": {
										"id": 1305,
										"nodeType": "StructuredDocumentation",
										"src": "11922:577:6",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12513:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12550:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "12542:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12572:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "12564:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12564:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12592:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "12584:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1310,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12584:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12532:72:6"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12622:0:6"
									},
									"scope": 1316,
									"src": "12504:120:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1317,
							"src": "1403:11223:6",
							"usedErrors": []
						}
					],
					"src": "105:12522:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1394
						]
					},
					"id": 1395,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1318,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1319,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:7",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1394,
							"linearizedBaseContracts": [
								1394
							],
							"name": "IERC20",
							"nameLocation": "212:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1320,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:7",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1325,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:7"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "342:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:7"
									},
									"scope": 1394,
									"src": "296:55:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1326,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:7",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1333,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "453:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:7"
									},
									"returnParameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "493:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:7"
									},
									"scope": 1394,
									"src": "434:68:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1334,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:7",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1343,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1343,
												"src": "733:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1343,
												"src": "745:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:7"
									},
									"returnParameters": {
										"id": 1342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1343,
												"src": "779:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1340,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:7"
									},
									"scope": 1394,
									"src": "715:70:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1344,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:7",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "1079:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "1094:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:7"
									},
									"returnParameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "1134:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:7"
									},
									"scope": 1394,
									"src": "1060:83:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:7",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1363,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "1813:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "1830:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:7"
									},
									"returnParameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "1864:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1360,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:7"
									},
									"scope": 1394,
									"src": "1796:74:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1364,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:7",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "2199:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "2221:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "2241:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:7"
									},
									"returnParameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "2280:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1372,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:7"
									},
									"scope": 1394,
									"src": "2168:118:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1376,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:7",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1384,
									"name": "Transfer",
									"nameLocation": "2461:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "2470:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "2492:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "2512:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:7"
									},
									"src": "2455:72:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1385,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:7",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1393,
									"name": "Approval",
									"nameLocation": "2692:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1387,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2701:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2724:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2749:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:7"
									},
									"src": "2686:78:7"
								}
							],
							"scope": 1395,
							"src": "202:2564:7",
							"usedErrors": []
						}
					],
					"src": "106:2661:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1522
						],
						"ERC20": [
							1316
						],
						"ERC20Burnable": [
							1438
						],
						"IERC20": [
							1394
						],
						"IERC20Metadata": [
							1500
						]
					},
					"id": 1439,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1396,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "124:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1397,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1439,
							"sourceUnit": 1317,
							"src": "149:22:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 1398,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1439,
							"sourceUnit": 1523,
							"src": "172:36:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1400,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "454:7:8"
									},
									"id": 1401,
									"nodeType": "InheritanceSpecifier",
									"src": "454:7:8"
								},
								{
									"baseName": {
										"id": 1402,
										"name": "ERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1316,
										"src": "463:5:8"
									},
									"id": 1403,
									"nodeType": "InheritanceSpecifier",
									"src": "463:5:8"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1399,
								"nodeType": "StructuredDocumentation",
								"src": "210:208:8",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": false,
							"id": 1438,
							"linearizedBaseContracts": [
								1438,
								1316,
								1500,
								1394,
								1522
							],
							"name": "ERC20Burnable",
							"nameLocation": "437:13:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1415,
										"nodeType": "Block",
										"src": "623:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1410,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "639:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "639:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1412,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "653:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1409,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1205,
														"src": "633:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "633:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1414,
												"nodeType": "ExpressionStatement",
												"src": "633:27:8"
											}
										]
									},
									"documentation": {
										"id": 1404,
										"nodeType": "StructuredDocumentation",
										"src": "475:98:8",
										"text": " @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 1416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "587:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "600:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "592:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "592:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:16:8"
									},
									"returnParameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:0:8"
									},
									"scope": 1438,
									"src": "578:89:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1436,
										"nodeType": "Block",
										"src": "1039:95:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1425,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "1065:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1426,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "1074:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1074:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1428,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1421,
															"src": "1088:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1424,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1293,
														"src": "1049:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1049:46:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1430,
												"nodeType": "ExpressionStatement",
												"src": "1049:46:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1432,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "1111:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1433,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1421,
															"src": "1120:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1431,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1205,
														"src": "1105:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1105:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1435,
												"nodeType": "ExpressionStatement",
												"src": "1105:22:8"
											}
										]
									},
									"documentation": {
										"id": 1417,
										"nodeType": "StructuredDocumentation",
										"src": "673:295:8",
										"text": " @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."
									},
									"functionSelector": "79cc6790",
									"id": 1437,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "982:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1419,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "999:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "991:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1016:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "1008:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "990:33:8"
									},
									"returnParameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1039:0:8"
									},
									"scope": 1438,
									"src": "973:161:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1439,
							"src": "419:717:8",
							"usedErrors": []
						}
					],
					"src": "124:1013:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
					"exportedSymbols": {
						"Context": [
							1522
						],
						"ERC20": [
							1316
						],
						"ERC20Pausable": [
							1475
						],
						"IERC20": [
							1394
						],
						"IERC20Metadata": [
							1500
						],
						"Pausable": [
							728
						]
					},
					"id": 1476,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1440,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1476,
							"sourceUnit": 1317,
							"src": "134:22:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
							"file": "../../../security/Pausable.sol",
							"id": 1442,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1476,
							"sourceUnit": 729,
							"src": "157:40:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1444,
										"name": "ERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1316,
										"src": "504:5:9"
									},
									"id": 1445,
									"nodeType": "InheritanceSpecifier",
									"src": "504:5:9"
								},
								{
									"baseName": {
										"id": 1446,
										"name": "Pausable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 728,
										"src": "511:8:9"
									},
									"id": 1447,
									"nodeType": "InheritanceSpecifier",
									"src": "511:8:9"
								}
							],
							"canonicalName": "ERC20Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1443,
								"nodeType": "StructuredDocumentation",
								"src": "199:269:9",
								"text": " @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug."
							},
							"fullyImplemented": false,
							"id": 1475,
							"linearizedBaseContracts": [
								1475,
								728,
								1316,
								1500,
								1394,
								1522
							],
							"name": "ERC20Pausable",
							"nameLocation": "487:13:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1304
									],
									"body": {
										"id": 1473,
										"nodeType": "Block",
										"src": "793:136:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1461,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "830:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1462,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "836:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1463,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "840:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1458,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "803:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Pausable_$1475_$",
																"typeString": "type(contract super ERC20Pausable)"
															}
														},
														"id": 1460,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1304,
														"src": "803:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "803:44:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1465,
												"nodeType": "ExpressionStatement",
												"src": "803:44:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "866:9:9",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1467,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "867:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 1468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "867:8:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564",
															"id": 1470,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "877:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4",
																"typeString": "literal_string \"ERC20Pausable: token transfer while paused\""
															},
															"value": "ERC20Pausable: token transfer while paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4",
																"typeString": "literal_string \"ERC20Pausable: token transfer while paused\""
															}
														],
														"id": 1466,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "858:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "858:64:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1472,
												"nodeType": "ExpressionStatement",
												"src": "858:64:9"
											}
										]
									},
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "526:134:9",
										"text": " @dev See {ERC20-_beforeTokenTransfer}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 1474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "674:20:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1456,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "784:8:9"
									},
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "712:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "704:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "734:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "726:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "726:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "754:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "746:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "694:72:9"
									},
									"returnParameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "793:0:9"
									},
									"scope": 1475,
									"src": "665:264:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1476,
							"src": "469:462:9",
							"usedErrors": []
						}
					],
					"src": "109:823:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1394
						],
						"IERC20Metadata": [
							1500
						]
					},
					"id": 1501,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1477,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1478,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1501,
							"sourceUnit": 1395,
							"src": "135:23:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1480,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1394,
										"src": "305:6:10"
									},
									"id": 1481,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:10"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1479,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:10",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1500,
							"linearizedBaseContracts": [
								1500,
								1394
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1482,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:10",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1487,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:10"
									},
									"returnParameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "416:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1484,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:10"
									},
									"scope": 1500,
									"src": "377:54:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1488,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:10",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:10"
									},
									"returnParameters": {
										"id": 1492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "539:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1490,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:10"
									},
									"scope": 1500,
									"src": "498:56:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:10",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1499,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:10"
									},
									"returnParameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1497,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "673:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1496,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:10"
									},
									"scope": 1500,
									"src": "630:50:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1501,
							"src": "277:405:10",
							"usedErrors": []
						}
					],
					"src": "110:573:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1522
						]
					},
					"id": 1523,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1502,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:11"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1503,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:11",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1522,
							"linearizedBaseContracts": [
								1522
							],
							"name": "Context",
							"nameLocation": "626:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1511,
										"nodeType": "Block",
										"src": "702:34:11",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1508,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1507,
												"id": 1510,
												"nodeType": "Return",
												"src": "712:17:11"
											}
										]
									},
									"id": 1512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:11"
									},
									"returnParameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1512,
												"src": "693:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:11"
									},
									"scope": 1522,
									"src": "640:96:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1520,
										"nodeType": "Block",
										"src": "809:32:11",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1517,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1516,
												"id": 1519,
												"nodeType": "Return",
												"src": "819:15:11"
											}
										]
									},
									"id": 1521,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:11"
									},
									"returnParameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "793:14:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:11"
									},
									"scope": 1522,
									"src": "742:99:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1523,
							"src": "608:235:11",
							"usedErrors": []
						}
					],
					"src": "86:758:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							1725
						]
					},
					"id": 1726,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1524,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1525,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:12",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1725,
							"linearizedBaseContracts": [
								1725
							],
							"name": "Strings",
							"nameLocation": "154:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1528,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 1725,
									"src": "168:58:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1526,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1527,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1606,
										"nodeType": "Block",
										"src": "399:632:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1536,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1531,
														"src": "601:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1537,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1542,
												"nodeType": "IfStatement",
												"src": "597:51:12",
												"trueBody": {
													"id": 1541,
													"nodeType": "Block",
													"src": "613:35:12",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1539,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1535,
															"id": 1540,
															"nodeType": "Return",
															"src": "627:10:12"
														}
													]
												}
											},
											{
												"assignments": [
													1544
												],
												"declarations": [
													{
														"constant": false,
														"id": 1544,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 1606,
														"src": "657:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1543,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1546,
												"initialValue": {
													"id": 1545,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1531,
													"src": "672:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:12"
											},
											{
												"assignments": [
													1548
												],
												"declarations": [
													{
														"constant": false,
														"id": 1548,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1606,
														"src": "687:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1547,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1549,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:12"
											},
											{
												"body": {
													"id": 1560,
													"nodeType": "Block",
													"src": "729:57:12",
													"statements": [
														{
															"expression": {
																"id": 1554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:12",
																"subExpression": {
																	"id": 1553,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "743:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1555,
															"nodeType": "ExpressionStatement",
															"src": "743:8:12"
														},
														{
															"expression": {
																"id": 1558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1556,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1544,
																	"src": "765:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1559,
															"nodeType": "ExpressionStatement",
															"src": "765:10:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1550,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1544,
														"src": "718:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1551,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1561,
												"nodeType": "WhileStatement",
												"src": "711:75:12"
											},
											{
												"assignments": [
													1563
												],
												"declarations": [
													{
														"constant": false,
														"id": 1563,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1606,
														"src": "795:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1562,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1568,
												"initialValue": {
													"arguments": [
														{
															"id": 1566,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1548,
															"src": "827:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1565,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1564,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:12"
											},
											{
												"body": {
													"id": 1599,
													"nodeType": "Block",
													"src": "863:131:12",
													"statements": [
														{
															"expression": {
																"id": 1574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1572,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "877:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1575,
															"nodeType": "ExpressionStatement",
															"src": "877:11:12"
														},
														{
															"expression": {
																"id": 1593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1576,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1563,
																		"src": "902:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1578,
																	"indexExpression": {
																		"id": 1577,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1548,
																		"src": "909:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1590,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 1583,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1588,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1586,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1531,
																									"src": "945:5:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 1587,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 1585,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 1584,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:12",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1589,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1582,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1581,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:12",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1591,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 1579,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1594,
															"nodeType": "ExpressionStatement",
															"src": "902:56:12"
														},
														{
															"expression": {
																"id": 1597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1595,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1531,
																	"src": "972:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1598,
															"nodeType": "ExpressionStatement",
															"src": "972:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1569,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1531,
														"src": "851:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1600,
												"nodeType": "WhileStatement",
												"src": "844:150:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1603,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1563,
															"src": "1017:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1602,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1601,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1535,
												"id": 1605,
												"nodeType": "Return",
												"src": "1003:21:12"
											}
										]
									},
									"documentation": {
										"id": 1529,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "346:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:12"
									},
									"returnParameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "384:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1533,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:12"
									},
									"scope": 1725,
									"src": "328:703:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1647,
										"nodeType": "Block",
										"src": "1210:255:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1615,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1610,
														"src": "1224:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1616,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1621,
												"nodeType": "IfStatement",
												"src": "1220:54:12",
												"trueBody": {
													"id": 1620,
													"nodeType": "Block",
													"src": "1236:38:12",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 1618,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 1614,
															"id": 1619,
															"nodeType": "Return",
															"src": "1250:13:12"
														}
													]
												}
											},
											{
												"assignments": [
													1623
												],
												"declarations": [
													{
														"constant": false,
														"id": 1623,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "1283:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1622,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1625,
												"initialValue": {
													"id": 1624,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1610,
													"src": "1298:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:12"
											},
											{
												"assignments": [
													1627
												],
												"declarations": [
													{
														"constant": false,
														"id": 1627,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "1313:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1626,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1629,
												"initialValue": {
													"hexValue": "30",
													"id": 1628,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:12"
											},
											{
												"body": {
													"id": 1640,
													"nodeType": "Block",
													"src": "1359:57:12",
													"statements": [
														{
															"expression": {
																"id": 1634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:12",
																"subExpression": {
																	"id": 1633,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1627,
																	"src": "1373:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1635,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:12"
														},
														{
															"expression": {
																"id": 1638,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1636,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1623,
																	"src": "1395:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 1637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1639,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1630,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1623,
														"src": "1348:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1631,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1641,
												"nodeType": "WhileStatement",
												"src": "1341:75:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1643,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "1444:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1644,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1627,
															"src": "1451:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1642,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1648,
															1724
														],
														"referencedDeclaration": 1724,
														"src": "1432:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1614,
												"id": 1646,
												"nodeType": "Return",
												"src": "1425:33:12"
											}
										]
									},
									"documentation": {
										"id": 1608,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "1157:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:12"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "1195:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1612,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:12"
									},
									"scope": 1725,
									"src": "1136:329:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1723,
										"nodeType": "Block",
										"src": "1678:351:12",
										"statements": [
											{
												"assignments": [
													1659
												],
												"declarations": [
													{
														"constant": false,
														"id": 1659,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1723,
														"src": "1688:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1658,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1668,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1664,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1663,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1653,
																	"src": "1724:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1660,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:12"
											},
											{
												"expression": {
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1669,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1659,
															"src": "1745:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1671,
														"indexExpression": {
															"hexValue": "30",
															"id": 1670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1674,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:12"
											},
											{
												"expression": {
													"id": 1679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1675,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1659,
															"src": "1770:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1677,
														"indexExpression": {
															"hexValue": "31",
															"id": 1676,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1678,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1680,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:12"
											},
											{
												"body": {
													"id": 1709,
													"nodeType": "Block",
													"src": "1840:87:12",
													"statements": [
														{
															"expression": {
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1695,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1659,
																		"src": "1854:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1697,
																	"indexExpression": {
																		"id": 1696,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1682,
																		"src": "1861:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1698,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1528,
																		"src": "1866:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1702,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1701,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1699,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1651,
																			"src": "1879:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1700,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1704,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:12"
														},
														{
															"expression": {
																"id": 1707,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1705,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1651,
																	"src": "1905:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1706,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1708,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1689,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1682,
														"src": "1828:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1690,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1710,
												"initializationExpression": {
													"assignments": [
														1682
													],
													"declarations": [
														{
															"constant": false,
															"id": 1682,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:12",
															"nodeType": "VariableDeclaration",
															"scope": 1710,
															"src": "1800:9:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1681,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1688,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1687,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1685,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1683,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1684,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1653,
																"src": "1816:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1686,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:12"
												},
												"loopExpression": {
													"expression": {
														"id": 1693,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:12",
														"subExpression": {
															"id": 1692,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "1837:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1694,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:12"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1714,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1712,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1651,
																"src": "1944:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1713,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1715,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1711,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1717,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1720,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1659,
															"src": "2015:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1719,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1718,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1657,
												"id": 1722,
												"nodeType": "Return",
												"src": "2001:21:12"
											}
										]
									},
									"documentation": {
										"id": 1649,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "1609:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1653,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "1624:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:12"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "1663:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1655,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:12"
									},
									"scope": 1725,
									"src": "1588:441:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1726,
							"src": "146:1885:12",
							"usedErrors": []
						}
					],
					"src": "86:1946:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1749
						],
						"IERC165": [
							1761
						]
					},
					"id": 1750,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1727,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1728,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1750,
							"sourceUnit": 1762,
							"src": "124:23:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1730,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1761,
										"src": "754:7:13"
									},
									"id": 1731,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:13"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1729,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:13",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 1749,
							"linearizedBaseContracts": [
								1749,
								1761
							],
							"name": "ERC165",
							"nameLocation": "744:6:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1760
									],
									"body": {
										"id": 1747,
										"nodeType": "Block",
										"src": "920:64:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1740,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1734,
														"src": "937:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1742,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1761,
																	"src": "957:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1761_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1761_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1741,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1743,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1761",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1744,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1739,
												"id": 1746,
												"nodeType": "Return",
												"src": "930:47:13"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:13",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1736,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:13"
									},
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "856:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1733,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:13"
									},
									"returnParameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "914:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1737,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:13"
									},
									"scope": 1749,
									"src": "829:155:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1750,
							"src": "726:260:13",
							"usedErrors": []
						}
					],
					"src": "99:888:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1761
						]
					},
					"id": 1762,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1751,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1752,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:14",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1761,
							"linearizedBaseContracts": [
								1761
							],
							"name": "IERC165",
							"nameLocation": "415:7:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1753,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:14",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1760,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "801:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1754,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:14"
									},
									"returnParameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "844:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1757,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:14"
									},
									"scope": 1761,
									"src": "774:76:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1762,
							"src": "405:447:14",
							"usedErrors": []
						}
					],
					"src": "100:753:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							2073
						]
					},
					"id": 2074,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1763,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1764,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:15",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 2073,
							"linearizedBaseContracts": [
								2073
							],
							"name": "SafeMath",
							"nameLocation": "475:8:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1795,
										"nodeType": "Block",
										"src": "702:140:15",
										"statements": [
											{
												"id": 1794,
												"nodeType": "UncheckedBlock",
												"src": "712:124:15",
												"statements": [
													{
														"assignments": [
															1777
														],
														"declarations": [
															{
																"constant": false,
																"id": 1777,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "744:1:15",
																"nodeType": "VariableDeclaration",
																"scope": 1794,
																"src": "736:9:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1776,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1781,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1778,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1767,
																"src": "748:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1779,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1769,
																"src": "752:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1782,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1777,
																"src": "771:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1783,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1767,
																"src": "775:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1789,
														"nodeType": "IfStatement",
														"src": "767:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1786,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1787,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1775,
															"id": 1788,
															"nodeType": "Return",
															"src": "778:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1791,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1777,
																	"src": "823:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1792,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1775,
														"id": 1793,
														"nodeType": "Return",
														"src": "809:16:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1765,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:15",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1796,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "635:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "650:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "642:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "661:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "653:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:15"
									},
									"returnParameters": {
										"id": 1775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "687:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1771,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1774,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "693:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:15"
									},
									"scope": 2073,
									"src": "626:216:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1823,
										"nodeType": "Block",
										"src": "1064:113:15",
										"statements": [
											{
												"id": 1822,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1808,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1801,
																"src": "1102:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1809,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1799,
																"src": "1106:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1815,
														"nodeType": "IfStatement",
														"src": "1098:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1813,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1807,
															"id": 1814,
															"nodeType": "Return",
															"src": "1109:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1817,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1799,
																		"src": "1154:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1818,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1801,
																		"src": "1158:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1820,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1807,
														"id": 1821,
														"nodeType": "Return",
														"src": "1140:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1797,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:15",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1824,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "997:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1012:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "1004:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1023:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "1015:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:15"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "1049:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1803,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "1055:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:15"
									},
									"scope": 2073,
									"src": "988:189:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1865,
										"nodeType": "Block",
										"src": "1401:417:15",
										"statements": [
											{
												"id": 1864,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1836,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1827,
																"src": "1669:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1843,
														"nodeType": "IfStatement",
														"src": "1665:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1840,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1841,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1835,
															"id": 1842,
															"nodeType": "Return",
															"src": "1677:16:15"
														}
													},
													{
														"assignments": [
															1845
														],
														"declarations": [
															{
																"constant": false,
																"id": 1845,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1715:1:15",
																"nodeType": "VariableDeclaration",
																"scope": 1864,
																"src": "1707:9:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1844,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1849,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1846,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1827,
																"src": "1719:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1847,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1829,
																"src": "1723:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1850,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1845,
																	"src": "1742:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1851,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1827,
																	"src": "1746:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1853,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1829,
																"src": "1751:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1859,
														"nodeType": "IfStatement",
														"src": "1738:33:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1857,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1835,
															"id": 1858,
															"nodeType": "Return",
															"src": "1754:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1861,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1845,
																	"src": "1799:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1862,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1835,
														"id": 1863,
														"nodeType": "Return",
														"src": "1785:16:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1825,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:15",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1334:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1827,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1349:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "1341:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1829,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1360:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "1352:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:15"
									},
									"returnParameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "1386:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1831,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "1392:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:15"
									},
									"scope": 2073,
									"src": "1325:493:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1893,
										"nodeType": "Block",
										"src": "2043:114:15",
										"statements": [
											{
												"id": 1892,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1878,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1871,
																"src": "2081:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1885,
														"nodeType": "IfStatement",
														"src": "2077:29:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1881,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1883,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1877,
															"id": 1884,
															"nodeType": "Return",
															"src": "2089:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1887,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1869,
																		"src": "2134:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1888,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1871,
																		"src": "2138:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1890,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1877,
														"id": 1891,
														"nodeType": "Return",
														"src": "2120:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1867,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:15",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1894,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1976:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1991:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "1983:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1871,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2002:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "1994:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:15"
									},
									"returnParameters": {
										"id": 1877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2028:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "2034:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:15"
									},
									"scope": 2073,
									"src": "1967:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1921,
										"nodeType": "Block",
										"src": "2392:114:15",
										"statements": [
											{
												"id": 1920,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1906,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1899,
																"src": "2430:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1913,
														"nodeType": "IfStatement",
														"src": "2426:29:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1911,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1905,
															"id": 1912,
															"nodeType": "Return",
															"src": "2438:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1915,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1897,
																		"src": "2483:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1916,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1899,
																		"src": "2487:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1918,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1905,
														"id": 1919,
														"nodeType": "Return",
														"src": "2469:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1895,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:15",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2325:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2340:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "2332:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2351:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "2343:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:15"
									},
									"returnParameters": {
										"id": 1905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "2377:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1901,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "2383:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:15"
									},
									"scope": 2073,
									"src": "2316:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1936,
										"nodeType": "Block",
										"src": "2808:29:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1932,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1925,
														"src": "2825:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1933,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1927,
														"src": "2829:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1931,
												"id": 1935,
												"nodeType": "Return",
												"src": "2818:12:15"
											}
										]
									},
									"documentation": {
										"id": 1923,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:15",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2750:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2762:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2754:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2773:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2765:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:15"
									},
									"returnParameters": {
										"id": 1931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2799:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:15"
									},
									"scope": 2073,
									"src": "2741:96:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1951,
										"nodeType": "Block",
										"src": "3175:29:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1947,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1940,
														"src": "3192:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1948,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1942,
														"src": "3196:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1946,
												"id": 1950,
												"nodeType": "Return",
												"src": "3185:12:15"
											}
										]
									},
									"documentation": {
										"id": 1938,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:15",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3117:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3129:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3121:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3140:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3132:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:15"
									},
									"returnParameters": {
										"id": 1946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3166:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:15"
									},
									"scope": 2073,
									"src": "3108:96:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1966,
										"nodeType": "Block",
										"src": "3518:29:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1962,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1955,
														"src": "3535:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1963,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1957,
														"src": "3539:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1961,
												"id": 1965,
												"nodeType": "Return",
												"src": "3528:12:15"
											}
										]
									},
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:15",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3460:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3472:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "3464:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1957,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3483:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "3475:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:15"
									},
									"returnParameters": {
										"id": 1961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "3509:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:15"
									},
									"scope": 2073,
									"src": "3451:96:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1981,
										"nodeType": "Block",
										"src": "3903:29:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1977,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1970,
														"src": "3920:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1978,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1972,
														"src": "3924:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1976,
												"id": 1980,
												"nodeType": "Return",
												"src": "3913:12:15"
											}
										]
									},
									"documentation": {
										"id": 1968,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:15",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3845:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3857:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "3849:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3868:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "3860:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:15"
									},
									"returnParameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "3894:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:15"
									},
									"scope": 2073,
									"src": "3836:96:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1996,
										"nodeType": "Block",
										"src": "4452:29:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1994,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1992,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "4469:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1993,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1987,
														"src": "4473:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1991,
												"id": 1995,
												"nodeType": "Return",
												"src": "4462:12:15"
											}
										]
									},
									"documentation": {
										"id": 1983,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:15",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4394:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4406:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "4398:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4417:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "4409:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:15"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "4443:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:15"
									},
									"scope": 2073,
									"src": "4385:96:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2021,
										"nodeType": "Block",
										"src": "5070:106:15",
										"statements": [
											{
												"id": 2020,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2010,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2002,
																		"src": "5112:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 2011,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2000,
																		"src": "5117:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2013,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2004,
																	"src": "5120:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2009,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2015,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2016,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2000,
																"src": "5154:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2017,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2002,
																"src": "5158:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2008,
														"id": 2019,
														"nodeType": "Return",
														"src": "5147:12:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1998,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:15",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4954:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4975:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "4967:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2002,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4994:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "4986:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5019:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "5005:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2003,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:15"
									},
									"returnParameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "5061:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:15"
									},
									"scope": 2073,
									"src": "4945:231:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2046,
										"nodeType": "Block",
										"src": "5785:105:15",
										"statements": [
											{
												"id": 2045,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2035,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2027,
																		"src": "5827:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2038,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2029,
																	"src": "5834:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2034,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2040,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2041,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2025,
																"src": "5868:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2042,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2027,
																"src": "5872:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2033,
														"id": 2044,
														"nodeType": "Return",
														"src": "5861:12:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2023,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:15",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5669:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5690:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "5682:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5709:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "5701:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5734:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "5720:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2028,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:15"
									},
									"returnParameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "5776:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:15"
									},
									"scope": 2073,
									"src": "5660:230:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2071,
										"nodeType": "Block",
										"src": "6661:105:15",
										"statements": [
											{
												"id": 2070,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2060,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2052,
																		"src": "6703:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 2063,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2054,
																	"src": "6710:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2059,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2065,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2068,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2066,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2050,
																"src": "6744:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 2067,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2052,
																"src": "6748:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2058,
														"id": 2069,
														"nodeType": "Return",
														"src": "6737:12:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2048,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:15",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6545:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6566:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2072,
												"src": "6558:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6585:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2072,
												"src": "6577:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6610:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 2072,
												"src": "6596:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2053,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:15"
									},
									"returnParameters": {
										"id": 2058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2072,
												"src": "6652:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:15"
									},
									"scope": 2073,
									"src": "6536:230:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2074,
							"src": "467:6301:15",
							"usedErrors": []
						}
					],
					"src": "92:6677:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							2672
						]
					},
					"id": 2673,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2075,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EnumerableSet",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2076,
								"nodeType": "StructuredDocumentation",
								"src": "125:686:16",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported."
							},
							"fullyImplemented": true,
							"id": 2672,
							"linearizedBaseContracts": [
								2672
							],
							"name": "EnumerableSet",
							"nameLocation": "820:13:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 2084,
									"members": [
										{
											"constant": false,
											"id": 2079,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1344:7:16",
											"nodeType": "VariableDeclaration",
											"scope": 2084,
											"src": "1334:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 2077,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2078,
												"nodeType": "ArrayTypeName",
												"src": "1334:9:16",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2083,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1512:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 2084,
											"src": "1484:36:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 2082,
												"keyType": {
													"id": 2080,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1492:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1484:27:16",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 2081,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1287:3:16",
									"nodeType": "StructDefinition",
									"scope": 2672,
									"src": "1280:247:16",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2125,
										"nodeType": "Block",
										"src": "1766:335:16",
										"statements": [
											{
												"condition": {
													"id": 2099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1780:22:16",
													"subExpression": {
														"arguments": [
															{
																"id": 2096,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2088,
																"src": "1791:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 2097,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2090,
																"src": "1796:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2095,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2229,
															"src": "1781:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 2098,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1781:21:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2123,
													"nodeType": "Block",
													"src": "2058:37:16",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 2121,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2079:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 2094,
															"id": 2122,
															"nodeType": "Return",
															"src": "2072:12:16"
														}
													]
												},
												"id": 2124,
												"nodeType": "IfStatement",
												"src": "1776:319:16",
												"trueBody": {
													"id": 2120,
													"nodeType": "Block",
													"src": "1804:248:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2105,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2090,
																		"src": "1835:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 2100,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2088,
																			"src": "1818:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2103,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2079,
																		"src": "1818:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 2104,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "1818:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 2106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1818:23:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2107,
															"nodeType": "ExpressionStatement",
															"src": "1818:23:16"
														},
														{
															"expression": {
																"id": 2116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 2108,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2088,
																			"src": "1976:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2111,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2083,
																		"src": "1976:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 2112,
																	"indexExpression": {
																		"id": 2110,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2090,
																		"src": "1989:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1976:19:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 2113,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2088,
																			"src": "1998:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2114,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2079,
																		"src": "1998:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 2115,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "1998:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1976:40:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2117,
															"nodeType": "ExpressionStatement",
															"src": "1976:40:16"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2037:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 2094,
															"id": 2119,
															"nodeType": "Return",
															"src": "2030:11:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "1533:159:16",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 2126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "1706:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "1723:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "1711:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2087,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2086,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "1711:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "1711:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1736:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "1728:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2089,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:32:16"
									},
									"returnParameters": {
										"id": 2094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2093,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "1760:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2092,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1760:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1759:6:16"
									},
									"scope": 2672,
									"src": "1697:404:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2209,
										"nodeType": "Block",
										"src": "2341:1316:16",
										"statements": [
											{
												"assignments": [
													2138
												],
												"declarations": [
													{
														"constant": false,
														"id": 2138,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2459:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 2209,
														"src": "2451:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2137,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2451:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2143,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 2139,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2130,
															"src": "2472:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 2140,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2083,
														"src": "2472:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 2142,
													"indexExpression": {
														"id": 2141,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2132,
														"src": "2485:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2472:19:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2451:40:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2144,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2138,
														"src": "2506:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2145,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2520:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2506:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2207,
													"nodeType": "Block",
													"src": "3614:37:16",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 2205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3635:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 2136,
															"id": 2206,
															"nodeType": "Return",
															"src": "3628:12:16"
														}
													]
												},
												"id": 2208,
												"nodeType": "IfStatement",
												"src": "2502:1149:16",
												"trueBody": {
													"id": 2204,
													"nodeType": "Block",
													"src": "2523:1085:16",
													"statements": [
														{
															"assignments": [
																2148
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2148,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "2883:13:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2204,
																	"src": "2875:21:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2147,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2875:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2152,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2149,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2138,
																	"src": "2899:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2150,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2912:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "2899:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2875:38:16"
														},
														{
															"assignments": [
																2154
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2154,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "2935:9:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2204,
																	"src": "2927:17:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2153,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2927:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2160,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 2155,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2130,
																			"src": "2947:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2156,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2079,
																		"src": "2947:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 2157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2947:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2968:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "2947:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2927:42:16"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2161,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2154,
																	"src": "2988:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 2162,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2148,
																	"src": "3001:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2988:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2188,
															"nodeType": "IfStatement",
															"src": "2984:398:16",
															"trueBody": {
																"id": 2187,
																"nodeType": "Block",
																"src": "3016:366:16",
																"statements": [
																	{
																		"assignments": [
																			2165
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2165,
																				"mutability": "mutable",
																				"name": "lastvalue",
																				"nameLocation": "3042:9:16",
																				"nodeType": "VariableDeclaration",
																				"scope": 2187,
																				"src": "3034:17:16",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 2164,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3034:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2170,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 2166,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2130,
																					"src": "3054:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 2167,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2079,
																				"src": "3054:11:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 2169,
																			"indexExpression": {
																				"id": 2168,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2154,
																				"src": "3066:9:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3054:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3034:42:16"
																	},
																	{
																		"expression": {
																			"id": 2177,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 2171,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2130,
																						"src": "3176:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 2174,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2079,
																					"src": "3176:11:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 2175,
																				"indexExpression": {
																					"id": 2173,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2148,
																					"src": "3188:13:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3176:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 2176,
																				"name": "lastvalue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2165,
																				"src": "3205:9:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3176:38:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 2178,
																		"nodeType": "ExpressionStatement",
																		"src": "3176:38:16"
																	},
																	{
																		"expression": {
																			"id": 2185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 2179,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2130,
																						"src": "3288:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 2182,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2083,
																					"src": "3288:12:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 2183,
																				"indexExpression": {
																					"id": 2181,
																					"name": "lastvalue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2165,
																					"src": "3301:9:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3288:23:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 2184,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2138,
																				"src": "3314:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3288:36:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2186,
																		"nodeType": "ExpressionStatement",
																		"src": "3288:36:16"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 2189,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2130,
																			"src": "3460:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2192,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2079,
																		"src": "3460:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 2193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3460:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 2194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3460:17:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2195,
															"nodeType": "ExpressionStatement",
															"src": "3460:17:16"
														},
														{
															"expression": {
																"id": 2200,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "3545:26:16",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 2196,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2130,
																			"src": "3552:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 2197,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2083,
																		"src": "3552:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 2199,
																	"indexExpression": {
																		"id": 2198,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2132,
																		"src": "3565:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3552:19:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2201,
															"nodeType": "ExpressionStatement",
															"src": "3545:26:16"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 2202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3593:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 2136,
															"id": 2203,
															"nodeType": "Return",
															"src": "3586:11:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2127,
										"nodeType": "StructuredDocumentation",
										"src": "2107:157:16",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 2210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2278:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2130,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2298:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "2286:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2129,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2128,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "2286:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "2286:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2132,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2311:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "2303:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2131,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2303:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2285:32:16"
									},
									"returnParameters": {
										"id": 2136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "2335:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2134,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2335:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2334:6:16"
									},
									"scope": 2672,
									"src": "2269:1388:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2228,
										"nodeType": "Block",
										"src": "3817:48:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 2221,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2214,
																"src": "3834:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 2222,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2083,
															"src": "3834:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 2224,
														"indexExpression": {
															"id": 2223,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2216,
															"src": "3847:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3834:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2225,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3857:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3834:24:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2220,
												"id": 2227,
												"nodeType": "Return",
												"src": "3827:31:16"
											}
										]
									},
									"documentation": {
										"id": 2211,
										"nodeType": "StructuredDocumentation",
										"src": "3663:70:16",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 2229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "3747:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2214,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "3769:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2229,
												"src": "3757:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2213,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2212,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "3757:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "3757:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3782:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2229,
												"src": "3774:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3756:32:16"
									},
									"returnParameters": {
										"id": 2220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2229,
												"src": "3811:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2218,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3811:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3810:6:16"
									},
									"scope": 2672,
									"src": "3738:127:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2242,
										"nodeType": "Block",
										"src": "4011:42:16",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 2238,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "4028:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 2239,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2079,
														"src": "4028:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 2240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4028:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2237,
												"id": 2241,
												"nodeType": "Return",
												"src": "4021:25:16"
											}
										]
									},
									"documentation": {
										"id": 2230,
										"nodeType": "StructuredDocumentation",
										"src": "3871:70:16",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 2243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "3955:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "3975:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "3963:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2231,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "3963:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "3963:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3962:17:16"
									},
									"returnParameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "4002:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4002:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4001:9:16"
									},
									"scope": 2672,
									"src": "3946:107:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2259,
										"nodeType": "Block",
										"src": "4471:42:16",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 2254,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2247,
															"src": "4488:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 2255,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2079,
														"src": "4488:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 2257,
													"indexExpression": {
														"id": 2256,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2249,
														"src": "4500:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4488:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2253,
												"id": 2258,
												"nodeType": "Return",
												"src": "4481:25:16"
											}
										]
									},
									"documentation": {
										"id": 2244,
										"nodeType": "StructuredDocumentation",
										"src": "4059:331:16",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 2260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4404:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4420:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "4408:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2246,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2245,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "4408:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "4408:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2249,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4433:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "4425:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4425:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4407:32:16"
									},
									"returnParameters": {
										"id": 2253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2252,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "4462:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2251,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4462:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4461:9:16"
									},
									"scope": 2672,
									"src": "4395:118:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2273,
										"nodeType": "Block",
										"src": "5127:35:16",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2270,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2264,
														"src": "5144:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 2271,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2079,
													"src": "5144:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 2269,
												"id": 2272,
												"nodeType": "Return",
												"src": "5137:18:16"
											}
										]
									},
									"documentation": {
										"id": 2261,
										"nodeType": "StructuredDocumentation",
										"src": "4519:529:16",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 2274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5062:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5082:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2274,
												"src": "5070:15:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 2263,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2262,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2084,
														"src": "5070:3:16"
													},
													"referencedDeclaration": 2084,
													"src": "5070:3:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5069:17:16"
									},
									"returnParameters": {
										"id": 2269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2274,
												"src": "5109:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2266,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5109:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2267,
													"nodeType": "ArrayTypeName",
													"src": "5109:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5108:18:16"
									},
									"scope": 2672,
									"src": "5053:109:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 2278,
									"members": [
										{
											"constant": false,
											"id": 2277,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5219:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2278,
											"src": "5215:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 2276,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2275,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2084,
													"src": "5215:3:16"
												},
												"referencedDeclaration": 2084,
												"src": "5215:3:16",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5194:10:16",
									"nodeType": "StructDefinition",
									"scope": 2672,
									"src": "5187:45:16",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2295,
										"nodeType": "Block",
										"src": "5478:47:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2290,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2282,
																"src": "5500:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2291,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "5500:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 2292,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2284,
															"src": "5512:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2289,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2126,
														"src": "5495:4:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5495:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2288,
												"id": 2294,
												"nodeType": "Return",
												"src": "5488:30:16"
											}
										]
									},
									"documentation": {
										"id": 2279,
										"nodeType": "StructuredDocumentation",
										"src": "5238:159:16",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 2296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5411:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2282,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5434:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "5415:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2281,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2280,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "5415:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "5415:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2284,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5447:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "5439:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2283,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5439:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5414:39:16"
									},
									"returnParameters": {
										"id": 2288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2287,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "5472:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2286,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5472:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5471:6:16"
									},
									"scope": 2672,
									"src": "5402:123:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2313,
										"nodeType": "Block",
										"src": "5772:50:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2308,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2300,
																"src": "5797:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2309,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "5797:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 2310,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2302,
															"src": "5809:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2307,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2210,
														"src": "5789:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5789:26:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2306,
												"id": 2312,
												"nodeType": "Return",
												"src": "5782:33:16"
											}
										]
									},
									"documentation": {
										"id": 2297,
										"nodeType": "StructuredDocumentation",
										"src": "5531:157:16",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 2314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "5702:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5728:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2314,
												"src": "5709:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2299,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2298,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "5709:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "5709:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2302,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5741:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2314,
												"src": "5733:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2301,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5733:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5708:39:16"
									},
									"returnParameters": {
										"id": 2306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2314,
												"src": "5766:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5766:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5765:6:16"
									},
									"scope": 2672,
									"src": "5693:129:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2331,
										"nodeType": "Block",
										"src": "5989:52:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2326,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2318,
																"src": "6016:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "6016:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 2328,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "6028:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2325,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2229,
														"src": "6006:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 2329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6006:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2324,
												"id": 2330,
												"nodeType": "Return",
												"src": "5999:35:16"
											}
										]
									},
									"documentation": {
										"id": 2315,
										"nodeType": "StructuredDocumentation",
										"src": "5828:70:16",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 2332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "5912:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5940:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "5921:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2317,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2316,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "5921:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "5921:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5953:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "5945:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2319,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5945:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5920:39:16"
									},
									"returnParameters": {
										"id": 2324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "5983:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2322,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5983:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5982:6:16"
									},
									"scope": 2672,
									"src": "5903:138:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2346,
										"nodeType": "Block",
										"src": "6194:43:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2342,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2336,
																"src": "6219:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2343,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "6219:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2341,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2243,
														"src": "6211:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 2344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6211:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2340,
												"id": 2345,
												"nodeType": "Return",
												"src": "6204:26:16"
											}
										]
									},
									"documentation": {
										"id": 2333,
										"nodeType": "StructuredDocumentation",
										"src": "6047:70:16",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 2347,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6131:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2336,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6157:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6138:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2335,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2334,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "6138:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "6138:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6137:24:16"
									},
									"returnParameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2347,
												"src": "6185:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6185:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6184:9:16"
									},
									"scope": 2672,
									"src": "6122:115:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2364,
										"nodeType": "Block",
										"src": "6662:46:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2359,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2351,
																"src": "6683:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2360,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "6683:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 2361,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2353,
															"src": "6695:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2358,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2260,
														"src": "6679:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 2362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6679:22:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2357,
												"id": 2363,
												"nodeType": "Return",
												"src": "6672:29:16"
											}
										]
									},
									"documentation": {
										"id": 2348,
										"nodeType": "StructuredDocumentation",
										"src": "6243:331:16",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 2365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "6588:2:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6610:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "6591:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2350,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2349,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "6591:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "6591:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2353,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "6623:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "6615:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6590:39:16"
									},
									"returnParameters": {
										"id": 2357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "6653:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2355,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6653:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:9:16"
									},
									"scope": 2672,
									"src": "6579:129:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2380,
										"nodeType": "Block",
										"src": "7329:43:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2376,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2369,
																"src": "7354:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 2377,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2277,
															"src": "7354:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2375,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2274,
														"src": "7346:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 2378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 2374,
												"id": 2379,
												"nodeType": "Return",
												"src": "7339:26:16"
											}
										]
									},
									"documentation": {
										"id": 2366,
										"nodeType": "StructuredDocumentation",
										"src": "6714:529:16",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 2381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7257:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2369,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7283:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2381,
												"src": "7264:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 2368,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2367,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2278,
														"src": "7264:10:16"
													},
													"referencedDeclaration": 2278,
													"src": "7264:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$2278_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7263:24:16"
									},
									"returnParameters": {
										"id": 2374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2381,
												"src": "7311:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2371,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7311:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2372,
													"nodeType": "ArrayTypeName",
													"src": "7311:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7310:18:16"
									},
									"scope": 2672,
									"src": "7248:124:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 2385,
									"members": [
										{
											"constant": false,
											"id": 2384,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "7429:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2385,
											"src": "7425:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 2383,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2382,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2084,
													"src": "7425:3:16"
												},
												"referencedDeclaration": 2084,
												"src": "7425:3:16",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "7404:10:16",
									"nodeType": "StructDefinition",
									"scope": 2672,
									"src": "7397:45:16",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2411,
										"nodeType": "Block",
										"src": "7688:74:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2397,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2389,
																"src": "7710:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 2398,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2384,
															"src": "7710:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2405,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2391,
																					"src": "7746:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2404,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7738:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 2403,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "7738:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7738:14:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 2402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7730:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2401,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7730:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7730:23:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2400,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7722:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2399,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "7722:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7722:32:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2396,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2126,
														"src": "7705:4:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7705:50:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2395,
												"id": 2410,
												"nodeType": "Return",
												"src": "7698:57:16"
											}
										]
									},
									"documentation": {
										"id": 2386,
										"nodeType": "StructuredDocumentation",
										"src": "7448:159:16",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 2412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "7621:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2389,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7644:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "7625:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2388,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2387,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "7625:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "7625:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7657:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "7649:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7649:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7624:39:16"
									},
									"returnParameters": {
										"id": 2395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "7682:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2393,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7682:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7681:6:16"
									},
									"scope": 2672,
									"src": "7612:150:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2438,
										"nodeType": "Block",
										"src": "8009:77:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2424,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2416,
																"src": "8034:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 2425,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2384,
															"src": "8034:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2432,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2418,
																					"src": "8070:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2431,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8062:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 2430,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8062:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8062:14:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 2429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8054:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2428,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8054:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2434,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8054:23:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2427,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8046:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2426,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8046:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8046:32:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2423,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2210,
														"src": "8026:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8026:53:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2422,
												"id": 2437,
												"nodeType": "Return",
												"src": "8019:60:16"
											}
										]
									},
									"documentation": {
										"id": 2413,
										"nodeType": "StructuredDocumentation",
										"src": "7768:157:16",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 2439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "7939:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7965:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2439,
												"src": "7946:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2415,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2414,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "7946:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "7946:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7978:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2439,
												"src": "7970:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2417,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7970:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7945:39:16"
									},
									"returnParameters": {
										"id": 2422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2421,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2439,
												"src": "8003:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2420,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8003:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8002:6:16"
									},
									"scope": 2672,
									"src": "7930:156:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2465,
										"nodeType": "Block",
										"src": "8253:79:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2451,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "8280:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 2452,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2384,
															"src": "8280:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2459,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2445,
																					"src": "8316:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2458,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8308:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 2457,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8308:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2460,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8308:14:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 2456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8300:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2455,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8300:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8300:23:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2454,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8292:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2453,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8292:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8292:32:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2450,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2229,
														"src": "8270:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 2463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8270:55:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2449,
												"id": 2464,
												"nodeType": "Return",
												"src": "8263:62:16"
											}
										]
									},
									"documentation": {
										"id": 2440,
										"nodeType": "StructuredDocumentation",
										"src": "8092:70:16",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 2466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8176:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8204:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2466,
												"src": "8185:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2442,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2441,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "8185:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "8185:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2445,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8217:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2466,
												"src": "8209:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2444,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8209:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8184:39:16"
									},
									"returnParameters": {
										"id": 2449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2466,
												"src": "8247:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8247:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8246:6:16"
									},
									"scope": 2672,
									"src": "8167:165:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2480,
										"nodeType": "Block",
										"src": "8485:43:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2476,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2470,
																"src": "8510:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 2477,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2384,
															"src": "8510:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2475,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2243,
														"src": "8502:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 2478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8502:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2474,
												"id": 2479,
												"nodeType": "Return",
												"src": "8495:26:16"
											}
										]
									},
									"documentation": {
										"id": 2467,
										"nodeType": "StructuredDocumentation",
										"src": "8338:70:16",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 2481,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "8422:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2470,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8448:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2481,
												"src": "8429:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2469,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2468,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "8429:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "8429:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8428:24:16"
									},
									"returnParameters": {
										"id": 2474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2481,
												"src": "8476:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8476:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8475:9:16"
									},
									"scope": 2672,
									"src": "8413:115:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2507,
										"nodeType": "Block",
										"src": "8953:73:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2499,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2485,
																						"src": "8998:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 2500,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2384,
																					"src": "8998:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$2084_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 2501,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2487,
																					"src": "9010:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$2084_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2498,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2260,
																				"src": "8994:3:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 2502,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8994:22:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 2497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8986:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2496,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8986:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8986:31:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8978:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 2494,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "8978:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8978:40:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 2493,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8970:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 2492,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8970:7:16",
															"typeDescriptions": {}
														}
													},
													"id": 2505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8970:49:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2491,
												"id": 2506,
												"nodeType": "Return",
												"src": "8963:56:16"
											}
										]
									},
									"documentation": {
										"id": 2482,
										"nodeType": "StructuredDocumentation",
										"src": "8534:331:16",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 2508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "8879:2:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8901:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "8882:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2484,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2483,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "8882:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "8882:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2487,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "8914:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "8906:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8906:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8881:39:16"
									},
									"returnParameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2490,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "8944:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8944:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8943:9:16"
									},
									"scope": 2672,
									"src": "8870:156:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2537,
										"nodeType": "Block",
										"src": "9647:176:16",
										"statements": [
											{
												"assignments": [
													2522
												],
												"declarations": [
													{
														"constant": false,
														"id": 2522,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "9674:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2537,
														"src": "9657:22:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 2520,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "9657:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2521,
															"nodeType": "ArrayTypeName",
															"src": "9657:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2527,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 2524,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2512,
																"src": "9690:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 2525,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2384,
															"src": "9690:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2523,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2274,
														"src": "9682:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 2526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9682:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9657:44:16"
											},
											{
												"assignments": [
													2532
												],
												"declarations": [
													{
														"constant": false,
														"id": 2532,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9728:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2537,
														"src": "9711:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 2530,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9711:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2531,
															"nodeType": "ArrayTypeName",
															"src": "9711:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2533,
												"nodeType": "VariableDeclarationStatement",
												"src": "9711:23:16"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "9754:39:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9768:15:16",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "9778:5:16"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "9768:6:16"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2532,
														"isOffset": false,
														"isSlot": false,
														"src": "9768:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2522,
														"isOffset": false,
														"isSlot": false,
														"src": "9778:5:16",
														"valueSize": 1
													}
												],
												"id": 2534,
												"nodeType": "InlineAssembly",
												"src": "9745:48:16"
											},
											{
												"expression": {
													"id": 2535,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2532,
													"src": "9810:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 2517,
												"id": 2536,
												"nodeType": "Return",
												"src": "9803:13:16"
											}
										]
									},
									"documentation": {
										"id": 2509,
										"nodeType": "StructuredDocumentation",
										"src": "9032:529:16",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 2538,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "9575:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9601:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2538,
												"src": "9582:22:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 2511,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2510,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2385,
														"src": "9582:10:16"
													},
													"referencedDeclaration": 2385,
													"src": "9582:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$2385_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9581:24:16"
									},
									"returnParameters": {
										"id": 2517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2538,
												"src": "9629:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2514,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9629:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2515,
													"nodeType": "ArrayTypeName",
													"src": "9629:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:18:16"
									},
									"scope": 2672,
									"src": "9566:257:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 2542,
									"members": [
										{
											"constant": false,
											"id": 2541,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "9874:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2542,
											"src": "9870:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 2540,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2539,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2084,
													"src": "9870:3:16"
												},
												"referencedDeclaration": 2084,
												"src": "9870:3:16",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$2084_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "9852:7:16",
									"nodeType": "StructDefinition",
									"scope": 2672,
									"src": "9845:42:16",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2562,
										"nodeType": "Block",
										"src": "10130:56:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2554,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "10152:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 2555,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2541,
															"src": "10152:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 2558,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2548,
																	"src": "10172:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10164:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2556,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10164:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10164:14:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2553,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2126,
														"src": "10147:4:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10147:32:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2552,
												"id": 2561,
												"nodeType": "Return",
												"src": "10140:39:16"
											}
										]
									},
									"documentation": {
										"id": 2543,
										"nodeType": "StructuredDocumentation",
										"src": "9893:159:16",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 2563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10066:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2546,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10086:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2563,
												"src": "10070:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2545,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2544,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "10070:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "10070:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2548,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10099:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2563,
												"src": "10091:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10091:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10069:36:16"
									},
									"returnParameters": {
										"id": 2552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2551,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2563,
												"src": "10124:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10124:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10123:6:16"
									},
									"scope": 2672,
									"src": "10057:129:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2583,
										"nodeType": "Block",
										"src": "10430:59:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2575,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2567,
																"src": "10455:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 2576,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2541,
															"src": "10455:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 2579,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2569,
																	"src": "10475:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10467:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2577,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10467:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10467:14:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2574,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2210,
														"src": "10447:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 2581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10447:35:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2573,
												"id": 2582,
												"nodeType": "Return",
												"src": "10440:42:16"
											}
										]
									},
									"documentation": {
										"id": 2564,
										"nodeType": "StructuredDocumentation",
										"src": "10192:157:16",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 2584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "10363:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2567,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10386:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2584,
												"src": "10370:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2566,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2565,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "10370:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "10370:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2569,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10399:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2584,
												"src": "10391:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10391:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10369:36:16"
									},
									"returnParameters": {
										"id": 2573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2584,
												"src": "10424:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2571,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10424:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10423:6:16"
									},
									"scope": 2672,
									"src": "10354:135:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2604,
										"nodeType": "Block",
										"src": "10653:61:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2596,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2588,
																"src": "10680:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 2597,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2541,
															"src": "10680:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 2600,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2590,
																	"src": "10700:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2599,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10692:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2598,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10692:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10692:14:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2595,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2229,
														"src": "10670:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 2602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10670:37:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2594,
												"id": 2603,
												"nodeType": "Return",
												"src": "10663:44:16"
											}
										]
									},
									"documentation": {
										"id": 2585,
										"nodeType": "StructuredDocumentation",
										"src": "10495:70:16",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 2605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "10579:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2588,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10604:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "10588:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2587,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2586,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "10588:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "10588:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2590,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10617:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "10609:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10609:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10587:36:16"
									},
									"returnParameters": {
										"id": 2594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2605,
												"src": "10647:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2592,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10647:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10646:6:16"
									},
									"scope": 2672,
									"src": "10570:144:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2619,
										"nodeType": "Block",
										"src": "10864:43:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2615,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2609,
																"src": "10889:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 2616,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2541,
															"src": "10889:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2614,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2243,
														"src": "10881:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 2617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10881:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2613,
												"id": 2618,
												"nodeType": "Return",
												"src": "10874:26:16"
											}
										]
									},
									"documentation": {
										"id": 2606,
										"nodeType": "StructuredDocumentation",
										"src": "10720:70:16",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 2620,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "10804:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10827:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2620,
												"src": "10811:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2608,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2607,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "10811:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "10811:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10810:21:16"
									},
									"returnParameters": {
										"id": 2613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2620,
												"src": "10855:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10855:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10854:9:16"
									},
									"scope": 2672,
									"src": "10795:112:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2640,
										"nodeType": "Block",
										"src": "11329:55:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2634,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2624,
																		"src": "11358:3:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 2635,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2541,
																	"src": "11358:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$2084_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 2636,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2626,
																	"src": "11370:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$2084_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2633,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2260,
																"src": "11354:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 2637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11354:22:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2632,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "11346:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 2631,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11346:7:16",
															"typeDescriptions": {}
														}
													},
													"id": 2638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11346:31:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2630,
												"id": 2639,
												"nodeType": "Return",
												"src": "11339:38:16"
											}
										]
									},
									"documentation": {
										"id": 2621,
										"nodeType": "StructuredDocumentation",
										"src": "10913:331:16",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 2641,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "11258:2:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11277:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "11261:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2623,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2622,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "11261:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "11261:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2626,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "11290:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "11282:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11282:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11260:36:16"
									},
									"returnParameters": {
										"id": 2630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "11320:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11320:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11319:9:16"
									},
									"scope": 2672,
									"src": "11249:135:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2670,
										"nodeType": "Block",
										"src": "12002:176:16",
										"statements": [
											{
												"assignments": [
													2655
												],
												"declarations": [
													{
														"constant": false,
														"id": 2655,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12029:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2670,
														"src": "12012:22:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 2653,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12012:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2654,
															"nodeType": "ArrayTypeName",
															"src": "12012:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2660,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 2657,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2645,
																"src": "12045:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 2658,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2541,
															"src": "12045:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$2084_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 2656,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2274,
														"src": "12037:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$2084_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 2659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12037:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12012:44:16"
											},
											{
												"assignments": [
													2665
												],
												"declarations": [
													{
														"constant": false,
														"id": 2665,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12083:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2670,
														"src": "12066:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 2663,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12066:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2664,
															"nodeType": "ArrayTypeName",
															"src": "12066:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2666,
												"nodeType": "VariableDeclarationStatement",
												"src": "12066:23:16"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12109:39:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12123:15:16",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12133:5:16"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12123:6:16"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2665,
														"isOffset": false,
														"isSlot": false,
														"src": "12123:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2655,
														"isOffset": false,
														"isSlot": false,
														"src": "12133:5:16",
														"valueSize": 1
													}
												],
												"id": 2667,
												"nodeType": "InlineAssembly",
												"src": "12100:48:16"
											},
											{
												"expression": {
													"id": 2668,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2665,
													"src": "12165:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 2650,
												"id": 2669,
												"nodeType": "Return",
												"src": "12158:13:16"
											}
										]
									},
									"documentation": {
										"id": 2642,
										"nodeType": "StructuredDocumentation",
										"src": "11390:529:16",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 2671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "11933:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2645,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11956:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2671,
												"src": "11940:19:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 2644,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2643,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2542,
														"src": "11940:7:16"
													},
													"referencedDeclaration": 2542,
													"src": "11940:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$2542_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11939:21:16"
									},
									"returnParameters": {
										"id": 2650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2671,
												"src": "11984:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2647,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11984:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2648,
													"nodeType": "ArrayTypeName",
													"src": "11984:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11983:18:16"
									},
									"scope": 2672,
									"src": "11924:254:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2673,
							"src": "812:11368:16",
							"usedErrors": []
						}
					],
					"src": "100:12081:16"
				},
				"id": 16
			},
			"contracts/HatTokenV2.sol": {
				"ast": {
					"absolutePath": "contracts/HatTokenV2.sol",
					"exportedSymbols": {
						"AccessControl": [
							308
						],
						"AccessControlEnumerable": [
							433
						],
						"Context": [
							1522
						],
						"ERC165": [
							1749
						],
						"ERC20": [
							1316
						],
						"ERC20Burnable": [
							1438
						],
						"ERC20Pausable": [
							1475
						],
						"EnumerableSet": [
							2672
						],
						"HatTokenV2": [
							2987
						],
						"IAccessControl": [
							506
						],
						"IAccessControlEnumerable": [
							531
						],
						"IERC165": [
							1761
						],
						"IERC20": [
							1394
						],
						"IERC20Metadata": [
							1500
						],
						"Ownable": [
							636
						],
						"Pausable": [
							728
						],
						"SafeMath": [
							2073
						],
						"Strings": [
							1725
						]
					},
					"id": 2988,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2674,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
							"file": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
							"id": 2675,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 434,
							"src": "63:68:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 2676,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 637,
							"src": "133:52:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 2677,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 1317,
							"src": "187:55:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 2678,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 1439,
							"src": "244:74:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"id": 2679,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 1476,
							"src": "320:74:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 2680,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 1523,
							"src": "396:51:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 2681,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2988,
							"sourceUnit": 2074,
							"src": "449:57:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2682,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1522,
										"src": "533:7:17"
									},
									"id": 2683,
									"nodeType": "InheritanceSpecifier",
									"src": "533:7:17"
								},
								{
									"baseName": {
										"id": 2684,
										"name": "AccessControlEnumerable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 433,
										"src": "542:23:17"
									},
									"id": 2685,
									"nodeType": "InheritanceSpecifier",
									"src": "542:23:17"
								},
								{
									"baseName": {
										"id": 2686,
										"name": "ERC20Burnable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1438,
										"src": "567:13:17"
									},
									"id": 2687,
									"nodeType": "InheritanceSpecifier",
									"src": "567:13:17"
								},
								{
									"baseName": {
										"id": 2688,
										"name": "ERC20Pausable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1475,
										"src": "582:13:17"
									},
									"id": 2689,
									"nodeType": "InheritanceSpecifier",
									"src": "582:13:17"
								},
								{
									"baseName": {
										"id": 2690,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 636,
										"src": "597:7:17"
									},
									"id": 2691,
									"nodeType": "InheritanceSpecifier",
									"src": "597:7:17"
								}
							],
							"canonicalName": "HatTokenV2",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2987,
							"linearizedBaseContracts": [
								2987,
								636,
								1475,
								728,
								1438,
								1316,
								1500,
								1394,
								433,
								308,
								1749,
								1761,
								531,
								506,
								1522
							],
							"name": "HatTokenV2",
							"nameLocation": "519:10:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2694,
									"libraryName": {
										"id": 2692,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2073,
										"src": "618:8:17"
									},
									"nodeType": "UsingForDirective",
									"src": "612:27:17",
									"typeName": {
										"id": 2693,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "631:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"functionSelector": "d5391393",
									"id": 2699,
									"mutability": "constant",
									"name": "MINTER_ROLE",
									"nameLocation": "671:11:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "647:62:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2695,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "647:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "4d494e5445525f524f4c45",
												"id": 2697,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "695:13:17",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
													"typeString": "literal_string \"MINTER_ROLE\""
												},
												"value": "MINTER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
													"typeString": "literal_string \"MINTER_ROLE\""
												}
											],
											"id": 2696,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "685:9:17",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2698,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "685:24:17",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "e63ab1e9",
									"id": 2704,
									"mutability": "constant",
									"name": "PAUSER_ROLE",
									"nameLocation": "740:11:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "716:62:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2700,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "716:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5041555345525f524f4c45",
												"id": 2702,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "764:13:17",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												},
												"value": "PAUSER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												}
											],
											"id": 2701,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "754:9:17",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2703,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "754:24:17",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 2706,
									"mutability": "mutable",
									"name": "_liquidityFee",
									"nameLocation": "795:13:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "787:21:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2705,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "787:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2708,
									"mutability": "mutable",
									"name": "_liquidityKeeper",
									"nameLocation": "823:16:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "815:24:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2707,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "815:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2712,
									"mutability": "mutable",
									"name": "_blockSenders",
									"nameLocation": "873:13:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "848:38:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 2711,
										"keyType": {
											"id": 2709,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "856:7:17",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "848:24:17",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 2710,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "867:4:17",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2716,
									"mutability": "mutable",
									"name": "_blockReceivers",
									"nameLocation": "918:15:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "893:40:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 2715,
										"keyType": {
											"id": 2713,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "901:7:17",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "893:24:17",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 2714,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "912:4:17",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2720,
									"mutability": "mutable",
									"name": "_liquidityFrees",
									"nameLocation": "965:15:17",
									"nodeType": "VariableDeclaration",
									"scope": 2987,
									"src": "940:40:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 2719,
										"keyType": {
											"id": 2717,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "948:7:17",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "940:24:17",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 2718,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "959:4:17",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2771,
										"nodeType": "Block",
										"src": "1164:272:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2733,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1186:18:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2734,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "1206:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1206:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2732,
														"name": "_setupRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "1175:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 2736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1175:44:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2737,
												"nodeType": "ExpressionStatement",
												"src": "1175:44:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2739,
															"name": "MINTER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2699,
															"src": "1243:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2740,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "1256:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1256:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2738,
														"name": "_setupRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "1232:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 2742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1232:37:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2743,
												"nodeType": "ExpressionStatement",
												"src": "1232:37:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2745,
															"name": "PAUSER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2704,
															"src": "1291:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2746,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "1304:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2747,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1304:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2744,
														"name": "_setupRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "1280:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 2748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1280:37:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2749,
												"nodeType": "ExpressionStatement",
												"src": "1280:37:17"
											},
											{
												"expression": {
													"id": 2752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2750,
														"name": "_liquidityFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2706,
														"src": "1330:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3530",
														"id": 2751,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1346:2:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_50_by_1",
															"typeString": "int_const 50"
														},
														"value": "50"
													},
													"src": "1330:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2753,
												"nodeType": "ExpressionStatement",
												"src": "1330:18:17"
											},
											{
												"expression": {
													"id": 2757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2754,
														"name": "_liquidityKeeper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2708,
														"src": "1359:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2755,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "1378:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 2756,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1378:7:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1359:26:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2758,
												"nodeType": "ExpressionStatement",
												"src": "1359:26:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2760,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 564,
																"src": "1404:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1404:7:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000000000"
															},
															"id": 2768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"id": 2764,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2762,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1413:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "39",
																	"id": 2763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1417:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"src": "1413:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"id": 2767,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2765,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1421:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3138",
																	"id": 2766,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1425:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_18_by_1",
																		"typeString": "int_const 18"
																	},
																	"value": "18"
																},
																"src": "1421:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																}
															},
															"src": "1413:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000000000"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000000000"
															}
														],
														"id": 2759,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "1398:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1398:30:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2770,
												"nodeType": "ExpressionStatement",
												"src": "1398:30:17"
											}
										]
									},
									"documentation": {
										"id": 2721,
										"nodeType": "StructuredDocumentation",
										"src": "989:95:17",
										"text": " @dev Set liquidity fee and keeper\n See {ERC20-constructor}."
									},
									"id": 2772,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2728,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2723,
													"src": "1150:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 2729,
													"name": "symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2725,
													"src": "1156:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 2730,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 2727,
												"name": "ERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1316,
												"src": "1144:5:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "1144:19:17"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2723,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1116:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2772,
												"src": "1102:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2722,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1102:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2725,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "1136:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2772,
												"src": "1122:20:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2724,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1122:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:42:17"
									},
									"returnParameters": {
										"id": 2731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1164:0:17"
									},
									"scope": 2987,
									"src": "1090:346:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1304,
										1474
									],
									"body": {
										"id": 2808,
										"nodeType": "Block",
										"src": "1598:321:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1631:20:17",
															"subExpression": {
																"baseExpression": {
																	"id": 2785,
																	"name": "_blockSenders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2712,
																	"src": "1632:13:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 2787,
																"indexExpression": {
																	"id": 2786,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2774,
																	"src": "1646:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1632:19:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4865726f204177616b656e20546f6b656e3a207468652073656e64657220686173206265656e20626c6f636b6564",
															"id": 2789,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1666:48:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558",
																"typeString": "literal_string \"Hero Awaken Token: the sender has been blocked\""
															},
															"value": "Hero Awaken Token: the sender has been blocked"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_38ea22d62bc3b2e3c5f0cc901588eecd548920307fb08be95c0c66feb2b58558",
																"typeString": "literal_string \"Hero Awaken Token: the sender has been blocked\""
															}
														],
														"id": 2784,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1609:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1609:116:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2791,
												"nodeType": "ExpressionStatement",
												"src": "1609:116:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1758:20:17",
															"subExpression": {
																"baseExpression": {
																	"id": 2793,
																	"name": "_blockReceivers",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2716,
																	"src": "1759:15:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 2795,
																"indexExpression": {
																	"id": 2794,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2776,
																	"src": "1775:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1759:19:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4865726f204177616b656e20546f6b656e3a2074686520726563656976657220686173206265656e20626c6f636b6564",
															"id": 2797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1793:50:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce",
																"typeString": "literal_string \"Hero Awaken Token: the receiver has been blocked\""
															},
															"value": "Hero Awaken Token: the receiver has been blocked"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec8877d305b63d09beb1eb34ad85958b1b838ba4fc2b0341f1036c9b08fa36ce",
																"typeString": "literal_string \"Hero Awaken Token: the receiver has been blocked\""
															}
														],
														"id": 2792,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1736:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1736:118:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2799,
												"nodeType": "ExpressionStatement",
												"src": "1736:118:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2803,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2774,
															"src": "1894:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2804,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2776,
															"src": "1900:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2805,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2778,
															"src": "1904:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2800,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1867:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_HatTokenV2_$2987_$",
																"typeString": "type(contract super HatTokenV2)"
															}
														},
														"id": 2802,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1474,
														"src": "1867:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1867:44:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2807,
												"nodeType": "ExpressionStatement",
												"src": "1867:44:17"
											}
										]
									},
									"id": 2809,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "1453:20:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2782,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2780,
												"name": "ERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1316,
												"src": "1576:5:17"
											},
											{
												"id": 2781,
												"name": "ERC20Pausable",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1475,
												"src": "1583:13:17"
											}
										],
										"src": "1567:30:17"
									},
									"parameters": {
										"id": 2779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1492:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2809,
												"src": "1484:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2773,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1484:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2776,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1515:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 2809,
												"src": "1507:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2775,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1507:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2778,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1536:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2809,
												"src": "1528:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1473:76:17"
									},
									"returnParameters": {
										"id": 2783,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1598:0:17"
									},
									"scope": 2987,
									"src": "1444:475:17",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2818,
										"nodeType": "Block",
										"src": "2039:33:17",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2815,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 564,
														"src": "2057:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 2816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2057:7:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2814,
												"id": 2817,
												"nodeType": "Return",
												"src": "2050:14:17"
											}
										]
									},
									"documentation": {
										"id": 2810,
										"nodeType": "StructuredDocumentation",
										"src": "1927:54:17",
										"text": " @dev Returns the bep token owner."
									},
									"functionSelector": "893d20e8",
									"id": 2819,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOwner",
									"nameLocation": "1996:8:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2811,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2004:2:17"
									},
									"returnParameters": {
										"id": 2814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2813,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2030:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:9:17"
									},
									"scope": 2987,
									"src": "1987:85:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2826,
										"nodeType": "Block",
										"src": "2136:39:17",
										"statements": [
											{
												"expression": {
													"id": 2824,
													"name": "_liquidityFee",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2706,
													"src": "2154:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2823,
												"id": 2825,
												"nodeType": "Return",
												"src": "2147:20:17"
											}
										]
									},
									"functionSelector": "98118cb4",
									"id": 2827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "liquidityFee",
									"nameLocation": "2089:12:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2820,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2101:2:17"
									},
									"returnParameters": {
										"id": 2823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2822,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2827,
												"src": "2127:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2127:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2126:9:17"
									},
									"scope": 2987,
									"src": "2080:95:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2834,
										"nodeType": "Block",
										"src": "2242:42:17",
										"statements": [
											{
												"expression": {
													"id": 2832,
													"name": "_liquidityKeeper",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2708,
													"src": "2260:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2831,
												"id": 2833,
												"nodeType": "Return",
												"src": "2253:23:17"
											}
										]
									},
									"functionSelector": "7f257c3e",
									"id": 2835,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "liquidityKeeper",
									"nameLocation": "2192:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2828,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2207:2:17"
									},
									"returnParameters": {
										"id": 2831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2830,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "2233:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2232:9:17"
									},
									"scope": 2987,
									"src": "2183:101:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2852,
										"nodeType": "Block",
										"src": "2358:70:17",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"baseExpression": {
																"id": 2844,
																"name": "_blockSenders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2712,
																"src": "2377:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 2846,
															"indexExpression": {
																"id": 2845,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2837,
																"src": "2391:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2377:19:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"baseExpression": {
																"id": 2847,
																"name": "_blockReceivers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2716,
																"src": "2398:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 2849,
															"indexExpression": {
																"id": 2848,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2837,
																"src": "2414:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2398:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 2850,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2376:44:17",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$",
														"typeString": "tuple(bool,bool)"
													}
												},
												"functionReturnParameters": 2843,
												"id": 2851,
												"nodeType": "Return",
												"src": "2369:51:17"
											}
										]
									},
									"functionSelector": "e5962195",
									"id": 2853,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "blocked",
									"nameLocation": "2301:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2837,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2317:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2853,
												"src": "2309:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2309:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2308:14:17"
									},
									"returnParameters": {
										"id": 2843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2840,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2853,
												"src": "2346:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2839,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2346:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2853,
												"src": "2352:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2841,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2352:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:12:17"
									},
									"scope": 2987,
									"src": "2292:136:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2876,
										"nodeType": "Block",
										"src": "2553:95:17",
										"statements": [
											{
												"expression": {
													"id": 2868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2864,
															"name": "_blockSenders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2712,
															"src": "2564:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2866,
														"indexExpression": {
															"id": 2865,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2855,
															"src": "2578:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2564:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2867,
														"name": "can_send",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2857,
														"src": "2586:8:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2564:30:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2869,
												"nodeType": "ExpressionStatement",
												"src": "2564:30:17"
											},
											{
												"expression": {
													"id": 2874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2870,
															"name": "_blockReceivers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2716,
															"src": "2605:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2872,
														"indexExpression": {
															"id": 2871,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2855,
															"src": "2621:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2605:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2873,
														"name": "can_receive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2859,
														"src": "2629:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2605:35:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2875,
												"nodeType": "ExpressionStatement",
												"src": "2605:35:17"
											}
										]
									},
									"functionSelector": "8bea9334",
									"id": 2877,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2862,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2861,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "2543:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "2543:9:17"
										}
									],
									"name": "blockUser",
									"nameLocation": "2445:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2855,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2473:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "2465:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2857,
												"mutability": "mutable",
												"name": "can_send",
												"nameLocation": "2493:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "2488:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2856,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2488:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2859,
												"mutability": "mutable",
												"name": "can_receive",
												"nameLocation": "2517:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "2512:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2858,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2512:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2454:81:17"
									},
									"returnParameters": {
										"id": 2863,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:17"
									},
									"scope": 2987,
									"src": "2436:212:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2899,
										"nodeType": "Block",
										"src": "2711:180:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2891,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2885,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2879,
																	"src": "2744:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2751:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2744:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2890,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2888,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2879,
																	"src": "2756:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 2889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2763:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "2756:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2744:23:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4865726f204177616b656e20546f6b656e3a206c697175696469747920666565206d757374206265747765656e203020616e642031303030",
															"id": 2892,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2782:58:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6a89d7fbb95c9909be81b8b6d1b3f62aeadfedad713314ae6cba8802f9479cb0",
																"typeString": "literal_string \"Hero Awaken Token: liquidity fee must between 0 and 1000\""
															},
															"value": "Hero Awaken Token: liquidity fee must between 0 and 1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6a89d7fbb95c9909be81b8b6d1b3f62aeadfedad713314ae6cba8802f9479cb0",
																"typeString": "literal_string \"Hero Awaken Token: liquidity fee must between 0 and 1000\""
															}
														],
														"id": 2884,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2722:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2722:129:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2894,
												"nodeType": "ExpressionStatement",
												"src": "2722:129:17"
											},
											{
												"expression": {
													"id": 2897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2895,
														"name": "_liquidityFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2706,
														"src": "2864:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2896,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2879,
														"src": "2880:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2864:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2898,
												"nodeType": "ExpressionStatement",
												"src": "2864:19:17"
											}
										]
									},
									"functionSelector": "357bf15c",
									"id": 2900,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2882,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2881,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "2701:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "2701:9:17"
										}
									],
									"name": "setLiquidityFee",
									"nameLocation": "2665:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2879,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2689:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2900,
												"src": "2681:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2681:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2680:13:17"
									},
									"returnParameters": {
										"id": 2883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2711:0:17"
									},
									"scope": 2987,
									"src": "2656:235:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2911,
										"nodeType": "Block",
										"src": "2960:44:17",
										"statements": [
											{
												"expression": {
													"id": 2909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2907,
														"name": "_liquidityKeeper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2708,
														"src": "2971:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2908,
														"name": "keeper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2902,
														"src": "2990:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2971:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2910,
												"nodeType": "ExpressionStatement",
												"src": "2971:25:17"
											}
										]
									},
									"functionSelector": "a128471f",
									"id": 2912,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2905,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2904,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "2950:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "2950:9:17"
										}
									],
									"name": "setLiquidityKeeper",
									"nameLocation": "2908:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2902,
												"mutability": "mutable",
												"name": "keeper",
												"nameLocation": "2935:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2912,
												"src": "2927:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2927:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2926:16:17"
									},
									"returnParameters": {
										"id": 2906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2960:0:17"
									},
									"scope": 2987,
									"src": "2899:105:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2925,
										"nodeType": "Block",
										"src": "3069:47:17",
										"statements": [
											{
												"expression": {
													"id": 2923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2919,
															"name": "_liquidityFrees",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2720,
															"src": "3080:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2921,
														"indexExpression": {
															"id": 2920,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2914,
															"src": "3096:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3080:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 2922,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3104:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3080:28:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2924,
												"nodeType": "ExpressionStatement",
												"src": "3080:28:17"
											}
										]
									},
									"functionSelector": "eefb9be2",
									"id": 2926,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2917,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2916,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 578,
												"src": "3059:9:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "3059:9:17"
										}
									],
									"name": "addLiquidityFree",
									"nameLocation": "3021:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3046:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2926,
												"src": "3038:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3038:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3037:14:17"
									},
									"returnParameters": {
										"id": 2918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3069:0:17"
									},
									"scope": 2987,
									"src": "3012:104:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1077
									],
									"body": {
										"id": 2985,
										"nodeType": "Block",
										"src": "3708:329:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 2937,
															"name": "_liquidityFrees",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2720,
															"src": "3723:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2939,
														"indexExpression": {
															"id": 2938,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2929,
															"src": "3739:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3723:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"baseExpression": {
															"id": 2940,
															"name": "_liquidityFrees",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2720,
															"src": "3748:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2942,
														"indexExpression": {
															"id": 2941,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2931,
															"src": "3764:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3748:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3723:44:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2953,
													"nodeType": "Block",
													"src": "3837:2:17",
													"statements": []
												},
												"id": 2954,
												"nodeType": "IfStatement",
												"src": "3719:120:17",
												"trueBody": {
													"id": 2952,
													"nodeType": "Block",
													"src": "3769:62:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2947,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2929,
																		"src": "3800:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2948,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2931,
																		"src": "3806:2:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2949,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2933,
																		"src": "3810:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2944,
																		"name": "super",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967271,
																		"src": "3784:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_super$_HatTokenV2_$2987_$",
																			"typeString": "type(contract super HatTokenV2)"
																		}
																	},
																	"id": 2946,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1077,
																	"src": "3784:15:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 2950,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3784:33:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2951,
															"nodeType": "ExpressionStatement",
															"src": "3784:33:17"
														}
													]
												}
											},
											{
												"assignments": [
													2956
												],
												"declarations": [
													{
														"constant": false,
														"id": 2956,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "3863:3:17",
														"nodeType": "VariableDeclaration",
														"scope": 2985,
														"src": "3855:11:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2955,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3855:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2964,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31303030",
															"id": 2962,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3899:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2959,
																	"name": "_liquidityFee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2706,
																	"src": "3880:13:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2957,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2933,
																	"src": "3869:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1967,
																"src": "3869:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3869:25:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1982,
														"src": "3869:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3869:35:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3855:49:17"
											},
											{
												"expression": {
													"id": 2967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2965,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2933,
														"src": "3915:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 2966,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2956,
														"src": "3925:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3915:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2968,
												"nodeType": "ExpressionStatement",
												"src": "3915:13:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2972,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2929,
															"src": "3957:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2973,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2931,
															"src": "3963:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2974,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2933,
															"src": "3967:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2969,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "3941:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_HatTokenV2_$2987_$",
																"typeString": "type(contract super HatTokenV2)"
															}
														},
														"id": 2971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1077,
														"src": "3941:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2975,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3941:33:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2976,
												"nodeType": "ExpressionStatement",
												"src": "3941:33:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2980,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2929,
															"src": "4001:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2981,
															"name": "_liquidityKeeper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2708,
															"src": "4007:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2982,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2956,
															"src": "4025:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2977,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "3985:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_HatTokenV2_$2987_$",
																"typeString": "type(contract super HatTokenV2)"
															}
														},
														"id": 2979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1077,
														"src": "3985:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3985:44:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2984,
												"nodeType": "ExpressionStatement",
												"src": "3985:44:17"
											}
										]
									},
									"documentation": {
										"id": 2927,
										"nodeType": "StructuredDocumentation",
										"src": "3124:465:17",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 2986,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "3604:9:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2935,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3699:8:17"
									},
									"parameters": {
										"id": 2934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2929,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3632:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "3624:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3624:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2931,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3655:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "3647:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3647:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2933,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3676:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "3668:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3668:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3613:76:17"
									},
									"returnParameters": {
										"id": 2936,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3708:0:17"
									},
									"scope": 2987,
									"src": "3595:442:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2988,
							"src": "510:3530:17",
							"usedErrors": []
						}
					],
					"src": "35:4007:17"
				},
				"id": 17
			}
		}
	}
}